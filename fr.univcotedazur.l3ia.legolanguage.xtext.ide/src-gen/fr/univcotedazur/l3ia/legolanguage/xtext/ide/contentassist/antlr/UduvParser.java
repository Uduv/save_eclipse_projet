/*
 * generated by Xtext 2.25.0
 */
package fr.univcotedazur.l3ia.legolanguage.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.univcotedazur.l3ia.legolanguage.xtext.ide.contentassist.antlr.internal.InternalUduvParser;
import fr.univcotedazur.l3ia.legolanguage.xtext.services.UduvGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class UduvParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(UduvGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, UduvGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getRobotDeclarationAccess().getAlternatives_2_5(), "rule__RobotDeclaration__Alternatives_2_5");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getCalculAccess().getAlternatives(), "rule__Calcul__Alternatives");
			builder.put(grammarAccess.getBinaryOperationAccess().getAlternatives(), "rule__BinaryOperation__Alternatives");
			builder.put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
			builder.put(grammarAccess.getComparaisonAccess().getAlternatives(), "rule__Comparaison__Alternatives");
			builder.put(grammarAccess.getVariableAccess().getAlternatives(), "rule__Variable__Alternatives");
			builder.put(grammarAccess.getSensorAccess().getAlternatives(), "rule__Sensor__Alternatives");
			builder.put(grammarAccess.getActuatorStatementAccess().getAlternatives(), "rule__ActuatorStatement__Alternatives");
			builder.put(grammarAccess.getSensorExpressionAccess().getAlternatives(), "rule__SensorExpression__Alternatives");
			builder.put(grammarAccess.getActuatorAccess().getAlternatives(), "rule__Actuator__Alternatives");
			builder.put(grammarAccess.getMotorAccess().getAlternatives(), "rule__Motor__Alternatives");
			builder.put(grammarAccess.getRotativeMotorAccess().getAlternatives(), "rule__RotativeMotor__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getDirectionAccess().getAlternatives(), "rule__Direction__Alternatives");
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getRobotDeclarationAccess().getGroup(), "rule__RobotDeclaration__Group__0");
			builder.put(grammarAccess.getRobotDeclarationAccess().getGroup_2(), "rule__RobotDeclaration__Group_2__0");
			builder.put(grammarAccess.getCommentaryAccess().getGroup(), "rule__Commentary__Group__0");
			builder.put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
			builder.put(grammarAccess.getWhileLoopAccess().getGroup(), "rule__WhileLoop__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
			builder.put(grammarAccess.getSubstarctionAccess().getGroup(), "rule__Substarction__Group__0");
			builder.put(grammarAccess.getDivisionAccess().getGroup(), "rule__Division__Group__0");
			builder.put(grammarAccess.getExponentialAccess().getGroup(), "rule__Exponential__Group__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
			builder.put(grammarAccess.getGTAccess().getGroup(), "rule__GT__Group__0");
			builder.put(grammarAccess.getGTAccess().getGroup_2(), "rule__GT__Group_2__0");
			builder.put(grammarAccess.getGTEqualAccess().getGroup(), "rule__GTEqual__Group__0");
			builder.put(grammarAccess.getGTEqualAccess().getGroup_2(), "rule__GTEqual__Group_2__0");
			builder.put(grammarAccess.getLTAccess().getGroup(), "rule__LT__Group__0");
			builder.put(grammarAccess.getLTAccess().getGroup_2(), "rule__LT__Group_2__0");
			builder.put(grammarAccess.getLTEqualAccess().getGroup(), "rule__LTEqual__Group__0");
			builder.put(grammarAccess.getLTEqualAccess().getGroup_2(), "rule__LTEqual__Group_2__0");
			builder.put(grammarAccess.getEqualAccess().getGroup(), "rule__Equal__Group__0");
			builder.put(grammarAccess.getEqualAccess().getGroup_2(), "rule__Equal__Group_2__0");
			builder.put(grammarAccess.getAssignementAccess().getGroup(), "rule__Assignement__Group__0");
			builder.put(grammarAccess.getLeIntegerAccess().getGroup(), "rule__LeInteger__Group__0");
			builder.put(grammarAccess.getLeIntegerAccess().getGroup_1(), "rule__LeInteger__Group_1__0");
			builder.put(grammarAccess.getLeStringAccess().getGroup(), "rule__LeString__Group__0");
			builder.put(grammarAccess.getLeStringAccess().getGroup_1(), "rule__LeString__Group_1__0");
			builder.put(grammarAccess.getLeBooleanAccess().getGroup(), "rule__LeBoolean__Group__0");
			builder.put(grammarAccess.getLeBooleanAccess().getGroup_1(), "rule__LeBoolean__Group_1__0");
			builder.put(grammarAccess.getLeFloatAccess().getGroup(), "rule__LeFloat__Group__0");
			builder.put(grammarAccess.getLeFloatAccess().getGroup_1(), "rule__LeFloat__Group_1__0");
			builder.put(grammarAccess.getPrintAccess().getGroup(), "rule__Print__Group__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getEFloatAccess().getGroup(), "rule__EFloat__Group__0");
			builder.put(grammarAccess.getWheelAccess().getGroup(), "rule__Wheel__Group__0");
			builder.put(grammarAccess.getArmAccess().getGroup(), "rule__Arm__Group__0");
			builder.put(grammarAccess.getLedAccess().getGroup(), "rule__Led__Group__0");
			builder.put(grammarAccess.getShootLauncherAccess().getGroup(), "rule__ShootLauncher__Group__0");
			builder.put(grammarAccess.getColorSensorAccess().getGroup(), "rule__ColorSensor__Group__0");
			builder.put(grammarAccess.getLaserSensorAccess().getGroup(), "rule__LaserSensor__Group__0");
			builder.put(grammarAccess.getGPSSensorAccess().getGroup(), "rule__GPSSensor__Group__0");
			builder.put(grammarAccess.getGyroSensorAccess().getGroup(), "rule__GyroSensor__Group__0");
			builder.put(grammarAccess.getTurnAccess().getGroup(), "rule__Turn__Group__0");
			builder.put(grammarAccess.getGoAccess().getGroup(), "rule__Go__Group__0");
			builder.put(grammarAccess.getChangeAngleAccess().getGroup(), "rule__ChangeAngle__Group__0");
			builder.put(grammarAccess.getChangeIntensityAccess().getGroup(), "rule__ChangeIntensity__Group__0");
			builder.put(grammarAccess.getShootAccess().getGroup(), "rule__Shoot__Group__0");
			builder.put(grammarAccess.getGetColorAccess().getGroup(), "rule__GetColor__Group__0");
			builder.put(grammarAccess.getGetDistanceAccess().getGroup(), "rule__GetDistance__Group__0");
			builder.put(grammarAccess.getGetGyroAccess().getGroup(), "rule__GetGyro__Group__0");
			builder.put(grammarAccess.getGetPositionAccess().getGroup(), "rule__GetPosition__Group__0");
			builder.put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
			builder.put(grammarAccess.getAndAccess().getGroup_3(), "rule__And__Group_3__0");
			builder.put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
			builder.put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
			builder.put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
			builder.put(grammarAccess.getProgramAccess().getStatementAssignment_1(), "rule__Program__StatementAssignment_1");
			builder.put(grammarAccess.getRobotDeclarationAccess().getNameAssignment_1(), "rule__RobotDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getRobotDeclarationAccess().getLeftWheelAssignment_2_2(), "rule__RobotDeclaration__LeftWheelAssignment_2_2");
			builder.put(grammarAccess.getRobotDeclarationAccess().getRightWheelAssignment_2_4(), "rule__RobotDeclaration__RightWheelAssignment_2_4");
			builder.put(grammarAccess.getRobotDeclarationAccess().getActuatorAssignment_2_5_0(), "rule__RobotDeclaration__ActuatorAssignment_2_5_0");
			builder.put(grammarAccess.getRobotDeclarationAccess().getSensorAssignment_2_5_1(), "rule__RobotDeclaration__SensorAssignment_2_5_1");
			builder.put(grammarAccess.getCommentaryAccess().getInitialeValueAssignment_2(), "rule__Commentary__InitialeValueAssignment_2");
			builder.put(grammarAccess.getIfAccess().getConditionAssignment_1(), "rule__If__ConditionAssignment_1");
			builder.put(grammarAccess.getIfAccess().getStatementAssignment_3(), "rule__If__StatementAssignment_3");
			builder.put(grammarAccess.getWhileLoopAccess().getLoopConditionAssignment_1(), "rule__WhileLoop__LoopConditionAssignment_1");
			builder.put(grammarAccess.getWhileLoopAccess().getStatementAssignment_3(), "rule__WhileLoop__StatementAssignment_3");
			builder.put(grammarAccess.getAdditionAccess().getLeftAssignment_1(), "rule__Addition__LeftAssignment_1");
			builder.put(grammarAccess.getAdditionAccess().getRightAssignment_3(), "rule__Addition__RightAssignment_3");
			builder.put(grammarAccess.getSubstarctionAccess().getLeftAssignment_1(), "rule__Substarction__LeftAssignment_1");
			builder.put(grammarAccess.getSubstarctionAccess().getRightAssignment_3(), "rule__Substarction__RightAssignment_3");
			builder.put(grammarAccess.getDivisionAccess().getLeftAssignment_1(), "rule__Division__LeftAssignment_1");
			builder.put(grammarAccess.getDivisionAccess().getRightAssignment_3(), "rule__Division__RightAssignment_3");
			builder.put(grammarAccess.getExponentialAccess().getLeftAssignment_1(), "rule__Exponential__LeftAssignment_1");
			builder.put(grammarAccess.getExponentialAccess().getRightAssignment_3(), "rule__Exponential__RightAssignment_3");
			builder.put(grammarAccess.getMultiplicationAccess().getLeftAssignment_1(), "rule__Multiplication__LeftAssignment_1");
			builder.put(grammarAccess.getMultiplicationAccess().getRightAssignment_3(), "rule__Multiplication__RightAssignment_3");
			builder.put(grammarAccess.getGTAccess().getLeftAssignment_1(), "rule__GT__LeftAssignment_1");
			builder.put(grammarAccess.getGTAccess().getRightAssignment_2_1(), "rule__GT__RightAssignment_2_1");
			builder.put(grammarAccess.getGTEqualAccess().getLeftAssignment_1(), "rule__GTEqual__LeftAssignment_1");
			builder.put(grammarAccess.getGTEqualAccess().getRightAssignment_2_1(), "rule__GTEqual__RightAssignment_2_1");
			builder.put(grammarAccess.getLTAccess().getLeftAssignment_1(), "rule__LT__LeftAssignment_1");
			builder.put(grammarAccess.getLTAccess().getRightAssignment_2_1(), "rule__LT__RightAssignment_2_1");
			builder.put(grammarAccess.getLTEqualAccess().getLeftAssignment_1(), "rule__LTEqual__LeftAssignment_1");
			builder.put(grammarAccess.getLTEqualAccess().getRightAssignment_2_1(), "rule__LTEqual__RightAssignment_2_1");
			builder.put(grammarAccess.getEqualAccess().getLeftAssignment_1(), "rule__Equal__LeftAssignment_1");
			builder.put(grammarAccess.getEqualAccess().getRightAssignment_2_1(), "rule__Equal__RightAssignment_2_1");
			builder.put(grammarAccess.getAssignementAccess().getLeftAssignment_1(), "rule__Assignement__LeftAssignment_1");
			builder.put(grammarAccess.getAssignementAccess().getRightAssignment_3(), "rule__Assignement__RightAssignment_3");
			builder.put(grammarAccess.getLeIntegerAccess().getNameAssignment_1_1(), "rule__LeInteger__NameAssignment_1_1");
			builder.put(grammarAccess.getLeIntegerAccess().getInitialeValueAssignment_2(), "rule__LeInteger__InitialeValueAssignment_2");
			builder.put(grammarAccess.getLeStringAccess().getNameAssignment_1_1(), "rule__LeString__NameAssignment_1_1");
			builder.put(grammarAccess.getLeStringAccess().getInitialeValueAssignment_2(), "rule__LeString__InitialeValueAssignment_2");
			builder.put(grammarAccess.getLeBooleanAccess().getNameAssignment_1_1(), "rule__LeBoolean__NameAssignment_1_1");
			builder.put(grammarAccess.getLeBooleanAccess().getInitialeValueAssignment_2(), "rule__LeBoolean__InitialeValueAssignment_2");
			builder.put(grammarAccess.getLeFloatAccess().getNameAssignment_1_1(), "rule__LeFloat__NameAssignment_1_1");
			builder.put(grammarAccess.getLeFloatAccess().getInitialeValueAssignment_2(), "rule__LeFloat__InitialeValueAssignment_2");
			builder.put(grammarAccess.getPrintAccess().getStatementAssignment_3(), "rule__Print__StatementAssignment_3");
			builder.put(grammarAccess.getVariableProxyAccess().getVariableAssignment(), "rule__VariableProxy__VariableAssignment");
			builder.put(grammarAccess.getWheelAccess().getPortIDAssignment_3(), "rule__Wheel__PortIDAssignment_3");
			builder.put(grammarAccess.getArmAccess().getNameAssignment_2(), "rule__Arm__NameAssignment_2");
			builder.put(grammarAccess.getArmAccess().getPortIDAssignment_4(), "rule__Arm__PortIDAssignment_4");
			builder.put(grammarAccess.getLedAccess().getNameAssignment_2(), "rule__Led__NameAssignment_2");
			builder.put(grammarAccess.getLedAccess().getPortIDAssignment_4(), "rule__Led__PortIDAssignment_4");
			builder.put(grammarAccess.getShootLauncherAccess().getNameAssignment_2(), "rule__ShootLauncher__NameAssignment_2");
			builder.put(grammarAccess.getShootLauncherAccess().getPortIDAssignment_4(), "rule__ShootLauncher__PortIDAssignment_4");
			builder.put(grammarAccess.getColorSensorAccess().getNameAssignment_2(), "rule__ColorSensor__NameAssignment_2");
			builder.put(grammarAccess.getColorSensorAccess().getPortIDAssignment_4(), "rule__ColorSensor__PortIDAssignment_4");
			builder.put(grammarAccess.getLaserSensorAccess().getNameAssignment_2(), "rule__LaserSensor__NameAssignment_2");
			builder.put(grammarAccess.getLaserSensorAccess().getPortIDAssignment_4(), "rule__LaserSensor__PortIDAssignment_4");
			builder.put(grammarAccess.getGPSSensorAccess().getNameAssignment_2(), "rule__GPSSensor__NameAssignment_2");
			builder.put(grammarAccess.getGPSSensorAccess().getPortIDAssignment_4(), "rule__GPSSensor__PortIDAssignment_4");
			builder.put(grammarAccess.getGyroSensorAccess().getNameAssignment_2(), "rule__GyroSensor__NameAssignment_2");
			builder.put(grammarAccess.getGyroSensorAccess().getPortIDAssignment_4(), "rule__GyroSensor__PortIDAssignment_4");
			builder.put(grammarAccess.getTurnAccess().getRobotAssignment_0(), "rule__Turn__RobotAssignment_0");
			builder.put(grammarAccess.getTurnAccess().getDirectionAssignment_3(), "rule__Turn__DirectionAssignment_3");
			builder.put(grammarAccess.getTurnAccess().getSpeedAssignment_5(), "rule__Turn__SpeedAssignment_5");
			builder.put(grammarAccess.getGoAccess().getRobotAssignment_0(), "rule__Go__RobotAssignment_0");
			builder.put(grammarAccess.getGoAccess().getSpeedAssignment_3(), "rule__Go__SpeedAssignment_3");
			builder.put(grammarAccess.getChangeAngleAccess().getRobotAssignment_0(), "rule__ChangeAngle__RobotAssignment_0");
			builder.put(grammarAccess.getChangeAngleAccess().getAngleAssignment_3(), "rule__ChangeAngle__AngleAssignment_3");
			builder.put(grammarAccess.getChangeIntensityAccess().getRobotAssignment_0(), "rule__ChangeIntensity__RobotAssignment_0");
			builder.put(grammarAccess.getChangeIntensityAccess().getIntensityAssignment_3(), "rule__ChangeIntensity__IntensityAssignment_3");
			builder.put(grammarAccess.getShootAccess().getRobotAssignment_0(), "rule__Shoot__RobotAssignment_0");
			builder.put(grammarAccess.getShootAccess().getForceAssignment_3(), "rule__Shoot__ForceAssignment_3");
			builder.put(grammarAccess.getGetColorAccess().getSensorAssignment_2(), "rule__GetColor__SensorAssignment_2");
			builder.put(grammarAccess.getGetDistanceAccess().getSensorAssignment_2(), "rule__GetDistance__SensorAssignment_2");
			builder.put(grammarAccess.getGetGyroAccess().getSensorAssignment_2(), "rule__GetGyro__SensorAssignment_2");
			builder.put(grammarAccess.getGetPositionAccess().getSensorAssignment_2(), "rule__GetPosition__SensorAssignment_2");
			builder.put(grammarAccess.getAndAccess().getLeftAssignment_2(), "rule__And__LeftAssignment_2");
			builder.put(grammarAccess.getAndAccess().getRightAssignment_3_1(), "rule__And__RightAssignment_3_1");
			builder.put(grammarAccess.getOrAccess().getLeftAssignment_2(), "rule__Or__LeftAssignment_2");
			builder.put(grammarAccess.getOrAccess().getRightAssignment_4(), "rule__Or__RightAssignment_4");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private UduvGrammarAccess grammarAccess;

	@Override
	protected InternalUduvParser createParser() {
		InternalUduvParser result = new InternalUduvParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public UduvGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(UduvGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
