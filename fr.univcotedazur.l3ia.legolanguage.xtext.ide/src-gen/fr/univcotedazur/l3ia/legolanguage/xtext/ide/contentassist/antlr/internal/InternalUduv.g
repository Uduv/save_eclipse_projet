/*
 * generated by Xtext 2.25.0
 */
grammar InternalUduv;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package fr.univcotedazur.l3ia.legolanguage.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.univcotedazur.l3ia.legolanguage.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fr.univcotedazur.l3ia.legolanguage.xtext.services.UduvGrammarAccess;

}
@parser::members {
	private UduvGrammarAccess grammarAccess;

	public void setGrammarAccess(UduvGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getGroup()); }
		(rule__Program__Group__0)
		{ after(grammarAccess.getProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparaison
entryRuleComparaison
:
{ before(grammarAccess.getComparaisonRule()); }
	 ruleComparaison
{ after(grammarAccess.getComparaisonRule()); } 
	 EOF 
;

// Rule Comparaison
ruleComparaison 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparaisonAccess().getAlternatives()); }
		(rule__Comparaison__Alternatives)
		{ after(grammarAccess.getComparaisonAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getAlternatives()); }
		(rule__Variable__Alternatives)
		{ after(grammarAccess.getVariableAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhileLoop
entryRuleWhileLoop
:
{ before(grammarAccess.getWhileLoopRule()); }
	 ruleWhileLoop
{ after(grammarAccess.getWhileLoopRule()); } 
	 EOF 
;

// Rule WhileLoop
ruleWhileLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileLoopAccess().getGroup()); }
		(rule__WhileLoop__Group__0)
		{ after(grammarAccess.getWhileLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForLoop
entryRuleForLoop
:
{ before(grammarAccess.getForLoopRule()); }
	 ruleForLoop
{ after(grammarAccess.getForLoopRule()); } 
	 EOF 
;

// Rule ForLoop
ruleForLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForLoopAccess().getGroup()); }
		(rule__ForLoop__Group__0)
		{ after(grammarAccess.getForLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddition
entryRuleAddition
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditionAccess().getGroup()); }
		(rule__Addition__Group__0)
		{ after(grammarAccess.getAdditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubstarction
entryRuleSubstarction
:
{ before(grammarAccess.getSubstarctionRule()); }
	 ruleSubstarction
{ after(grammarAccess.getSubstarctionRule()); } 
	 EOF 
;

// Rule Substarction
ruleSubstarction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubstarctionAccess().getGroup()); }
		(rule__Substarction__Group__0)
		{ after(grammarAccess.getSubstarctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGT
entryRuleGT
:
{ before(grammarAccess.getGTRule()); }
	 ruleGT
{ after(grammarAccess.getGTRule()); } 
	 EOF 
;

// Rule GT
ruleGT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGTAccess().getGroup()); }
		(rule__GT__Group__0)
		{ after(grammarAccess.getGTAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLT
entryRuleLT
:
{ before(grammarAccess.getLTRule()); }
	 ruleLT
{ after(grammarAccess.getLTRule()); } 
	 EOF 
;

// Rule LT
ruleLT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLTAccess().getGroup()); }
		(rule__LT__Group__0)
		{ after(grammarAccess.getLTAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEqual
entryRuleEqual
:
{ before(grammarAccess.getEqualRule()); }
	 ruleEqual
{ after(grammarAccess.getEqualRule()); } 
	 EOF 
;

// Rule Equal
ruleEqual 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualAccess().getGroup()); }
		(rule__Equal__Group__0)
		{ after(grammarAccess.getEqualAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignement
entryRuleAssignement
:
{ before(grammarAccess.getAssignementRule()); }
	 ruleAssignement
{ after(grammarAccess.getAssignementRule()); } 
	 EOF 
;

// Rule Assignement
ruleAssignement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignementAccess().getGroup()); }
		(rule__Assignement__Group__0)
		{ after(grammarAccess.getAssignementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeInteger
entryRuleLeInteger
:
{ before(grammarAccess.getLeIntegerRule()); }
	 ruleLeInteger
{ after(grammarAccess.getLeIntegerRule()); } 
	 EOF 
;

// Rule LeInteger
ruleLeInteger 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeIntegerAccess().getGroup()); }
		(rule__LeInteger__Group__0)
		{ after(grammarAccess.getLeIntegerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeString
entryRuleLeString
:
{ before(grammarAccess.getLeStringRule()); }
	 ruleLeString
{ after(grammarAccess.getLeStringRule()); } 
	 EOF 
;

// Rule LeString
ruleLeString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeStringAccess().getGroup()); }
		(rule__LeString__Group__0)
		{ after(grammarAccess.getLeStringAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeBoolean
entryRuleLeBoolean
:
{ before(grammarAccess.getLeBooleanRule()); }
	 ruleLeBoolean
{ after(grammarAccess.getLeBooleanRule()); } 
	 EOF 
;

// Rule LeBoolean
ruleLeBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeBooleanAccess().getGroup()); }
		(rule__LeBoolean__Group__0)
		{ after(grammarAccess.getLeBooleanAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeFloat
entryRuleLeFloat
:
{ before(grammarAccess.getLeFloatRule()); }
	 ruleLeFloat
{ after(grammarAccess.getLeFloatRule()); } 
	 EOF 
;

// Rule LeFloat
ruleLeFloat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeFloatAccess().getGroup()); }
		(rule__LeFloat__Group__0)
		{ after(grammarAccess.getLeFloatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrint
entryRulePrint
:
{ before(grammarAccess.getPrintRule()); }
	 rulePrint
{ after(grammarAccess.getPrintRule()); } 
	 EOF 
;

// Rule Print
rulePrint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintAccess().getGroup()); }
		(rule__Print__Group__0)
		{ after(grammarAccess.getPrintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable_Proxy
entryRuleVariable_Proxy
:
{ before(grammarAccess.getVariable_ProxyRule()); }
	 ruleVariable_Proxy
{ after(grammarAccess.getVariable_ProxyRule()); } 
	 EOF 
;

// Rule Variable_Proxy
ruleVariable_Proxy 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariable_ProxyAccess().getVariableAssignment()); }
		(rule__Variable_Proxy__VariableAssignment)
		{ after(grammarAccess.getVariable_ProxyAccess().getVariableAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEBoolean
entryRuleEBoolean
:
{ before(grammarAccess.getEBooleanRule()); }
	 ruleEBoolean
{ after(grammarAccess.getEBooleanRule()); } 
	 EOF 
;

// Rule EBoolean
ruleEBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEBooleanAccess().getAlternatives()); }
		(rule__EBoolean__Alternatives)
		{ after(grammarAccess.getEBooleanAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getGroup()); }
		(rule__EInt__Group__0)
		{ after(grammarAccess.getEIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEFloat
entryRuleEFloat
:
{ before(grammarAccess.getEFloatRule()); }
	 ruleEFloat
{ after(grammarAccess.getEFloatRule()); } 
	 EOF 
;

// Rule EFloat
ruleEFloat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEFloatAccess().getGroup()); }
		(rule__EFloat__Group__0)
		{ after(grammarAccess.getEFloatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getWhileLoopParserRuleCall_0()); }
		ruleWhileLoop
		{ after(grammarAccess.getStatementAccess().getWhileLoopParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getSubstarctionParserRuleCall_1()); }
		ruleSubstarction
		{ after(grammarAccess.getStatementAccess().getSubstarctionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getAdditionParserRuleCall_2()); }
		ruleAddition
		{ after(grammarAccess.getStatementAccess().getAdditionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getGTParserRuleCall_3()); }
		ruleGT
		{ after(grammarAccess.getStatementAccess().getGTParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getAssignementParserRuleCall_4()); }
		ruleAssignement
		{ after(grammarAccess.getStatementAccess().getAssignementParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getLeIntegerParserRuleCall_5()); }
		ruleLeInteger
		{ after(grammarAccess.getStatementAccess().getLeIntegerParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getLeStringParserRuleCall_6()); }
		ruleLeString
		{ after(grammarAccess.getStatementAccess().getLeStringParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getLTParserRuleCall_7()); }
		ruleLT
		{ after(grammarAccess.getStatementAccess().getLTParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getForLoopParserRuleCall_8()); }
		ruleForLoop
		{ after(grammarAccess.getStatementAccess().getForLoopParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getVariable_ProxyParserRuleCall_9()); }
		ruleVariable_Proxy
		{ after(grammarAccess.getStatementAccess().getVariable_ProxyParserRuleCall_9()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getPrintParserRuleCall_10()); }
		rulePrint
		{ after(grammarAccess.getStatementAccess().getPrintParserRuleCall_10()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getExpressionParserRuleCall_11()); }
		ruleExpression
		{ after(grammarAccess.getStatementAccess().getExpressionParserRuleCall_11()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparaison__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparaisonAccess().getGTParserRuleCall_0()); }
		ruleGT
		{ after(grammarAccess.getComparaisonAccess().getGTParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparaisonAccess().getLTParserRuleCall_1()); }
		ruleLT
		{ after(grammarAccess.getComparaisonAccess().getLTParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparaisonAccess().getEqualParserRuleCall_2()); }
		ruleEqual
		{ after(grammarAccess.getComparaisonAccess().getEqualParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getSubstarctionParserRuleCall_0()); }
		ruleSubstarction
		{ after(grammarAccess.getExpressionAccess().getSubstarctionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getAdditionParserRuleCall_1()); }
		ruleAddition
		{ after(grammarAccess.getExpressionAccess().getAdditionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getGTParserRuleCall_2()); }
		ruleGT
		{ after(grammarAccess.getExpressionAccess().getGTParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getAssignementParserRuleCall_3()); }
		ruleAssignement
		{ after(grammarAccess.getExpressionAccess().getAssignementParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getLTParserRuleCall_4()); }
		ruleLT
		{ after(grammarAccess.getExpressionAccess().getLTParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getVariable_ProxyParserRuleCall_5()); }
		ruleVariable_Proxy
		{ after(grammarAccess.getExpressionAccess().getVariable_ProxyParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getVariableParserRuleCall_6()); }
		ruleVariable
		{ after(grammarAccess.getExpressionAccess().getVariableParserRuleCall_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getLeIntegerParserRuleCall_0()); }
		ruleLeInteger
		{ after(grammarAccess.getVariableAccess().getLeIntegerParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getLeStringParserRuleCall_1()); }
		ruleLeString
		{ after(grammarAccess.getVariableAccess().getLeStringParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getLeFloatParserRuleCall_2()); }
		ruleLeFloat
		{ after(grammarAccess.getVariableAccess().getLeFloatParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getLeBooleanParserRuleCall_3()); }
		ruleLeBoolean
		{ after(grammarAccess.getVariableAccess().getLeBooleanParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EBoolean__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEBooleanAccess().getTrueKeyword_0()); }
		'true'
		{ after(grammarAccess.getEBooleanAccess().getTrueKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getEBooleanAccess().getFalseKeyword_1()); }
		'false'
		{ after(grammarAccess.getEBooleanAccess().getFalseKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getProgramAction_0()); }
	()
	{ after(grammarAccess.getProgramAccess().getProgramAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getStatementAssignment_1()); }
	(rule__Program__StatementAssignment_1)*
	{ after(grammarAccess.getProgramAccess().getStatementAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__0__Impl
	rule__WhileLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getWhileKeyword_0()); }
	'while'
	{ after(grammarAccess.getWhileLoopAccess().getWhileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__1__Impl
	rule__WhileLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getLoopConditionAssignment_1()); }
	(rule__WhileLoop__LoopConditionAssignment_1)
	{ after(grammarAccess.getWhileLoopAccess().getLoopConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__2__Impl
	rule__WhileLoop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getWhileLoopAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__3__Impl
	rule__WhileLoop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getStatementAssignment_3()); }
	(rule__WhileLoop__StatementAssignment_3)*
	{ after(grammarAccess.getWhileLoopAccess().getStatementAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getWhileLoopAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__0__Impl
	rule__ForLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getForKeyword_0()); }
	'for'
	{ after(grammarAccess.getForLoopAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__1__Impl
	rule__ForLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getLoopConditionAssignment_1()); }
	(rule__ForLoop__LoopConditionAssignment_1)
	{ after(grammarAccess.getForLoopAccess().getLoopConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__2__Impl
	rule__ForLoop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getForLoopAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__3__Impl
	rule__ForLoop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getStatementAssignment_3()); }
	(rule__ForLoop__StatementAssignment_3)*
	{ after(grammarAccess.getForLoopAccess().getStatementAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getForLoopAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getAdditionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__1__Impl
	rule__Addition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getLeftAssignment_1()); }
	(rule__Addition__LeftAssignment_1)
	{ after(grammarAccess.getAdditionAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__2__Impl
	rule__Addition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getPlusSignKeyword_2()); }
	'+'
	{ after(grammarAccess.getAdditionAccess().getPlusSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__3__Impl
	rule__Addition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getRightAssignment_3()); }
	(rule__Addition__RightAssignment_3)
	{ after(grammarAccess.getAdditionAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getAdditionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Substarction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Substarction__Group__0__Impl
	rule__Substarction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstarctionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getSubstarctionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Substarction__Group__1__Impl
	rule__Substarction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstarctionAccess().getLeftAssignment_1()); }
	(rule__Substarction__LeftAssignment_1)
	{ after(grammarAccess.getSubstarctionAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Substarction__Group__2__Impl
	rule__Substarction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstarctionAccess().getHyphenMinusKeyword_2()); }
	'-'
	{ after(grammarAccess.getSubstarctionAccess().getHyphenMinusKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Substarction__Group__3__Impl
	rule__Substarction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstarctionAccess().getRightAssignment_3()); }
	(rule__Substarction__RightAssignment_3)
	{ after(grammarAccess.getSubstarctionAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Substarction__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstarctionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getSubstarctionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GT__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GT__Group__0__Impl
	rule__GT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGTAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getGTAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GT__Group__1__Impl
	rule__GT__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGTAccess().getLeftAssignment_1()); }
	(rule__GT__LeftAssignment_1)
	{ after(grammarAccess.getGTAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GT__Group__2__Impl
	rule__GT__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGTAccess().getGreaterThanSignKeyword_2()); }
	'>'
	{ after(grammarAccess.getGTAccess().getGreaterThanSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GT__Group__3__Impl
	rule__GT__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGTAccess().getRightAssignment_3()); }
	(rule__GT__RightAssignment_3)
	{ after(grammarAccess.getGTAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GT__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGTAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getGTAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LT__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LT__Group__0__Impl
	rule__LT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getLTAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LT__Group__1__Impl
	rule__LT__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTAccess().getLeftAssignment_1()); }
	(rule__LT__LeftAssignment_1)
	{ after(grammarAccess.getLTAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LT__Group__2__Impl
	rule__LT__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTAccess().getLessThanSignKeyword_2()); }
	'<'
	{ after(grammarAccess.getLTAccess().getLessThanSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LT__Group__3__Impl
	rule__LT__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTAccess().getRightAssignment_3()); }
	(rule__LT__RightAssignment_3)
	{ after(grammarAccess.getLTAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LT__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getLTAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equal__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__0__Impl
	rule__Equal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getEqualAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__1__Impl
	rule__Equal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getLeftAssignment_1()); }
	(rule__Equal__LeftAssignment_1)
	{ after(grammarAccess.getEqualAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__2__Impl
	rule__Equal__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getEqualsSignEqualsSignKeyword_2()); }
	'=='
	{ after(grammarAccess.getEqualAccess().getEqualsSignEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__3__Impl
	rule__Equal__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getRightAssignment_3()); }
	(rule__Equal__RightAssignment_3)
	{ after(grammarAccess.getEqualAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getEqualAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignement__Group__0__Impl
	rule__Assignement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignementAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getAssignementAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignement__Group__1__Impl
	rule__Assignement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignementAccess().getLeftAssignment_1()); }
	(rule__Assignement__LeftAssignment_1)
	{ after(grammarAccess.getAssignementAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignement__Group__2__Impl
	rule__Assignement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignementAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getAssignementAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignement__Group__3__Impl
	rule__Assignement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignementAccess().getRightAssignment_3()); }
	(rule__Assignement__RightAssignment_3)
	{ after(grammarAccess.getAssignementAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignementAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getAssignementAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeInteger__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeInteger__Group__0__Impl
	rule__LeInteger__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeIntegerAccess().getLeIntegerAction_0()); }
	()
	{ after(grammarAccess.getLeIntegerAccess().getLeIntegerAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeInteger__Group__1__Impl
	rule__LeInteger__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeIntegerAccess().getIsConstAssignment_1()); }
	(rule__LeInteger__IsConstAssignment_1)?
	{ after(grammarAccess.getLeIntegerAccess().getIsConstAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeInteger__Group__2__Impl
	rule__LeInteger__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeIntegerAccess().getIntKeyword_2()); }
	('int')?
	{ after(grammarAccess.getLeIntegerAccess().getIntKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeInteger__Group__3__Impl
	rule__LeInteger__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeIntegerAccess().getNameAssignment_3()); }
	(rule__LeInteger__NameAssignment_3)
	{ after(grammarAccess.getLeIntegerAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeInteger__Group__4__Impl
	rule__LeInteger__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeIntegerAccess().getEqualsSignKeyword_4()); }
	'='
	{ after(grammarAccess.getLeIntegerAccess().getEqualsSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeInteger__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeIntegerAccess().getInitialeValueAssignment_5()); }
	(rule__LeInteger__InitialeValueAssignment_5)?
	{ after(grammarAccess.getLeIntegerAccess().getInitialeValueAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeString__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeString__Group__0__Impl
	rule__LeString__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeStringAccess().getLeStringAction_0()); }
	()
	{ after(grammarAccess.getLeStringAccess().getLeStringAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeString__Group__1__Impl
	rule__LeString__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeStringAccess().getStringKeyword_1()); }
	('string')?
	{ after(grammarAccess.getLeStringAccess().getStringKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeString__Group__2__Impl
	rule__LeString__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeStringAccess().getNameAssignment_2()); }
	(rule__LeString__NameAssignment_2)
	{ after(grammarAccess.getLeStringAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeString__Group__3__Impl
	rule__LeString__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeStringAccess().getEqualsSignKeyword_3()); }
	'='
	{ after(grammarAccess.getLeStringAccess().getEqualsSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeString__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeStringAccess().getInitialeValueAssignment_4()); }
	(rule__LeString__InitialeValueAssignment_4)?
	{ after(grammarAccess.getLeStringAccess().getInitialeValueAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeBoolean__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeBoolean__Group__0__Impl
	rule__LeBoolean__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeBoolean__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeBooleanAccess().getLeBooleanAction_0()); }
	()
	{ after(grammarAccess.getLeBooleanAccess().getLeBooleanAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeBoolean__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeBoolean__Group__1__Impl
	rule__LeBoolean__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeBoolean__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeBooleanAccess().getBooleanKeyword_1()); }
	('boolean')?
	{ after(grammarAccess.getLeBooleanAccess().getBooleanKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeBoolean__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeBoolean__Group__2__Impl
	rule__LeBoolean__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LeBoolean__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeBooleanAccess().getNameAssignment_2()); }
	(rule__LeBoolean__NameAssignment_2)
	{ after(grammarAccess.getLeBooleanAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeBoolean__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeBoolean__Group__3__Impl
	rule__LeBoolean__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LeBoolean__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeBooleanAccess().getEqualsSignKeyword_3()); }
	'='
	{ after(grammarAccess.getLeBooleanAccess().getEqualsSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeBoolean__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeBoolean__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeBoolean__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeBooleanAccess().getInitialeValueAssignment_4()); }
	(rule__LeBoolean__InitialeValueAssignment_4)?
	{ after(grammarAccess.getLeBooleanAccess().getInitialeValueAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeFloat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeFloat__Group__0__Impl
	rule__LeFloat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeFloat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeFloatAccess().getLeFloatAction_0()); }
	()
	{ after(grammarAccess.getLeFloatAccess().getLeFloatAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeFloat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeFloat__Group__1__Impl
	rule__LeFloat__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeFloat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeFloatAccess().getFloatKeyword_1()); }
	('float')?
	{ after(grammarAccess.getLeFloatAccess().getFloatKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeFloat__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeFloat__Group__2__Impl
	rule__LeFloat__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LeFloat__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeFloatAccess().getNameAssignment_2()); }
	(rule__LeFloat__NameAssignment_2)
	{ after(grammarAccess.getLeFloatAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeFloat__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeFloat__Group__3__Impl
	rule__LeFloat__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LeFloat__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeFloatAccess().getEqualsSignKeyword_3()); }
	'='
	{ after(grammarAccess.getLeFloatAccess().getEqualsSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeFloat__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeFloat__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeFloat__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeFloatAccess().getInitialeValueAssignment_4()); }
	(rule__LeFloat__InitialeValueAssignment_4)?
	{ after(grammarAccess.getLeFloatAccess().getInitialeValueAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Print__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__0__Impl
	rule__Print__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getPrintAction_0()); }
	()
	{ after(grammarAccess.getPrintAccess().getPrintAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__1__Impl
	rule__Print__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getPrintKeyword_1()); }
	'print'
	{ after(grammarAccess.getPrintAccess().getPrintKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__2__Impl
	rule__Print__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getPrintAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__3__Impl
	rule__Print__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getStatementAssignment_3()); }
	(rule__Print__StatementAssignment_3)?
	{ after(grammarAccess.getPrintAccess().getStatementAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__4__Impl
	rule__Print__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getPrintAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getNameAssignment_5()); }
	(rule__Print__NameAssignment_5)
	{ after(grammarAccess.getPrintAccess().getNameAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EFloat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group__0__Impl
	rule__EFloat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getEFloatAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group__1__Impl
	rule__EFloat__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getEFloatAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getEFloatAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__StatementAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getStatementStatementParserRuleCall_1_0()); }
		ruleStatement
		{ after(grammarAccess.getProgramAccess().getStatementStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__LoopConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileLoopAccess().getLoopConditionComparaisonParserRuleCall_1_0()); }
		ruleComparaison
		{ after(grammarAccess.getWhileLoopAccess().getLoopConditionComparaisonParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__StatementAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileLoopAccess().getStatementStatementParserRuleCall_3_0()); }
		ruleStatement
		{ after(grammarAccess.getWhileLoopAccess().getStatementStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__LoopConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForLoopAccess().getLoopConditionComparaisonParserRuleCall_1_0()); }
		ruleComparaison
		{ after(grammarAccess.getForLoopAccess().getLoopConditionComparaisonParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__StatementAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForLoopAccess().getStatementStatementParserRuleCall_3_0()); }
		ruleStatement
		{ after(grammarAccess.getForLoopAccess().getStatementStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getLeftExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getAdditionAccess().getLeftExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getRightExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getAdditionAccess().getRightExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubstarctionAccess().getLeftExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getSubstarctionAccess().getLeftExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubstarctionAccess().getRightExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getSubstarctionAccess().getRightExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGTAccess().getLeftExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getGTAccess().getLeftExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGTAccess().getRightExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getGTAccess().getRightExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLTAccess().getLeftExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getLTAccess().getLeftExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLTAccess().getRightExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getLTAccess().getRightExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualAccess().getLeftExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getEqualAccess().getLeftExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualAccess().getRightExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getEqualAccess().getRightExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignementAccess().getLeftExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getAssignementAccess().getLeftExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignementAccess().getRightExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getAssignementAccess().getRightExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__IsConstAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeIntegerAccess().getIsConstIsConstKeyword_1_0()); }
		(
			{ before(grammarAccess.getLeIntegerAccess().getIsConstIsConstKeyword_1_0()); }
			'isConst'
			{ after(grammarAccess.getLeIntegerAccess().getIsConstIsConstKeyword_1_0()); }
		)
		{ after(grammarAccess.getLeIntegerAccess().getIsConstIsConstKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeIntegerAccess().getNameEStringParserRuleCall_3_0()); }
		ruleEString
		{ after(grammarAccess.getLeIntegerAccess().getNameEStringParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__InitialeValueAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeIntegerAccess().getInitialeValueEIntParserRuleCall_5_0()); }
		ruleEInt
		{ after(grammarAccess.getLeIntegerAccess().getInitialeValueEIntParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeStringAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getLeStringAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__InitialeValueAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeStringAccess().getInitialeValueEStringParserRuleCall_4_0()); }
		ruleEString
		{ after(grammarAccess.getLeStringAccess().getInitialeValueEStringParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeBoolean__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeBooleanAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getLeBooleanAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeBoolean__InitialeValueAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeBooleanAccess().getInitialeValueEBooleanParserRuleCall_4_0()); }
		ruleEBoolean
		{ after(grammarAccess.getLeBooleanAccess().getInitialeValueEBooleanParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeFloat__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeFloatAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getLeFloatAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeFloat__InitialeValueAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeFloatAccess().getInitialeValueEFloatParserRuleCall_4_0()); }
		ruleEFloat
		{ after(grammarAccess.getLeFloatAccess().getInitialeValueEFloatParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__StatementAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintAccess().getStatementStatementParserRuleCall_3_0()); }
		ruleStatement
		{ after(grammarAccess.getPrintAccess().getStatementStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__NameAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintAccess().getNameEStringParserRuleCall_5_0()); }
		ruleEString
		{ after(grammarAccess.getPrintAccess().getNameEStringParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable_Proxy__VariableAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariable_ProxyAccess().getVariableVariableCrossReference_0()); }
		(
			{ before(grammarAccess.getVariable_ProxyAccess().getVariableVariableEStringParserRuleCall_0_1()); }
			ruleEString
			{ after(grammarAccess.getVariable_ProxyAccess().getVariableVariableEStringParserRuleCall_0_1()); }
		)
		{ after(grammarAccess.getVariable_ProxyAccess().getVariableVariableCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
