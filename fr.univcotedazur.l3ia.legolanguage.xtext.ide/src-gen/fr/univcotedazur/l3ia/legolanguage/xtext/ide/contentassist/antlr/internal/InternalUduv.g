/*
 * generated by Xtext 2.25.0
 */
grammar InternalUduv;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package fr.univcotedazur.l3ia.legolanguage.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.univcotedazur.l3ia.legolanguage.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fr.univcotedazur.l3ia.legolanguage.xtext.services.UduvGrammarAccess;

}
@parser::members {
	private UduvGrammarAccess grammarAccess;

	public void setGrammarAccess(UduvGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getGroup()); }
		(rule__Program__Group__0)
		{ after(grammarAccess.getProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparaison
entryRuleComparaison
:
{ before(grammarAccess.getComparaisonRule()); }
	 ruleComparaison
{ after(grammarAccess.getComparaisonRule()); } 
	 EOF 
;

// Rule Comparaison
ruleComparaison 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparaisonAccess().getAlternatives()); }
		(rule__Comparaison__Alternatives)
		{ after(grammarAccess.getComparaisonAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhileLoop
entryRuleWhileLoop
:
{ before(grammarAccess.getWhileLoopRule()); }
	 ruleWhileLoop
{ after(grammarAccess.getWhileLoopRule()); } 
	 EOF 
;

// Rule WhileLoop
ruleWhileLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileLoopAccess().getGroup()); }
		(rule__WhileLoop__Group__0)
		{ after(grammarAccess.getWhileLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForLoop
entryRuleForLoop
:
{ before(grammarAccess.getForLoopRule()); }
	 ruleForLoop
{ after(grammarAccess.getForLoopRule()); } 
	 EOF 
;

// Rule ForLoop
ruleForLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForLoopAccess().getGroup()); }
		(rule__ForLoop__Group__0)
		{ after(grammarAccess.getForLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubstarction
entryRuleSubstarction
:
{ before(grammarAccess.getSubstarctionRule()); }
	 ruleSubstarction
{ after(grammarAccess.getSubstarctionRule()); } 
	 EOF 
;

// Rule Substarction
ruleSubstarction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubstarctionAccess().getGroup()); }
		(rule__Substarction__Group__0)
		{ after(grammarAccess.getSubstarctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGT
entryRuleGT
:
{ before(grammarAccess.getGTRule()); }
	 ruleGT
{ after(grammarAccess.getGTRule()); } 
	 EOF 
;

// Rule GT
ruleGT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGTAccess().getGroup()); }
		(rule__GT__Group__0)
		{ after(grammarAccess.getGTAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLT
entryRuleLT
:
{ before(grammarAccess.getLTRule()); }
	 ruleLT
{ after(grammarAccess.getLTRule()); } 
	 EOF 
;

// Rule LT
ruleLT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLTAccess().getGroup()); }
		(rule__LT__Group__0)
		{ after(grammarAccess.getLTAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignement
entryRuleAssignement
:
{ before(grammarAccess.getAssignementRule()); }
	 ruleAssignement
{ after(grammarAccess.getAssignementRule()); } 
	 EOF 
;

// Rule Assignement
ruleAssignement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignementAccess().getGroup()); }
		(rule__Assignement__Group__0)
		{ after(grammarAccess.getAssignementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleleInteger
entryRuleleInteger
:
{ before(grammarAccess.getLeIntegerRule()); }
	 ruleleInteger
{ after(grammarAccess.getLeIntegerRule()); } 
	 EOF 
;

// Rule leInteger
ruleleInteger 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeIntegerAccess().getGroup()); }
		(rule__LeInteger__Group__0)
		{ after(grammarAccess.getLeIntegerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleleString
entryRuleleString
:
{ before(grammarAccess.getLeStringRule()); }
	 ruleleString
{ after(grammarAccess.getLeStringRule()); } 
	 EOF 
;

// Rule leString
ruleleString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeStringAccess().getGroup()); }
		(rule__LeString__Group__0)
		{ after(grammarAccess.getLeStringAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrint
entryRulePrint
:
{ before(grammarAccess.getPrintRule()); }
	 rulePrint
{ after(grammarAccess.getPrintRule()); } 
	 EOF 
;

// Rule Print
rulePrint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintAccess().getGroup()); }
		(rule__Print__Group__0)
		{ after(grammarAccess.getPrintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable_Proxy
entryRuleVariable_Proxy
:
{ before(grammarAccess.getVariable_ProxyRule()); }
	 ruleVariable_Proxy
{ after(grammarAccess.getVariable_ProxyRule()); } 
	 EOF 
;

// Rule Variable_Proxy
ruleVariable_Proxy 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariable_ProxyAccess().getGroup()); }
		(rule__Variable_Proxy__Group__0)
		{ after(grammarAccess.getVariable_ProxyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getGroup()); }
		(rule__EInt__Group__0)
		{ after(grammarAccess.getEIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getWhileLoopParserRuleCall_0()); }
		ruleWhileLoop
		{ after(grammarAccess.getStatementAccess().getWhileLoopParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getSubstarctionParserRuleCall_1()); }
		ruleSubstarction
		{ after(grammarAccess.getStatementAccess().getSubstarctionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getGTParserRuleCall_2()); }
		ruleGT
		{ after(grammarAccess.getStatementAccess().getGTParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getAssignementParserRuleCall_3()); }
		ruleAssignement
		{ after(grammarAccess.getStatementAccess().getAssignementParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getLeIntegerParserRuleCall_4()); }
		ruleleInteger
		{ after(grammarAccess.getStatementAccess().getLeIntegerParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getLeStringParserRuleCall_5()); }
		ruleleString
		{ after(grammarAccess.getStatementAccess().getLeStringParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getLTParserRuleCall_6()); }
		ruleLT
		{ after(grammarAccess.getStatementAccess().getLTParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getForLoopParserRuleCall_7()); }
		ruleForLoop
		{ after(grammarAccess.getStatementAccess().getForLoopParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getPrintParserRuleCall_8()); }
		rulePrint
		{ after(grammarAccess.getStatementAccess().getPrintParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getVariable_ProxyParserRuleCall_9()); }
		ruleVariable_Proxy
		{ after(grammarAccess.getStatementAccess().getVariable_ProxyParserRuleCall_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparaison__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparaisonAccess().getGTParserRuleCall_0()); }
		ruleGT
		{ after(grammarAccess.getComparaisonAccess().getGTParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparaisonAccess().getLTParserRuleCall_1()); }
		ruleLT
		{ after(grammarAccess.getComparaisonAccess().getLTParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getSubstarctionParserRuleCall_0()); }
		ruleSubstarction
		{ after(grammarAccess.getExpressionAccess().getSubstarctionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getGTParserRuleCall_1()); }
		ruleGT
		{ after(grammarAccess.getExpressionAccess().getGTParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getAssignementParserRuleCall_2()); }
		ruleAssignement
		{ after(grammarAccess.getExpressionAccess().getAssignementParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getLTParserRuleCall_3()); }
		ruleLT
		{ after(grammarAccess.getExpressionAccess().getLTParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getPrintParserRuleCall_4()); }
		rulePrint
		{ after(grammarAccess.getExpressionAccess().getPrintParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getVariable_ProxyParserRuleCall_5()); }
		ruleVariable_Proxy
		{ after(grammarAccess.getExpressionAccess().getVariable_ProxyParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getProgramAction_0()); }
	()
	{ after(grammarAccess.getProgramAccess().getProgramAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getProgramKeyword_1()); }
	'Program'
	{ after(grammarAccess.getProgramAccess().getProgramKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__2__Impl
	rule__Program__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getNameAssignment_2()); }
	(rule__Program__NameAssignment_2)
	{ after(grammarAccess.getProgramAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__3__Impl
	rule__Program__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__4__Impl
	rule__Program__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getGroup_4()); }
	(rule__Program__Group_4__0)?
	{ after(grammarAccess.getProgramAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group_4__0__Impl
	rule__Program__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getStatementKeyword_4_0()); }
	'statement'
	{ after(grammarAccess.getProgramAccess().getStatementKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group_4__1__Impl
	rule__Program__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_4_1()); }
	'{'
	{ after(grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group_4__2__Impl
	rule__Program__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getStatementAssignment_4_2()); }
	(rule__Program__StatementAssignment_4_2)
	{ after(grammarAccess.getProgramAccess().getStatementAssignment_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group_4__3__Impl
	rule__Program__Group_4__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getGroup_4_3()); }
	(rule__Program__Group_4_3__0)*
	{ after(grammarAccess.getProgramAccess().getGroup_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_4__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group_4__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_4__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_4_4()); }
	'}'
	{ after(grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_4_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group_4_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group_4_3__0__Impl
	rule__Program__Group_4_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_4_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getCommaKeyword_4_3_0()); }
	','
	{ after(grammarAccess.getProgramAccess().getCommaKeyword_4_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_4_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group_4_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_4_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getStatementAssignment_4_3_1()); }
	(rule__Program__StatementAssignment_4_3_1)
	{ after(grammarAccess.getProgramAccess().getStatementAssignment_4_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__0__Impl
	rule__WhileLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getWhileKeyword_0()); }
	'while'
	{ after(grammarAccess.getWhileLoopAccess().getWhileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__1__Impl
	rule__WhileLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getWhileLoopAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__2__Impl
	rule__WhileLoop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getLoopConditionAssignment_2()); }
	(rule__WhileLoop__LoopConditionAssignment_2)
	{ after(grammarAccess.getWhileLoopAccess().getLoopConditionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__3__Impl
	rule__WhileLoop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getWhileLoopAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__4__Impl
	rule__WhileLoop__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getWhileLoopAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__5__Impl
	rule__WhileLoop__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getStatementAssignment_5()); }
	(rule__WhileLoop__StatementAssignment_5)*
	{ after(grammarAccess.getWhileLoopAccess().getStatementAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getWhileLoopAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__0__Impl
	rule__ForLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getForKeyword_0()); }
	'For'
	{ after(grammarAccess.getForLoopAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__1__Impl
	rule__ForLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getForLoopAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__2__Impl
	rule__ForLoop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getLoopConditionAssignment_2()); }
	(rule__ForLoop__LoopConditionAssignment_2)
	{ after(grammarAccess.getForLoopAccess().getLoopConditionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__3__Impl
	rule__ForLoop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getForLoopAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__4__Impl
	rule__ForLoop__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getForLoopAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__5__Impl
	rule__ForLoop__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getStatementAssignment_5()); }
	(rule__ForLoop__StatementAssignment_5)*
	{ after(grammarAccess.getForLoopAccess().getStatementAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getForLoopAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Substarction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Substarction__Group__0__Impl
	rule__Substarction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstarctionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getSubstarctionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Substarction__Group__1__Impl
	rule__Substarction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstarctionAccess().getLeftAssignment_1()); }
	(rule__Substarction__LeftAssignment_1)
	{ after(grammarAccess.getSubstarctionAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Substarction__Group__2__Impl
	rule__Substarction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstarctionAccess().getHyphenMinusKeyword_2()); }
	'-'
	{ after(grammarAccess.getSubstarctionAccess().getHyphenMinusKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Substarction__Group__3__Impl
	rule__Substarction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstarctionAccess().getRightAssignment_3()); }
	(rule__Substarction__RightAssignment_3)
	{ after(grammarAccess.getSubstarctionAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Substarction__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstarctionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getSubstarctionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GT__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GT__Group__0__Impl
	rule__GT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGTAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getGTAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GT__Group__1__Impl
	rule__GT__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGTAccess().getLeftAssignment_1()); }
	(rule__GT__LeftAssignment_1)
	{ after(grammarAccess.getGTAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GT__Group__2__Impl
	rule__GT__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGTAccess().getGreaterThanSignKeyword_2()); }
	'>'
	{ after(grammarAccess.getGTAccess().getGreaterThanSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GT__Group__3__Impl
	rule__GT__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGTAccess().getRightAssignment_3()); }
	(rule__GT__RightAssignment_3)
	{ after(grammarAccess.getGTAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GT__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGTAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getGTAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LT__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LT__Group__0__Impl
	rule__LT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getLTAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LT__Group__1__Impl
	rule__LT__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTAccess().getLeftAssignment_1()); }
	(rule__LT__LeftAssignment_1)
	{ after(grammarAccess.getLTAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LT__Group__2__Impl
	rule__LT__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTAccess().getLessThanSignKeyword_2()); }
	'<'
	{ after(grammarAccess.getLTAccess().getLessThanSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LT__Group__3__Impl
	rule__LT__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTAccess().getRightAssignment_3()); }
	(rule__LT__RightAssignment_3)
	{ after(grammarAccess.getLTAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LT__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getLTAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignement__Group__0__Impl
	rule__Assignement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignementAccess().getLeftKeyword_0()); }
	'left'
	{ after(grammarAccess.getAssignementAccess().getLeftKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignement__Group__1__Impl
	rule__Assignement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignementAccess().getLeftAssignment_1()); }
	(rule__Assignement__LeftAssignment_1)
	{ after(grammarAccess.getAssignementAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignement__Group__2__Impl
	rule__Assignement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignementAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getAssignementAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignement__Group__3__Impl
	rule__Assignement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignementAccess().getRightKeyword_3()); }
	'right'
	{ after(grammarAccess.getAssignementAccess().getRightKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignement__Group__4__Impl
	rule__Assignement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignementAccess().getRightAssignment_4()); }
	(rule__Assignement__RightAssignment_4)
	{ after(grammarAccess.getAssignementAccess().getRightAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignementAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getAssignementAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeInteger__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeInteger__Group__0__Impl
	rule__LeInteger__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeIntegerAccess().getLeIntegerAction_0()); }
	()
	{ after(grammarAccess.getLeIntegerAccess().getLeIntegerAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeInteger__Group__1__Impl
	rule__LeInteger__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeIntegerAccess().getIsConstAssignment_1()); }
	(rule__LeInteger__IsConstAssignment_1)?
	{ after(grammarAccess.getLeIntegerAccess().getIsConstAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeInteger__Group__2__Impl
	rule__LeInteger__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeIntegerAccess().getIntKeyword_2()); }
	'int'
	{ after(grammarAccess.getLeIntegerAccess().getIntKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeInteger__Group__3__Impl
	rule__LeInteger__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeIntegerAccess().getNameAssignment_3()); }
	(rule__LeInteger__NameAssignment_3)
	{ after(grammarAccess.getLeIntegerAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeInteger__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeIntegerAccess().getGroup_4()); }
	(rule__LeInteger__Group_4__0)?
	{ after(grammarAccess.getLeIntegerAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeInteger__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeInteger__Group_4__0__Impl
	rule__LeInteger__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeIntegerAccess().getInitialeValueKeyword_4_0()); }
	'initialeValue'
	{ after(grammarAccess.getLeIntegerAccess().getInitialeValueKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeInteger__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeIntegerAccess().getInitialeValueAssignment_4_1()); }
	(rule__LeInteger__InitialeValueAssignment_4_1)
	{ after(grammarAccess.getLeIntegerAccess().getInitialeValueAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeString__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeString__Group__0__Impl
	rule__LeString__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeStringAccess().getLeStringAction_0()); }
	()
	{ after(grammarAccess.getLeStringAccess().getLeStringAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeString__Group__1__Impl
	rule__LeString__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeStringAccess().getLeStringKeyword_1()); }
	'leString'
	{ after(grammarAccess.getLeStringAccess().getLeStringKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeString__Group__2__Impl
	rule__LeString__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeStringAccess().getNameAssignment_2()); }
	(rule__LeString__NameAssignment_2)
	{ after(grammarAccess.getLeStringAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeString__Group__3__Impl
	rule__LeString__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeStringAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getLeStringAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeString__Group__4__Impl
	rule__LeString__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeStringAccess().getGroup_4()); }
	(rule__LeString__Group_4__0)?
	{ after(grammarAccess.getLeStringAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeString__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeStringAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getLeStringAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeString__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeString__Group_4__0__Impl
	rule__LeString__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeStringAccess().getInitialeValueKeyword_4_0()); }
	'initialeValue'
	{ after(grammarAccess.getLeStringAccess().getInitialeValueKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeString__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeStringAccess().getInitialeValueAssignment_4_1()); }
	(rule__LeString__InitialeValueAssignment_4_1)
	{ after(grammarAccess.getLeStringAccess().getInitialeValueAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Print__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__0__Impl
	rule__Print__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getPrintAction_0()); }
	()
	{ after(grammarAccess.getPrintAccess().getPrintAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__1__Impl
	rule__Print__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getPrintKeyword_1()); }
	'Print'
	{ after(grammarAccess.getPrintAccess().getPrintKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getNameAssignment_2()); }
	(rule__Print__NameAssignment_2)
	{ after(grammarAccess.getPrintAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable_Proxy__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable_Proxy__Group__0__Impl
	rule__Variable_Proxy__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable_Proxy__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariable_ProxyAccess().getVariable_ProxyKeyword_0()); }
	'Variable_Proxy'
	{ after(grammarAccess.getVariable_ProxyAccess().getVariable_ProxyKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable_Proxy__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable_Proxy__Group__1__Impl
	rule__Variable_Proxy__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable_Proxy__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariable_ProxyAccess().getNameAssignment_1()); }
	(rule__Variable_Proxy__NameAssignment_1)
	{ after(grammarAccess.getVariable_ProxyAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable_Proxy__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable_Proxy__Group__2__Impl
	rule__Variable_Proxy__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable_Proxy__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariable_ProxyAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getVariable_ProxyAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable_Proxy__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable_Proxy__Group__3__Impl
	rule__Variable_Proxy__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable_Proxy__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariable_ProxyAccess().getVariableKeyword_3()); }
	'Variable'
	{ after(grammarAccess.getVariable_ProxyAccess().getVariableKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable_Proxy__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable_Proxy__Group__4__Impl
	rule__Variable_Proxy__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable_Proxy__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariable_ProxyAccess().getVariableAssignment_4()); }
	(rule__Variable_Proxy__VariableAssignment_4)
	{ after(grammarAccess.getVariable_ProxyAccess().getVariableAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable_Proxy__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable_Proxy__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable_Proxy__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariable_ProxyAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getVariable_ProxyAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getProgramAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__StatementAssignment_4_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getStatementStatementParserRuleCall_4_2_0()); }
		ruleStatement
		{ after(grammarAccess.getProgramAccess().getStatementStatementParserRuleCall_4_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__StatementAssignment_4_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getStatementStatementParserRuleCall_4_3_1_0()); }
		ruleStatement
		{ after(grammarAccess.getProgramAccess().getStatementStatementParserRuleCall_4_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__LoopConditionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileLoopAccess().getLoopConditionComparaisonParserRuleCall_2_0()); }
		ruleComparaison
		{ after(grammarAccess.getWhileLoopAccess().getLoopConditionComparaisonParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__StatementAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileLoopAccess().getStatementStatementParserRuleCall_5_0()); }
		ruleStatement
		{ after(grammarAccess.getWhileLoopAccess().getStatementStatementParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__LoopConditionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForLoopAccess().getLoopConditionComparaisonParserRuleCall_2_0()); }
		ruleComparaison
		{ after(grammarAccess.getForLoopAccess().getLoopConditionComparaisonParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__StatementAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForLoopAccess().getStatementStatementParserRuleCall_5_0()); }
		ruleStatement
		{ after(grammarAccess.getForLoopAccess().getStatementStatementParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubstarctionAccess().getLeftExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getSubstarctionAccess().getLeftExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubstarctionAccess().getRightExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getSubstarctionAccess().getRightExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGTAccess().getLeftExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getGTAccess().getLeftExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGTAccess().getRightExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getGTAccess().getRightExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLTAccess().getLeftExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getLTAccess().getLeftExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLTAccess().getRightExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getLTAccess().getRightExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignementAccess().getLeftExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getAssignementAccess().getLeftExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__RightAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignementAccess().getRightExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getAssignementAccess().getRightExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__IsConstAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeIntegerAccess().getIsConstIsConstKeyword_1_0()); }
		(
			{ before(grammarAccess.getLeIntegerAccess().getIsConstIsConstKeyword_1_0()); }
			'isConst'
			{ after(grammarAccess.getLeIntegerAccess().getIsConstIsConstKeyword_1_0()); }
		)
		{ after(grammarAccess.getLeIntegerAccess().getIsConstIsConstKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeIntegerAccess().getNameEStringParserRuleCall_3_0()); }
		ruleEString
		{ after(grammarAccess.getLeIntegerAccess().getNameEStringParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__InitialeValueAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeIntegerAccess().getInitialeValueEIntParserRuleCall_4_1_0()); }
		ruleEInt
		{ after(grammarAccess.getLeIntegerAccess().getInitialeValueEIntParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeStringAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getLeStringAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__InitialeValueAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeStringAccess().getInitialeValueEStringParserRuleCall_4_1_0()); }
		ruleEString
		{ after(grammarAccess.getLeStringAccess().getInitialeValueEStringParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getPrintAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable_Proxy__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariable_ProxyAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getVariable_ProxyAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable_Proxy__VariableAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariable_ProxyAccess().getVariableVariableCrossReference_4_0()); }
		(
			{ before(grammarAccess.getVariable_ProxyAccess().getVariableVariableEStringParserRuleCall_4_0_1()); }
			ruleEString
			{ after(grammarAccess.getVariable_ProxyAccess().getVariableVariableEStringParserRuleCall_4_0_1()); }
		)
		{ after(grammarAccess.getVariable_ProxyAccess().getVariableVariableCrossReference_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
