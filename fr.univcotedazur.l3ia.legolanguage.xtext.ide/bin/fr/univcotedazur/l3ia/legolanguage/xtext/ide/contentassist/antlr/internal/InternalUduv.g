/*
 * generated by Xtext 2.25.0
 */
grammar InternalUduv;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package fr.univcotedazur.l3ia.legolanguage.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.univcotedazur.l3ia.legolanguage.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fr.univcotedazur.l3ia.legolanguage.xtext.services.UduvGrammarAccess;

}
@parser::members {
	private UduvGrammarAccess grammarAccess;

	public void setGrammarAccess(UduvGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getGroup()); }
		(rule__Program__Group__0)
		{ after(grammarAccess.getProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRobotDeclaration
entryRuleRobotDeclaration
:
{ before(grammarAccess.getRobotDeclarationRule()); }
	 ruleRobotDeclaration
{ after(grammarAccess.getRobotDeclarationRule()); } 
	 EOF 
;

// Rule RobotDeclaration
ruleRobotDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRobotDeclarationAccess().getGroup()); }
		(rule__RobotDeclaration__Group__0)
		{ after(grammarAccess.getRobotDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCalcul
entryRuleCalcul
:
{ before(grammarAccess.getCalculRule()); }
	 ruleCalcul
{ after(grammarAccess.getCalculRule()); } 
	 EOF 
;

// Rule Calcul
ruleCalcul 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCalculAccess().getAlternatives()); }
		(rule__Calcul__Alternatives)
		{ after(grammarAccess.getCalculAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinaryOperation
entryRuleBinaryOperation
:
{ before(grammarAccess.getBinaryOperationRule()); }
	 ruleBinaryOperation
{ after(grammarAccess.getBinaryOperationRule()); } 
	 EOF 
;

// Rule BinaryOperation
ruleBinaryOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinaryOperationAccess().getAlternatives()); }
		(rule__BinaryOperation__Alternatives)
		{ after(grammarAccess.getBinaryOperationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparaison
entryRuleComparaison
:
{ before(grammarAccess.getComparaisonRule()); }
	 ruleComparaison
{ after(grammarAccess.getComparaisonRule()); } 
	 EOF 
;

// Rule Comparaison
ruleComparaison 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparaisonAccess().getAlternatives()); }
		(rule__Comparaison__Alternatives)
		{ after(grammarAccess.getComparaisonAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getAlternatives()); }
		(rule__Variable__Alternatives)
		{ after(grammarAccess.getVariableAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSensor
entryRuleSensor
:
{ before(grammarAccess.getSensorRule()); }
	 ruleSensor
{ after(grammarAccess.getSensorRule()); } 
	 EOF 
;

// Rule Sensor
ruleSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSensorAccess().getAlternatives()); }
		(rule__Sensor__Alternatives)
		{ after(grammarAccess.getSensorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRobotStatement
entryRuleRobotStatement
:
{ before(grammarAccess.getRobotStatementRule()); }
	 ruleRobotStatement
{ after(grammarAccess.getRobotStatementRule()); } 
	 EOF 
;

// Rule RobotStatement
ruleRobotStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRobotStatementAccess().getAlternatives()); }
		(rule__RobotStatement__Alternatives)
		{ after(grammarAccess.getRobotStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActuator
entryRuleActuator
:
{ before(grammarAccess.getActuatorRule()); }
	 ruleActuator
{ after(grammarAccess.getActuatorRule()); } 
	 EOF 
;

// Rule Actuator
ruleActuator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActuatorAccess().getAlternatives()); }
		(rule__Actuator__Alternatives)
		{ after(grammarAccess.getActuatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMotor
entryRuleMotor
:
{ before(grammarAccess.getMotorRule()); }
	 ruleMotor
{ after(grammarAccess.getMotorRule()); } 
	 EOF 
;

// Rule Motor
ruleMotor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMotorAccess().getAlternatives()); }
		(rule__Motor__Alternatives)
		{ after(grammarAccess.getMotorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRotativeMotor
entryRuleRotativeMotor
:
{ before(grammarAccess.getRotativeMotorRule()); }
	 ruleRotativeMotor
{ after(grammarAccess.getRotativeMotorRule()); } 
	 EOF 
;

// Rule RotativeMotor
ruleRotativeMotor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRotativeMotorAccess().getAlternatives()); }
		(rule__RotativeMotor__Alternatives)
		{ after(grammarAccess.getRotativeMotorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommentary
entryRuleCommentary
:
{ before(grammarAccess.getCommentaryRule()); }
	 ruleCommentary
{ after(grammarAccess.getCommentaryRule()); } 
	 EOF 
;

// Rule Commentary
ruleCommentary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommentaryAccess().getGroup()); }
		(rule__Commentary__Group__0)
		{ after(grammarAccess.getCommentaryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoop
entryRuleLoop
:
{ before(grammarAccess.getLoopRule()); }
	 ruleLoop
{ after(grammarAccess.getLoopRule()); } 
	 EOF 
;

// Rule Loop
ruleLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoopAccess().getAlternatives()); }
		(rule__Loop__Alternatives)
		{ after(grammarAccess.getLoopAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIf
entryRuleIf
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfAccess().getGroup()); }
		(rule__If__Group__0)
		{ after(grammarAccess.getIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhileLoop
entryRuleWhileLoop
:
{ before(grammarAccess.getWhileLoopRule()); }
	 ruleWhileLoop
{ after(grammarAccess.getWhileLoopRule()); } 
	 EOF 
;

// Rule WhileLoop
ruleWhileLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileLoopAccess().getGroup()); }
		(rule__WhileLoop__Group__0)
		{ after(grammarAccess.getWhileLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForLoop
entryRuleForLoop
:
{ before(grammarAccess.getForLoopRule()); }
	 ruleForLoop
{ after(grammarAccess.getForLoopRule()); } 
	 EOF 
;

// Rule ForLoop
ruleForLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForLoopAccess().getGroup()); }
		(rule__ForLoop__Group__0)
		{ after(grammarAccess.getForLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddition
entryRuleAddition
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditionAccess().getGroup()); }
		(rule__Addition__Group__0)
		{ after(grammarAccess.getAdditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubstarction
entryRuleSubstarction
:
{ before(grammarAccess.getSubstarctionRule()); }
	 ruleSubstarction
{ after(grammarAccess.getSubstarctionRule()); } 
	 EOF 
;

// Rule Substarction
ruleSubstarction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubstarctionAccess().getGroup()); }
		(rule__Substarction__Group__0)
		{ after(grammarAccess.getSubstarctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDivision
entryRuleDivision
:
{ before(grammarAccess.getDivisionRule()); }
	 ruleDivision
{ after(grammarAccess.getDivisionRule()); } 
	 EOF 
;

// Rule Division
ruleDivision 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDivisionAccess().getGroup()); }
		(rule__Division__Group__0)
		{ after(grammarAccess.getDivisionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExponential
entryRuleExponential
:
{ before(grammarAccess.getExponentialRule()); }
	 ruleExponential
{ after(grammarAccess.getExponentialRule()); } 
	 EOF 
;

// Rule Exponential
ruleExponential 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExponentialAccess().getGroup()); }
		(rule__Exponential__Group__0)
		{ after(grammarAccess.getExponentialAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplication
entryRuleMultiplication
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
		(rule__Multiplication__Group__0)
		{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGT
entryRuleGT
:
{ before(grammarAccess.getGTRule()); }
	 ruleGT
{ after(grammarAccess.getGTRule()); } 
	 EOF 
;

// Rule GT
ruleGT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGTAccess().getGroup()); }
		(rule__GT__Group__0)
		{ after(grammarAccess.getGTAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGTEqual
entryRuleGTEqual
:
{ before(grammarAccess.getGTEqualRule()); }
	 ruleGTEqual
{ after(grammarAccess.getGTEqualRule()); } 
	 EOF 
;

// Rule GTEqual
ruleGTEqual 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGTEqualAccess().getGroup()); }
		(rule__GTEqual__Group__0)
		{ after(grammarAccess.getGTEqualAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLT
entryRuleLT
:
{ before(grammarAccess.getLTRule()); }
	 ruleLT
{ after(grammarAccess.getLTRule()); } 
	 EOF 
;

// Rule LT
ruleLT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLTAccess().getGroup()); }
		(rule__LT__Group__0)
		{ after(grammarAccess.getLTAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLTEqual
entryRuleLTEqual
:
{ before(grammarAccess.getLTEqualRule()); }
	 ruleLTEqual
{ after(grammarAccess.getLTEqualRule()); } 
	 EOF 
;

// Rule LTEqual
ruleLTEqual 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLTEqualAccess().getGroup()); }
		(rule__LTEqual__Group__0)
		{ after(grammarAccess.getLTEqualAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEqual
entryRuleEqual
:
{ before(grammarAccess.getEqualRule()); }
	 ruleEqual
{ after(grammarAccess.getEqualRule()); } 
	 EOF 
;

// Rule Equal
ruleEqual 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualAccess().getGroup()); }
		(rule__Equal__Group__0)
		{ after(grammarAccess.getEqualAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignement
entryRuleAssignement
:
{ before(grammarAccess.getAssignementRule()); }
	 ruleAssignement
{ after(grammarAccess.getAssignementRule()); } 
	 EOF 
;

// Rule Assignement
ruleAssignement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignementAccess().getGroup()); }
		(rule__Assignement__Group__0)
		{ after(grammarAccess.getAssignementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeInteger
entryRuleLeInteger
:
{ before(grammarAccess.getLeIntegerRule()); }
	 ruleLeInteger
{ after(grammarAccess.getLeIntegerRule()); } 
	 EOF 
;

// Rule LeInteger
ruleLeInteger 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeIntegerAccess().getGroup()); }
		(rule__LeInteger__Group__0)
		{ after(grammarAccess.getLeIntegerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeString
entryRuleLeString
:
{ before(grammarAccess.getLeStringRule()); }
	 ruleLeString
{ after(grammarAccess.getLeStringRule()); } 
	 EOF 
;

// Rule LeString
ruleLeString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeStringAccess().getGroup()); }
		(rule__LeString__Group__0)
		{ after(grammarAccess.getLeStringAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeBoolean
entryRuleLeBoolean
:
{ before(grammarAccess.getLeBooleanRule()); }
	 ruleLeBoolean
{ after(grammarAccess.getLeBooleanRule()); } 
	 EOF 
;

// Rule LeBoolean
ruleLeBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeBooleanAccess().getGroup()); }
		(rule__LeBoolean__Group__0)
		{ after(grammarAccess.getLeBooleanAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeFloat
entryRuleLeFloat
:
{ before(grammarAccess.getLeFloatRule()); }
	 ruleLeFloat
{ after(grammarAccess.getLeFloatRule()); } 
	 EOF 
;

// Rule LeFloat
ruleLeFloat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeFloatAccess().getGroup()); }
		(rule__LeFloat__Group__0)
		{ after(grammarAccess.getLeFloatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrint
entryRulePrint
:
{ before(grammarAccess.getPrintRule()); }
	 rulePrint
{ after(grammarAccess.getPrintRule()); } 
	 EOF 
;

// Rule Print
rulePrint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintAccess().getGroup()); }
		(rule__Print__Group__0)
		{ after(grammarAccess.getPrintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEBoolean
entryRuleEBoolean
:
{ before(grammarAccess.getEBooleanRule()); }
	 ruleEBoolean
{ after(grammarAccess.getEBooleanRule()); } 
	 EOF 
;

// Rule EBoolean
ruleEBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEBooleanAccess().getAlternatives()); }
		(rule__EBoolean__Alternatives)
		{ after(grammarAccess.getEBooleanAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getGroup()); }
		(rule__EInt__Group__0)
		{ after(grammarAccess.getEIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEFloat
entryRuleEFloat
:
{ before(grammarAccess.getEFloatRule()); }
	 ruleEFloat
{ after(grammarAccess.getEFloatRule()); } 
	 EOF 
;

// Rule EFloat
ruleEFloat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEFloatAccess().getGroup()); }
		(rule__EFloat__Group__0)
		{ after(grammarAccess.getEFloatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWheel
entryRuleWheel
:
{ before(grammarAccess.getWheelRule()); }
	 ruleWheel
{ after(grammarAccess.getWheelRule()); } 
	 EOF 
;

// Rule Wheel
ruleWheel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWheelAccess().getGroup()); }
		(rule__Wheel__Group__0)
		{ after(grammarAccess.getWheelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArm
entryRuleArm
:
{ before(grammarAccess.getArmRule()); }
	 ruleArm
{ after(grammarAccess.getArmRule()); } 
	 EOF 
;

// Rule Arm
ruleArm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArmAccess().getGroup()); }
		(rule__Arm__Group__0)
		{ after(grammarAccess.getArmAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLed
entryRuleLed
:
{ before(grammarAccess.getLedRule()); }
	 ruleLed
{ after(grammarAccess.getLedRule()); } 
	 EOF 
;

// Rule Led
ruleLed 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLedAccess().getGroup()); }
		(rule__Led__Group__0)
		{ after(grammarAccess.getLedAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShootLauncher
entryRuleShootLauncher
:
{ before(grammarAccess.getShootLauncherRule()); }
	 ruleShootLauncher
{ after(grammarAccess.getShootLauncherRule()); } 
	 EOF 
;

// Rule ShootLauncher
ruleShootLauncher 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShootLauncherAccess().getGroup()); }
		(rule__ShootLauncher__Group__0)
		{ after(grammarAccess.getShootLauncherAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColorSensor
entryRuleColorSensor
:
{ before(grammarAccess.getColorSensorRule()); }
	 ruleColorSensor
{ after(grammarAccess.getColorSensorRule()); } 
	 EOF 
;

// Rule ColorSensor
ruleColorSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColorSensorAccess().getGroup()); }
		(rule__ColorSensor__Group__0)
		{ after(grammarAccess.getColorSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLaserSensor
entryRuleLaserSensor
:
{ before(grammarAccess.getLaserSensorRule()); }
	 ruleLaserSensor
{ after(grammarAccess.getLaserSensorRule()); } 
	 EOF 
;

// Rule LaserSensor
ruleLaserSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLaserSensorAccess().getGroup()); }
		(rule__LaserSensor__Group__0)
		{ after(grammarAccess.getLaserSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGPSSensor
entryRuleGPSSensor
:
{ before(grammarAccess.getGPSSensorRule()); }
	 ruleGPSSensor
{ after(grammarAccess.getGPSSensorRule()); } 
	 EOF 
;

// Rule GPSSensor
ruleGPSSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGPSSensorAccess().getGroup()); }
		(rule__GPSSensor__Group__0)
		{ after(grammarAccess.getGPSSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGyroSensor
entryRuleGyroSensor
:
{ before(grammarAccess.getGyroSensorRule()); }
	 ruleGyroSensor
{ after(grammarAccess.getGyroSensorRule()); } 
	 EOF 
;

// Rule GyroSensor
ruleGyroSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGyroSensorAccess().getGroup()); }
		(rule__GyroSensor__Group__0)
		{ after(grammarAccess.getGyroSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTurn
entryRuleTurn
:
{ before(grammarAccess.getTurnRule()); }
	 ruleTurn
{ after(grammarAccess.getTurnRule()); } 
	 EOF 
;

// Rule Turn
ruleTurn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTurnAccess().getGroup()); }
		(rule__Turn__Group__0)
		{ after(grammarAccess.getTurnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGo
entryRuleGo
:
{ before(grammarAccess.getGoRule()); }
	 ruleGo
{ after(grammarAccess.getGoRule()); } 
	 EOF 
;

// Rule Go
ruleGo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGoAccess().getGroup()); }
		(rule__Go__Group__0)
		{ after(grammarAccess.getGoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleChangeAngle
entryRuleChangeAngle
:
{ before(grammarAccess.getChangeAngleRule()); }
	 ruleChangeAngle
{ after(grammarAccess.getChangeAngleRule()); } 
	 EOF 
;

// Rule ChangeAngle
ruleChangeAngle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getChangeAngleAccess().getGroup()); }
		(rule__ChangeAngle__Group__0)
		{ after(grammarAccess.getChangeAngleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleChangeIntensity
entryRuleChangeIntensity
:
{ before(grammarAccess.getChangeIntensityRule()); }
	 ruleChangeIntensity
{ after(grammarAccess.getChangeIntensityRule()); } 
	 EOF 
;

// Rule ChangeIntensity
ruleChangeIntensity 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getChangeIntensityAccess().getGroup()); }
		(rule__ChangeIntensity__Group__0)
		{ after(grammarAccess.getChangeIntensityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShoot
entryRuleShoot
:
{ before(grammarAccess.getShootRule()); }
	 ruleShoot
{ after(grammarAccess.getShootRule()); } 
	 EOF 
;

// Rule Shoot
ruleShoot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShootAccess().getGroup()); }
		(rule__Shoot__Group__0)
		{ after(grammarAccess.getShootAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Direction
ruleDirection
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectionAccess().getAlternatives()); }
		(rule__Direction__Alternatives)
		{ after(grammarAccess.getDirectionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getIfParserRuleCall_0()); }
		ruleIf
		{ after(grammarAccess.getStatementAccess().getIfParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getLoopParserRuleCall_1()); }
		ruleLoop
		{ after(grammarAccess.getStatementAccess().getLoopParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getVariableParserRuleCall_2()); }
		ruleVariable
		{ after(grammarAccess.getStatementAccess().getVariableParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getPrintParserRuleCall_3()); }
		rulePrint
		{ after(grammarAccess.getStatementAccess().getPrintParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getExpressionParserRuleCall_4()); }
		ruleExpression
		{ after(grammarAccess.getStatementAccess().getExpressionParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getCommentaryParserRuleCall_5()); }
		ruleCommentary
		{ after(grammarAccess.getStatementAccess().getCommentaryParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getRobotDeclarationParserRuleCall_6()); }
		ruleRobotDeclaration
		{ after(grammarAccess.getStatementAccess().getRobotDeclarationParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getSensorParserRuleCall_7()); }
		ruleSensor
		{ after(grammarAccess.getStatementAccess().getSensorParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getActuatorParserRuleCall_8()); }
		ruleActuator
		{ after(grammarAccess.getStatementAccess().getActuatorParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getRobotStatementParserRuleCall_9()); }
		ruleRobotStatement
		{ after(grammarAccess.getStatementAccess().getRobotStatementParserRuleCall_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotDeclaration__Alternatives_2_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRobotDeclarationAccess().getActuatorAssignment_2_5_0()); }
		(rule__RobotDeclaration__ActuatorAssignment_2_5_0)
		{ after(grammarAccess.getRobotDeclarationAccess().getActuatorAssignment_2_5_0()); }
	)
	|
	(
		{ before(grammarAccess.getRobotDeclarationAccess().getSensorAssignment_2_5_1()); }
		(rule__RobotDeclaration__SensorAssignment_2_5_1)
		{ after(grammarAccess.getRobotDeclarationAccess().getSensorAssignment_2_5_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getVariableParserRuleCall_0()); }
		ruleVariable
		{ after(grammarAccess.getExpressionAccess().getVariableParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getBinaryOperationParserRuleCall_1()); }
		ruleBinaryOperation
		{ after(grammarAccess.getExpressionAccess().getBinaryOperationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Calcul__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCalculAccess().getSubstarctionParserRuleCall_0()); }
		ruleSubstarction
		{ after(grammarAccess.getCalculAccess().getSubstarctionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCalculAccess().getAdditionParserRuleCall_1()); }
		ruleAddition
		{ after(grammarAccess.getCalculAccess().getAdditionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getCalculAccess().getDivisionParserRuleCall_2()); }
		ruleDivision
		{ after(grammarAccess.getCalculAccess().getDivisionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getCalculAccess().getExponentialParserRuleCall_3()); }
		ruleExponential
		{ after(grammarAccess.getCalculAccess().getExponentialParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getCalculAccess().getMultiplicationParserRuleCall_4()); }
		ruleMultiplication
		{ after(grammarAccess.getCalculAccess().getMultiplicationParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryOperationAccess().getComparaisonParserRuleCall_0()); }
		ruleComparaison
		{ after(grammarAccess.getBinaryOperationAccess().getComparaisonParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryOperationAccess().getCalculParserRuleCall_1()); }
		ruleCalcul
		{ after(grammarAccess.getBinaryOperationAccess().getCalculParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryOperationAccess().getAssignementParserRuleCall_2()); }
		ruleAssignement
		{ after(grammarAccess.getBinaryOperationAccess().getAssignementParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparaison__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparaisonAccess().getGTParserRuleCall_0()); }
		ruleGT
		{ after(grammarAccess.getComparaisonAccess().getGTParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparaisonAccess().getLTParserRuleCall_1()); }
		ruleLT
		{ after(grammarAccess.getComparaisonAccess().getLTParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparaisonAccess().getEqualParserRuleCall_2()); }
		ruleEqual
		{ after(grammarAccess.getComparaisonAccess().getEqualParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparaisonAccess().getGTEqualParserRuleCall_3()); }
		ruleGTEqual
		{ after(grammarAccess.getComparaisonAccess().getGTEqualParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getComparaisonAccess().getLTEqualParserRuleCall_4()); }
		ruleLTEqual
		{ after(grammarAccess.getComparaisonAccess().getLTEqualParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getLeIntegerParserRuleCall_0()); }
		ruleLeInteger
		{ after(grammarAccess.getVariableAccess().getLeIntegerParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getLeStringParserRuleCall_1()); }
		ruleLeString
		{ after(grammarAccess.getVariableAccess().getLeStringParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getLeFloatParserRuleCall_2()); }
		ruleLeFloat
		{ after(grammarAccess.getVariableAccess().getLeFloatParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getLeBooleanParserRuleCall_3()); }
		ruleLeBoolean
		{ after(grammarAccess.getVariableAccess().getLeBooleanParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getColorSensorParserRuleCall_0()); }
		ruleColorSensor
		{ after(grammarAccess.getSensorAccess().getColorSensorParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSensorAccess().getLaserSensorParserRuleCall_1()); }
		ruleLaserSensor
		{ after(grammarAccess.getSensorAccess().getLaserSensorParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getSensorAccess().getGPSSensorParserRuleCall_2()); }
		ruleGPSSensor
		{ after(grammarAccess.getSensorAccess().getGPSSensorParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getSensorAccess().getGyroSensorParserRuleCall_3()); }
		ruleGyroSensor
		{ after(grammarAccess.getSensorAccess().getGyroSensorParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRobotStatementAccess().getGoParserRuleCall_0()); }
		ruleGo
		{ after(grammarAccess.getRobotStatementAccess().getGoParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRobotStatementAccess().getTurnParserRuleCall_1()); }
		ruleTurn
		{ after(grammarAccess.getRobotStatementAccess().getTurnParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getRobotStatementAccess().getChangeAngleParserRuleCall_2()); }
		ruleChangeAngle
		{ after(grammarAccess.getRobotStatementAccess().getChangeAngleParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getRobotStatementAccess().getChangeIntensityParserRuleCall_3()); }
		ruleChangeIntensity
		{ after(grammarAccess.getRobotStatementAccess().getChangeIntensityParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getRobotStatementAccess().getShootParserRuleCall_4()); }
		ruleShoot
		{ after(grammarAccess.getRobotStatementAccess().getShootParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActuatorAccess().getMotorParserRuleCall_0()); }
		ruleMotor
		{ after(grammarAccess.getActuatorAccess().getMotorParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getActuatorAccess().getLedParserRuleCall_1()); }
		ruleLed
		{ after(grammarAccess.getActuatorAccess().getLedParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Motor__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMotorAccess().getRotativeMotorParserRuleCall_0()); }
		ruleRotativeMotor
		{ after(grammarAccess.getMotorAccess().getRotativeMotorParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getMotorAccess().getShootLauncherParserRuleCall_1()); }
		ruleShootLauncher
		{ after(grammarAccess.getMotorAccess().getShootLauncherParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RotativeMotor__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRotativeMotorAccess().getWheelParserRuleCall_0()); }
		ruleWheel
		{ after(grammarAccess.getRotativeMotorAccess().getWheelParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRotativeMotorAccess().getArmParserRuleCall_1()); }
		ruleArm
		{ after(grammarAccess.getRotativeMotorAccess().getArmParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getWhileLoopParserRuleCall_0()); }
		ruleWhileLoop
		{ after(grammarAccess.getLoopAccess().getWhileLoopParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLoopAccess().getForLoopParserRuleCall_1()); }
		ruleForLoop
		{ after(grammarAccess.getLoopAccess().getForLoopParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EBoolean__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEBooleanAccess().getTrueKeyword_0()); }
		'True'
		{ after(grammarAccess.getEBooleanAccess().getTrueKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getEBooleanAccess().getFalseKeyword_1()); }
		'False'
		{ after(grammarAccess.getEBooleanAccess().getFalseKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Direction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectionAccess().getLeftEnumLiteralDeclaration_0()); }
		('left')
		{ after(grammarAccess.getDirectionAccess().getLeftEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getDirectionAccess().getRightEnumLiteralDeclaration_1()); }
		('right')
		{ after(grammarAccess.getDirectionAccess().getRightEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getProgramAction_0()); }
	()
	{ after(grammarAccess.getProgramAccess().getProgramAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getStatementAssignment_1()); }
	(rule__Program__StatementAssignment_1)*
	{ after(grammarAccess.getProgramAccess().getStatementAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RobotDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RobotDeclaration__Group__0__Impl
	rule__RobotDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotDeclarationAccess().getRobotKeyword_0()); }
	'Robot'
	{ after(grammarAccess.getRobotDeclarationAccess().getRobotKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RobotDeclaration__Group__1__Impl
	rule__RobotDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotDeclarationAccess().getNameAssignment_1()); }
	(rule__RobotDeclaration__NameAssignment_1)
	{ after(grammarAccess.getRobotDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RobotDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotDeclarationAccess().getGroup_2()); }
	(rule__RobotDeclaration__Group_2__0)?
	{ after(grammarAccess.getRobotDeclarationAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RobotDeclaration__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RobotDeclaration__Group_2__0__Impl
	rule__RobotDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotDeclaration__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotDeclarationAccess().getLeftCurlyBracketKeyword_2_0()); }
	'{'
	{ after(grammarAccess.getRobotDeclarationAccess().getLeftCurlyBracketKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotDeclaration__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RobotDeclaration__Group_2__1__Impl
	rule__RobotDeclaration__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotDeclaration__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotDeclarationAccess().getLeftKeyword_2_1()); }
	'left'
	{ after(grammarAccess.getRobotDeclarationAccess().getLeftKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotDeclaration__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RobotDeclaration__Group_2__2__Impl
	rule__RobotDeclaration__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotDeclaration__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotDeclarationAccess().getLeftWheelAssignment_2_2()); }
	(rule__RobotDeclaration__LeftWheelAssignment_2_2)
	{ after(grammarAccess.getRobotDeclarationAccess().getLeftWheelAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotDeclaration__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RobotDeclaration__Group_2__3__Impl
	rule__RobotDeclaration__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotDeclaration__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotDeclarationAccess().getRightKeyword_2_3()); }
	'right'
	{ after(grammarAccess.getRobotDeclarationAccess().getRightKeyword_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotDeclaration__Group_2__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RobotDeclaration__Group_2__4__Impl
	rule__RobotDeclaration__Group_2__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotDeclaration__Group_2__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotDeclarationAccess().getRightWheelAssignment_2_4()); }
	(rule__RobotDeclaration__RightWheelAssignment_2_4)
	{ after(grammarAccess.getRobotDeclarationAccess().getRightWheelAssignment_2_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotDeclaration__Group_2__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RobotDeclaration__Group_2__5__Impl
	rule__RobotDeclaration__Group_2__6
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotDeclaration__Group_2__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotDeclarationAccess().getAlternatives_2_5()); }
	(rule__RobotDeclaration__Alternatives_2_5)*
	{ after(grammarAccess.getRobotDeclarationAccess().getAlternatives_2_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotDeclaration__Group_2__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RobotDeclaration__Group_2__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotDeclaration__Group_2__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotDeclarationAccess().getRightCurlyBracketKeyword_2_6()); }
	'}'
	{ after(grammarAccess.getRobotDeclarationAccess().getRightCurlyBracketKeyword_2_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Commentary__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commentary__Group__0__Impl
	rule__Commentary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Commentary__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommentaryAccess().getCommentaryAction_0()); }
	()
	{ after(grammarAccess.getCommentaryAccess().getCommentaryAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commentary__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commentary__Group__1__Impl
	rule__Commentary__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Commentary__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommentaryAccess().getApostropheApostropheApostropheKeyword_1()); }
	'\'\'\''
	{ after(grammarAccess.getCommentaryAccess().getApostropheApostropheApostropheKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commentary__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commentary__Group__2__Impl
	rule__Commentary__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Commentary__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommentaryAccess().getInitialeValueAssignment_2()); }
	(rule__Commentary__InitialeValueAssignment_2)
	{ after(grammarAccess.getCommentaryAccess().getInitialeValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commentary__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commentary__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Commentary__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommentaryAccess().getApostropheApostropheApostropheKeyword_3()); }
	'\'\'\''
	{ after(grammarAccess.getCommentaryAccess().getApostropheApostropheApostropheKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getConditionAssignment_1()); }
	(rule__If__ConditionAssignment_1)
	{ after(grammarAccess.getIfAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__2__Impl
	rule__If__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getIfAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__3__Impl
	rule__If__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getStatementAssignment_3()); }
	(rule__If__StatementAssignment_3)*
	{ after(grammarAccess.getIfAccess().getStatementAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getIfAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__0__Impl
	rule__WhileLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getWhileKeyword_0()); }
	'while'
	{ after(grammarAccess.getWhileLoopAccess().getWhileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__1__Impl
	rule__WhileLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getLoopConditionAssignment_1()); }
	(rule__WhileLoop__LoopConditionAssignment_1)
	{ after(grammarAccess.getWhileLoopAccess().getLoopConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__2__Impl
	rule__WhileLoop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getWhileLoopAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__3__Impl
	rule__WhileLoop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getStatementAssignment_3()); }
	(rule__WhileLoop__StatementAssignment_3)*
	{ after(grammarAccess.getWhileLoopAccess().getStatementAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getWhileLoopAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__0__Impl
	rule__ForLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getForKeyword_0()); }
	'for'
	{ after(grammarAccess.getForLoopAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__1__Impl
	rule__ForLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getLoopConditionAssignment_1()); }
	(rule__ForLoop__LoopConditionAssignment_1)
	{ after(grammarAccess.getForLoopAccess().getLoopConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__2__Impl
	rule__ForLoop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getForLoopAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__3__Impl
	rule__ForLoop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getStatementAssignment_3()); }
	(rule__ForLoop__StatementAssignment_3)*
	{ after(grammarAccess.getForLoopAccess().getStatementAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getForLoopAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getAdditionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__1__Impl
	rule__Addition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getLeftAssignment_1()); }
	(rule__Addition__LeftAssignment_1)
	{ after(grammarAccess.getAdditionAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__2__Impl
	rule__Addition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getPlusSignKeyword_2()); }
	'+'
	{ after(grammarAccess.getAdditionAccess().getPlusSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__3__Impl
	rule__Addition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getRightAssignment_3()); }
	(rule__Addition__RightAssignment_3)
	{ after(grammarAccess.getAdditionAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getAdditionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Substarction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Substarction__Group__0__Impl
	rule__Substarction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstarctionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getSubstarctionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Substarction__Group__1__Impl
	rule__Substarction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstarctionAccess().getLeftAssignment_1()); }
	(rule__Substarction__LeftAssignment_1)
	{ after(grammarAccess.getSubstarctionAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Substarction__Group__2__Impl
	rule__Substarction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstarctionAccess().getHyphenMinusKeyword_2()); }
	'-'
	{ after(grammarAccess.getSubstarctionAccess().getHyphenMinusKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Substarction__Group__3__Impl
	rule__Substarction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstarctionAccess().getRightAssignment_3()); }
	(rule__Substarction__RightAssignment_3)
	{ after(grammarAccess.getSubstarctionAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Substarction__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstarctionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getSubstarctionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Division__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Division__Group__0__Impl
	rule__Division__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivisionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getDivisionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Division__Group__1__Impl
	rule__Division__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivisionAccess().getLeftAssignment_1()); }
	(rule__Division__LeftAssignment_1)
	{ after(grammarAccess.getDivisionAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Division__Group__2__Impl
	rule__Division__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivisionAccess().getSolidusKeyword_2()); }
	'/'
	{ after(grammarAccess.getDivisionAccess().getSolidusKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Division__Group__3__Impl
	rule__Division__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivisionAccess().getRightAssignment_3()); }
	(rule__Division__RightAssignment_3)
	{ after(grammarAccess.getDivisionAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Division__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivisionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getDivisionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exponential__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exponential__Group__0__Impl
	rule__Exponential__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponential__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentialAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getExponentialAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponential__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exponential__Group__1__Impl
	rule__Exponential__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponential__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentialAccess().getLeftAssignment_1()); }
	(rule__Exponential__LeftAssignment_1)
	{ after(grammarAccess.getExponentialAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponential__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exponential__Group__2__Impl
	rule__Exponential__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponential__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentialAccess().getCircumflexAccentKeyword_2()); }
	'^'
	{ after(grammarAccess.getExponentialAccess().getCircumflexAccentKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponential__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exponential__Group__3__Impl
	rule__Exponential__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponential__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentialAccess().getRightAssignment_3()); }
	(rule__Exponential__RightAssignment_3)
	{ after(grammarAccess.getExponentialAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponential__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exponential__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponential__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentialAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getExponentialAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getMultiplicationAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__1__Impl
	rule__Multiplication__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getLeftAssignment_1()); }
	(rule__Multiplication__LeftAssignment_1)
	{ after(grammarAccess.getMultiplicationAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__2__Impl
	rule__Multiplication__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_2()); }
	'*'
	{ after(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__3__Impl
	rule__Multiplication__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_3()); }
	(rule__Multiplication__RightAssignment_3)
	{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getMultiplicationAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GT__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GT__Group__0__Impl
	rule__GT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGTAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getGTAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GT__Group__1__Impl
	rule__GT__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGTAccess().getLeftAssignment_1()); }
	(rule__GT__LeftAssignment_1)
	{ after(grammarAccess.getGTAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GT__Group__2__Impl
	rule__GT__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGTAccess().getGreaterThanSignKeyword_2()); }
	'>'
	{ after(grammarAccess.getGTAccess().getGreaterThanSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GT__Group__3__Impl
	rule__GT__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGTAccess().getRightAssignment_3()); }
	(rule__GT__RightAssignment_3)
	{ after(grammarAccess.getGTAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GT__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGTAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getGTAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GTEqual__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GTEqual__Group__0__Impl
	rule__GTEqual__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GTEqual__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGTEqualAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getGTEqualAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GTEqual__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GTEqual__Group__1__Impl
	rule__GTEqual__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GTEqual__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGTEqualAccess().getLeftAssignment_1()); }
	(rule__GTEqual__LeftAssignment_1)
	{ after(grammarAccess.getGTEqualAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GTEqual__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GTEqual__Group__2__Impl
	rule__GTEqual__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GTEqual__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGTEqualAccess().getGreaterThanSignEqualsSignKeyword_2()); }
	'>='
	{ after(grammarAccess.getGTEqualAccess().getGreaterThanSignEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GTEqual__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GTEqual__Group__3__Impl
	rule__GTEqual__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GTEqual__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGTEqualAccess().getRightAssignment_3()); }
	(rule__GTEqual__RightAssignment_3)
	{ after(grammarAccess.getGTEqualAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GTEqual__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GTEqual__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GTEqual__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGTEqualAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getGTEqualAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LT__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LT__Group__0__Impl
	rule__LT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getLTAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LT__Group__1__Impl
	rule__LT__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTAccess().getLeftAssignment_1()); }
	(rule__LT__LeftAssignment_1)
	{ after(grammarAccess.getLTAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LT__Group__2__Impl
	rule__LT__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTAccess().getLessThanSignKeyword_2()); }
	'<'
	{ after(grammarAccess.getLTAccess().getLessThanSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LT__Group__3__Impl
	rule__LT__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTAccess().getRightAssignment_3()); }
	(rule__LT__RightAssignment_3)
	{ after(grammarAccess.getLTAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LT__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getLTAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LTEqual__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LTEqual__Group__0__Impl
	rule__LTEqual__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LTEqual__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTEqualAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getLTEqualAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LTEqual__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LTEqual__Group__1__Impl
	rule__LTEqual__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LTEqual__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTEqualAccess().getLeftAssignment_1()); }
	(rule__LTEqual__LeftAssignment_1)
	{ after(grammarAccess.getLTEqualAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LTEqual__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LTEqual__Group__2__Impl
	rule__LTEqual__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LTEqual__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTEqualAccess().getLessThanSignEqualsSignKeyword_2()); }
	'<='
	{ after(grammarAccess.getLTEqualAccess().getLessThanSignEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LTEqual__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LTEqual__Group__3__Impl
	rule__LTEqual__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LTEqual__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTEqualAccess().getRightAssignment_3()); }
	(rule__LTEqual__RightAssignment_3)
	{ after(grammarAccess.getLTEqualAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LTEqual__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LTEqual__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LTEqual__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTEqualAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getLTEqualAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equal__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__0__Impl
	rule__Equal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getEqualAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__1__Impl
	rule__Equal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getLeftAssignment_1()); }
	(rule__Equal__LeftAssignment_1)
	{ after(grammarAccess.getEqualAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__2__Impl
	rule__Equal__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getEqualsSignEqualsSignKeyword_2()); }
	'=='
	{ after(grammarAccess.getEqualAccess().getEqualsSignEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__3__Impl
	rule__Equal__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getRightAssignment_3()); }
	(rule__Equal__RightAssignment_3)
	{ after(grammarAccess.getEqualAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getEqualAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignement__Group__0__Impl
	rule__Assignement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignementAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getAssignementAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignement__Group__1__Impl
	rule__Assignement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignementAccess().getLeftAssignment_1()); }
	(rule__Assignement__LeftAssignment_1)
	{ after(grammarAccess.getAssignementAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignement__Group__2__Impl
	rule__Assignement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignementAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getAssignementAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignement__Group__3__Impl
	rule__Assignement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignementAccess().getRightAssignment_3()); }
	(rule__Assignement__RightAssignment_3)
	{ after(grammarAccess.getAssignementAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignementAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getAssignementAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeInteger__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeInteger__Group__0__Impl
	rule__LeInteger__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeIntegerAccess().getLeIntegerAction_0()); }
	()
	{ after(grammarAccess.getLeIntegerAccess().getLeIntegerAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeInteger__Group__1__Impl
	rule__LeInteger__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeIntegerAccess().getGroup_1()); }
	(rule__LeInteger__Group_1__0)?
	{ after(grammarAccess.getLeIntegerAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeInteger__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeIntegerAccess().getInitialeValueAssignment_2()); }
	(rule__LeInteger__InitialeValueAssignment_2)
	{ after(grammarAccess.getLeIntegerAccess().getInitialeValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeInteger__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeInteger__Group_1__0__Impl
	rule__LeInteger__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeIntegerAccess().getIntKeyword_1_0()); }
	'int'
	{ after(grammarAccess.getLeIntegerAccess().getIntKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeInteger__Group_1__1__Impl
	rule__LeInteger__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeIntegerAccess().getNameAssignment_1_1()); }
	(rule__LeInteger__NameAssignment_1_1)
	{ after(grammarAccess.getLeIntegerAccess().getNameAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeInteger__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeIntegerAccess().getEqualsSignKeyword_1_2()); }
	'='
	{ after(grammarAccess.getLeIntegerAccess().getEqualsSignKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeString__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeString__Group__0__Impl
	rule__LeString__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeStringAccess().getLeStringAction_0()); }
	()
	{ after(grammarAccess.getLeStringAccess().getLeStringAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeString__Group__1__Impl
	rule__LeString__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeStringAccess().getGroup_1()); }
	(rule__LeString__Group_1__0)?
	{ after(grammarAccess.getLeStringAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeString__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeStringAccess().getInitialeValueAssignment_2()); }
	(rule__LeString__InitialeValueAssignment_2)
	{ after(grammarAccess.getLeStringAccess().getInitialeValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeString__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeString__Group_1__0__Impl
	rule__LeString__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeStringAccess().getStringKeyword_1_0()); }
	'string'
	{ after(grammarAccess.getLeStringAccess().getStringKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeString__Group_1__1__Impl
	rule__LeString__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeStringAccess().getNameAssignment_1_1()); }
	(rule__LeString__NameAssignment_1_1)
	{ after(grammarAccess.getLeStringAccess().getNameAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeString__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeStringAccess().getEqualsSignKeyword_1_2()); }
	'='
	{ after(grammarAccess.getLeStringAccess().getEqualsSignKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeBoolean__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeBoolean__Group__0__Impl
	rule__LeBoolean__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeBoolean__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeBooleanAccess().getLeBooleanAction_0()); }
	()
	{ after(grammarAccess.getLeBooleanAccess().getLeBooleanAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeBoolean__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeBoolean__Group__1__Impl
	rule__LeBoolean__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeBoolean__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeBooleanAccess().getGroup_1()); }
	(rule__LeBoolean__Group_1__0)?
	{ after(grammarAccess.getLeBooleanAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeBoolean__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeBoolean__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeBoolean__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeBooleanAccess().getInitialeValueAssignment_2()); }
	(rule__LeBoolean__InitialeValueAssignment_2)
	{ after(grammarAccess.getLeBooleanAccess().getInitialeValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeBoolean__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeBoolean__Group_1__0__Impl
	rule__LeBoolean__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeBoolean__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeBooleanAccess().getBooleanKeyword_1_0()); }
	'boolean'
	{ after(grammarAccess.getLeBooleanAccess().getBooleanKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeBoolean__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeBoolean__Group_1__1__Impl
	rule__LeBoolean__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeBoolean__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeBooleanAccess().getNameAssignment_1_1()); }
	(rule__LeBoolean__NameAssignment_1_1)
	{ after(grammarAccess.getLeBooleanAccess().getNameAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeBoolean__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeBoolean__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeBoolean__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeBooleanAccess().getEqualsSignKeyword_1_2()); }
	'='
	{ after(grammarAccess.getLeBooleanAccess().getEqualsSignKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeFloat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeFloat__Group__0__Impl
	rule__LeFloat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeFloat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeFloatAccess().getLeFloatAction_0()); }
	()
	{ after(grammarAccess.getLeFloatAccess().getLeFloatAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeFloat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeFloat__Group__1__Impl
	rule__LeFloat__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeFloat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeFloatAccess().getGroup_1()); }
	(rule__LeFloat__Group_1__0)?
	{ after(grammarAccess.getLeFloatAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeFloat__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeFloat__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeFloat__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeFloatAccess().getInitialeValueAssignment_2()); }
	(rule__LeFloat__InitialeValueAssignment_2)
	{ after(grammarAccess.getLeFloatAccess().getInitialeValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeFloat__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeFloat__Group_1__0__Impl
	rule__LeFloat__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeFloat__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeFloatAccess().getFloatKeyword_1_0()); }
	'float'
	{ after(grammarAccess.getLeFloatAccess().getFloatKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeFloat__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeFloat__Group_1__1__Impl
	rule__LeFloat__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeFloat__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeFloatAccess().getNameAssignment_1_1()); }
	(rule__LeFloat__NameAssignment_1_1)
	{ after(grammarAccess.getLeFloatAccess().getNameAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeFloat__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeFloat__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeFloat__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeFloatAccess().getEqualsSignKeyword_1_2()); }
	'='
	{ after(grammarAccess.getLeFloatAccess().getEqualsSignKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Print__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__0__Impl
	rule__Print__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getPrintAction_0()); }
	()
	{ after(grammarAccess.getPrintAccess().getPrintAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__1__Impl
	rule__Print__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getPrintKeyword_1()); }
	'print'
	{ after(grammarAccess.getPrintAccess().getPrintKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__2__Impl
	rule__Print__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getPrintAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__3__Impl
	rule__Print__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getStatementAssignment_3()); }
	(rule__Print__StatementAssignment_3)*
	{ after(grammarAccess.getPrintAccess().getStatementAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getPrintAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EFloat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group__0__Impl
	rule__EFloat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getEFloatAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group__1__Impl
	rule__EFloat__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getEFloatAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getEFloatAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Wheel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wheel__Group__0__Impl
	rule__Wheel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Wheel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWheelAccess().getWheelAction_0()); }
	()
	{ after(grammarAccess.getWheelAccess().getWheelAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wheel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wheel__Group__1__Impl
	rule__Wheel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Wheel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWheelAccess().getWheelKeyword_1()); }
	'wheel'
	{ after(grammarAccess.getWheelAccess().getWheelKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wheel__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wheel__Group__2__Impl
	rule__Wheel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Wheel__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWheelAccess().getOnKeyword_2()); }
	'on'
	{ after(grammarAccess.getWheelAccess().getOnKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wheel__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wheel__Group__3__Impl
	rule__Wheel__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Wheel__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWheelAccess().getPortIDAssignment_3()); }
	(rule__Wheel__PortIDAssignment_3)
	{ after(grammarAccess.getWheelAccess().getPortIDAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wheel__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wheel__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Wheel__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWheelAccess().getGroup_4()); }
	(rule__Wheel__Group_4__0)?
	{ after(grammarAccess.getWheelAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Wheel__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wheel__Group_4__0__Impl
	rule__Wheel__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Wheel__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWheelAccess().getEqualsSignKeyword_4_0()); }
	'='
	{ after(grammarAccess.getWheelAccess().getEqualsSignKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wheel__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wheel__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Wheel__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWheelAccess().getSpeedAssignment_4_1()); }
	(rule__Wheel__SpeedAssignment_4_1)
	{ after(grammarAccess.getWheelAccess().getSpeedAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Arm__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arm__Group__0__Impl
	rule__Arm__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Arm__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArmAccess().getArmAction_0()); }
	()
	{ after(grammarAccess.getArmAccess().getArmAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arm__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arm__Group__1__Impl
	rule__Arm__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Arm__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArmAccess().getArmKeyword_1()); }
	'arm'
	{ after(grammarAccess.getArmAccess().getArmKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arm__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arm__Group__2__Impl
	rule__Arm__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Arm__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArmAccess().getNameAssignment_2()); }
	(rule__Arm__NameAssignment_2)
	{ after(grammarAccess.getArmAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arm__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arm__Group__3__Impl
	rule__Arm__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Arm__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArmAccess().getOnKeyword_3()); }
	'on'
	{ after(grammarAccess.getArmAccess().getOnKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arm__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arm__Group__4__Impl
	rule__Arm__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Arm__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArmAccess().getPortIDAssignment_4()); }
	(rule__Arm__PortIDAssignment_4)
	{ after(grammarAccess.getArmAccess().getPortIDAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arm__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arm__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Arm__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArmAccess().getGroup_5()); }
	(rule__Arm__Group_5__0)?
	{ after(grammarAccess.getArmAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Arm__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arm__Group_5__0__Impl
	rule__Arm__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Arm__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArmAccess().getEqualsSignKeyword_5_0()); }
	'='
	{ after(grammarAccess.getArmAccess().getEqualsSignKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arm__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arm__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Arm__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArmAccess().getAngleAssignment_5_1()); }
	(rule__Arm__AngleAssignment_5_1)
	{ after(grammarAccess.getArmAccess().getAngleAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Led__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Led__Group__0__Impl
	rule__Led__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Led__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLedAccess().getLedAction_0()); }
	()
	{ after(grammarAccess.getLedAccess().getLedAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Led__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Led__Group__1__Impl
	rule__Led__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Led__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLedAccess().getLedKeyword_1()); }
	'led'
	{ after(grammarAccess.getLedAccess().getLedKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Led__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Led__Group__2__Impl
	rule__Led__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Led__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLedAccess().getNameAssignment_2()); }
	(rule__Led__NameAssignment_2)
	{ after(grammarAccess.getLedAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Led__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Led__Group__3__Impl
	rule__Led__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Led__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLedAccess().getOnKeyword_3()); }
	'on'
	{ after(grammarAccess.getLedAccess().getOnKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Led__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Led__Group__4__Impl
	rule__Led__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Led__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLedAccess().getPortIDAssignment_4()); }
	(rule__Led__PortIDAssignment_4)
	{ after(grammarAccess.getLedAccess().getPortIDAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Led__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Led__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Led__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLedAccess().getGroup_5()); }
	(rule__Led__Group_5__0)?
	{ after(grammarAccess.getLedAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Led__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Led__Group_5__0__Impl
	rule__Led__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Led__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLedAccess().getEqualsSignKeyword_5_0()); }
	'='
	{ after(grammarAccess.getLedAccess().getEqualsSignKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Led__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Led__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Led__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLedAccess().getBrightAssignment_5_1()); }
	(rule__Led__BrightAssignment_5_1)
	{ after(grammarAccess.getLedAccess().getBrightAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShootLauncher__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShootLauncher__Group__0__Impl
	rule__ShootLauncher__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShootLauncher__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShootLauncherAccess().getShootLauncherAction_0()); }
	()
	{ after(grammarAccess.getShootLauncherAccess().getShootLauncherAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShootLauncher__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShootLauncher__Group__1__Impl
	rule__ShootLauncher__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShootLauncher__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShootLauncherAccess().getShootLauncherKeyword_1()); }
	'shootLauncher'
	{ after(grammarAccess.getShootLauncherAccess().getShootLauncherKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShootLauncher__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShootLauncher__Group__2__Impl
	rule__ShootLauncher__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ShootLauncher__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShootLauncherAccess().getNameAssignment_2()); }
	(rule__ShootLauncher__NameAssignment_2)
	{ after(grammarAccess.getShootLauncherAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShootLauncher__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShootLauncher__Group__3__Impl
	rule__ShootLauncher__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ShootLauncher__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShootLauncherAccess().getOnKeyword_3()); }
	'on'
	{ after(grammarAccess.getShootLauncherAccess().getOnKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShootLauncher__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShootLauncher__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShootLauncher__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShootLauncherAccess().getPortIDAssignment_4()); }
	(rule__ShootLauncher__PortIDAssignment_4)
	{ after(grammarAccess.getShootLauncherAccess().getPortIDAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ColorSensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorSensor__Group__0__Impl
	rule__ColorSensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorSensorAccess().getColorSensorAction_0()); }
	()
	{ after(grammarAccess.getColorSensorAccess().getColorSensorAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorSensor__Group__1__Impl
	rule__ColorSensor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorSensorAccess().getColorSensorKeyword_1()); }
	'colorSensor'
	{ after(grammarAccess.getColorSensorAccess().getColorSensorKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorSensor__Group__2__Impl
	rule__ColorSensor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorSensorAccess().getNameAssignment_2()); }
	(rule__ColorSensor__NameAssignment_2)
	{ after(grammarAccess.getColorSensorAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorSensor__Group__3__Impl
	rule__ColorSensor__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorSensorAccess().getOnKeyword_3()); }
	'on'
	{ after(grammarAccess.getColorSensorAccess().getOnKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorSensor__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorSensorAccess().getPortIDAssignment_4()); }
	(rule__ColorSensor__PortIDAssignment_4)
	{ after(grammarAccess.getColorSensorAccess().getPortIDAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LaserSensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LaserSensor__Group__0__Impl
	rule__LaserSensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LaserSensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLaserSensorAccess().getLaserSensorAction_0()); }
	()
	{ after(grammarAccess.getLaserSensorAccess().getLaserSensorAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LaserSensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LaserSensor__Group__1__Impl
	rule__LaserSensor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LaserSensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLaserSensorAccess().getLaserSensorKeyword_1()); }
	'laserSensor'
	{ after(grammarAccess.getLaserSensorAccess().getLaserSensorKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LaserSensor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LaserSensor__Group__2__Impl
	rule__LaserSensor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LaserSensor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLaserSensorAccess().getNameAssignment_2()); }
	(rule__LaserSensor__NameAssignment_2)
	{ after(grammarAccess.getLaserSensorAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LaserSensor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LaserSensor__Group__3__Impl
	rule__LaserSensor__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LaserSensor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLaserSensorAccess().getOnKeyword_3()); }
	'on'
	{ after(grammarAccess.getLaserSensorAccess().getOnKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LaserSensor__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LaserSensor__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LaserSensor__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLaserSensorAccess().getPortIDAssignment_4()); }
	(rule__LaserSensor__PortIDAssignment_4)
	{ after(grammarAccess.getLaserSensorAccess().getPortIDAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GPSSensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GPSSensor__Group__0__Impl
	rule__GPSSensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GPSSensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGPSSensorAccess().getGPSSensorAction_0()); }
	()
	{ after(grammarAccess.getGPSSensorAccess().getGPSSensorAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GPSSensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GPSSensor__Group__1__Impl
	rule__GPSSensor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GPSSensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGPSSensorAccess().getLaserSensorKeyword_1()); }
	'laserSensor'
	{ after(grammarAccess.getGPSSensorAccess().getLaserSensorKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GPSSensor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GPSSensor__Group__2__Impl
	rule__GPSSensor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GPSSensor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGPSSensorAccess().getNameAssignment_2()); }
	(rule__GPSSensor__NameAssignment_2)
	{ after(grammarAccess.getGPSSensorAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GPSSensor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GPSSensor__Group__3__Impl
	rule__GPSSensor__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GPSSensor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGPSSensorAccess().getOnKeyword_3()); }
	'on'
	{ after(grammarAccess.getGPSSensorAccess().getOnKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GPSSensor__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GPSSensor__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GPSSensor__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGPSSensorAccess().getPortIDAssignment_4()); }
	(rule__GPSSensor__PortIDAssignment_4)
	{ after(grammarAccess.getGPSSensorAccess().getPortIDAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GyroSensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GyroSensor__Group__0__Impl
	rule__GyroSensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GyroSensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGyroSensorAccess().getGyroSensorAction_0()); }
	()
	{ after(grammarAccess.getGyroSensorAccess().getGyroSensorAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GyroSensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GyroSensor__Group__1__Impl
	rule__GyroSensor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GyroSensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGyroSensorAccess().getLaserSensorKeyword_1()); }
	'laserSensor'
	{ after(grammarAccess.getGyroSensorAccess().getLaserSensorKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GyroSensor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GyroSensor__Group__2__Impl
	rule__GyroSensor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GyroSensor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGyroSensorAccess().getNameAssignment_2()); }
	(rule__GyroSensor__NameAssignment_2)
	{ after(grammarAccess.getGyroSensorAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GyroSensor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GyroSensor__Group__3__Impl
	rule__GyroSensor__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GyroSensor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGyroSensorAccess().getOnKeyword_3()); }
	'on'
	{ after(grammarAccess.getGyroSensorAccess().getOnKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GyroSensor__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GyroSensor__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GyroSensor__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGyroSensorAccess().getPortIDAssignment_4()); }
	(rule__GyroSensor__PortIDAssignment_4)
	{ after(grammarAccess.getGyroSensorAccess().getPortIDAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Turn__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turn__Group__0__Impl
	rule__Turn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnAccess().getRobotAssignment_0()); }
	(rule__Turn__RobotAssignment_0)
	{ after(grammarAccess.getTurnAccess().getRobotAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turn__Group__1__Impl
	rule__Turn__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnAccess().getTurnKeyword_1()); }
	'turn'
	{ after(grammarAccess.getTurnAccess().getTurnKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turn__Group__2__Impl
	rule__Turn__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getTurnAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turn__Group__3__Impl
	rule__Turn__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnAccess().getDirectionAssignment_3()); }
	(rule__Turn__DirectionAssignment_3)
	{ after(grammarAccess.getTurnAccess().getDirectionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turn__Group__4__Impl
	rule__Turn__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnAccess().getCommaKeyword_4()); }
	','
	{ after(grammarAccess.getTurnAccess().getCommaKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turn__Group__5__Impl
	rule__Turn__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnAccess().getAngleAssignment_5()); }
	(rule__Turn__AngleAssignment_5)
	{ after(grammarAccess.getTurnAccess().getAngleAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turn__Group__6__Impl
	rule__Turn__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnAccess().getCommaKeyword_6()); }
	','
	{ after(grammarAccess.getTurnAccess().getCommaKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turn__Group__7__Impl
	rule__Turn__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnAccess().getSpeedAssignment_7()); }
	(rule__Turn__SpeedAssignment_7)
	{ after(grammarAccess.getTurnAccess().getSpeedAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turn__Group__8__Impl
	rule__Turn__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnAccess().getCommaKeyword_8()); }
	','
	{ after(grammarAccess.getTurnAccess().getCommaKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turn__Group__9__Impl
	rule__Turn__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnAccess().getDurationAssignment_9()); }
	(rule__Turn__DurationAssignment_9)
	{ after(grammarAccess.getTurnAccess().getDurationAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turn__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnAccess().getRightParenthesisKeyword_10()); }
	')'
	{ after(grammarAccess.getTurnAccess().getRightParenthesisKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Go__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Go__Group__0__Impl
	rule__Go__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Go__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoAccess().getRobotAssignment_0()); }
	(rule__Go__RobotAssignment_0)
	{ after(grammarAccess.getGoAccess().getRobotAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Go__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Go__Group__1__Impl
	rule__Go__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Go__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoAccess().getGoKeyword_1()); }
	'go'
	{ after(grammarAccess.getGoAccess().getGoKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Go__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Go__Group__2__Impl
	rule__Go__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Go__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getGoAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Go__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Go__Group__3__Impl
	rule__Go__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Go__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoAccess().getSpeedAssignment_3()); }
	(rule__Go__SpeedAssignment_3)
	{ after(grammarAccess.getGoAccess().getSpeedAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Go__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Go__Group__4__Impl
	rule__Go__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Go__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoAccess().getGroup_4()); }
	(rule__Go__Group_4__0)?
	{ after(grammarAccess.getGoAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Go__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Go__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Go__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getGoAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Go__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Go__Group_4__0__Impl
	rule__Go__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Go__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getGoAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Go__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Go__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Go__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoAccess().getDurationAssignment_4_1()); }
	(rule__Go__DurationAssignment_4_1)
	{ after(grammarAccess.getGoAccess().getDurationAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ChangeAngle__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChangeAngle__Group__0__Impl
	rule__ChangeAngle__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeAngle__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChangeAngleAccess().getRobotAssignment_0()); }
	(rule__ChangeAngle__RobotAssignment_0)
	{ after(grammarAccess.getChangeAngleAccess().getRobotAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeAngle__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChangeAngle__Group__1__Impl
	rule__ChangeAngle__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeAngle__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChangeAngleAccess().getChangeAngleKeyword_1()); }
	'changeAngle'
	{ after(grammarAccess.getChangeAngleAccess().getChangeAngleKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeAngle__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChangeAngle__Group__2__Impl
	rule__ChangeAngle__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeAngle__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChangeAngleAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getChangeAngleAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeAngle__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChangeAngle__Group__3__Impl
	rule__ChangeAngle__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeAngle__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChangeAngleAccess().getAngleAssignment_3()); }
	(rule__ChangeAngle__AngleAssignment_3)
	{ after(grammarAccess.getChangeAngleAccess().getAngleAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeAngle__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChangeAngle__Group__4__Impl
	rule__ChangeAngle__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeAngle__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChangeAngleAccess().getGroup_4()); }
	(rule__ChangeAngle__Group_4__0)?
	{ after(grammarAccess.getChangeAngleAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeAngle__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChangeAngle__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeAngle__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChangeAngleAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getChangeAngleAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ChangeAngle__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChangeAngle__Group_4__0__Impl
	rule__ChangeAngle__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeAngle__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChangeAngleAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getChangeAngleAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeAngle__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChangeAngle__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeAngle__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChangeAngleAccess().getSpeedAssignment_4_1()); }
	(rule__ChangeAngle__SpeedAssignment_4_1)
	{ after(grammarAccess.getChangeAngleAccess().getSpeedAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ChangeIntensity__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChangeIntensity__Group__0__Impl
	rule__ChangeIntensity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeIntensity__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChangeIntensityAccess().getRobotAssignment_0()); }
	(rule__ChangeIntensity__RobotAssignment_0)
	{ after(grammarAccess.getChangeIntensityAccess().getRobotAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeIntensity__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChangeIntensity__Group__1__Impl
	rule__ChangeIntensity__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeIntensity__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChangeIntensityAccess().getChangeIntensityKeyword_1()); }
	'ChangeIntensity'
	{ after(grammarAccess.getChangeIntensityAccess().getChangeIntensityKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeIntensity__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChangeIntensity__Group__2__Impl
	rule__ChangeIntensity__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeIntensity__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChangeIntensityAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getChangeIntensityAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeIntensity__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChangeIntensity__Group__3__Impl
	rule__ChangeIntensity__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeIntensity__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChangeIntensityAccess().getIntensityAssignment_3()); }
	(rule__ChangeIntensity__IntensityAssignment_3)
	{ after(grammarAccess.getChangeIntensityAccess().getIntensityAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeIntensity__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChangeIntensity__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeIntensity__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChangeIntensityAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getChangeIntensityAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Shoot__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shoot__Group__0__Impl
	rule__Shoot__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Shoot__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShootAccess().getRobotAssignment_0()); }
	(rule__Shoot__RobotAssignment_0)
	{ after(grammarAccess.getShootAccess().getRobotAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shoot__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shoot__Group__1__Impl
	rule__Shoot__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Shoot__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShootAccess().getShootKeyword_1()); }
	'shoot'
	{ after(grammarAccess.getShootAccess().getShootKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shoot__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shoot__Group__2__Impl
	rule__Shoot__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Shoot__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShootAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getShootAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shoot__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shoot__Group__3__Impl
	rule__Shoot__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Shoot__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShootAccess().getForceAssignment_3()); }
	(rule__Shoot__ForceAssignment_3)
	{ after(grammarAccess.getShootAccess().getForceAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shoot__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shoot__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Shoot__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShootAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getShootAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__StatementAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getStatementStatementParserRuleCall_1_0()); }
		ruleStatement
		{ after(grammarAccess.getProgramAccess().getStatementStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRobotDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getRobotDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotDeclaration__LeftWheelAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRobotDeclarationAccess().getLeftWheelWheelParserRuleCall_2_2_0()); }
		ruleWheel
		{ after(grammarAccess.getRobotDeclarationAccess().getLeftWheelWheelParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotDeclaration__RightWheelAssignment_2_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRobotDeclarationAccess().getRightWheelWheelParserRuleCall_2_4_0()); }
		ruleWheel
		{ after(grammarAccess.getRobotDeclarationAccess().getRightWheelWheelParserRuleCall_2_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotDeclaration__ActuatorAssignment_2_5_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRobotDeclarationAccess().getActuatorActuatorParserRuleCall_2_5_0_0()); }
		ruleActuator
		{ after(grammarAccess.getRobotDeclarationAccess().getActuatorActuatorParserRuleCall_2_5_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RobotDeclaration__SensorAssignment_2_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRobotDeclarationAccess().getSensorSensorParserRuleCall_2_5_1_0()); }
		ruleSensor
		{ after(grammarAccess.getRobotDeclarationAccess().getSensorSensorParserRuleCall_2_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commentary__InitialeValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommentaryAccess().getInitialeValueEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getCommentaryAccess().getInitialeValueEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getConditionComparaisonParserRuleCall_1_0()); }
		ruleComparaison
		{ after(grammarAccess.getIfAccess().getConditionComparaisonParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__StatementAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getStatementStatementParserRuleCall_3_0()); }
		ruleStatement
		{ after(grammarAccess.getIfAccess().getStatementStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__LoopConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileLoopAccess().getLoopConditionComparaisonParserRuleCall_1_0()); }
		ruleComparaison
		{ after(grammarAccess.getWhileLoopAccess().getLoopConditionComparaisonParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__StatementAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileLoopAccess().getStatementStatementParserRuleCall_3_0()); }
		ruleStatement
		{ after(grammarAccess.getWhileLoopAccess().getStatementStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__LoopConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForLoopAccess().getLoopConditionComparaisonParserRuleCall_1_0()); }
		ruleComparaison
		{ after(grammarAccess.getForLoopAccess().getLoopConditionComparaisonParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__StatementAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForLoopAccess().getStatementStatementParserRuleCall_3_0()); }
		ruleStatement
		{ after(grammarAccess.getForLoopAccess().getStatementStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getLeftExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getAdditionAccess().getLeftExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getRightExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getAdditionAccess().getRightExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubstarctionAccess().getLeftExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getSubstarctionAccess().getLeftExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Substarction__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubstarctionAccess().getRightExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getSubstarctionAccess().getRightExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDivisionAccess().getLeftExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getDivisionAccess().getLeftExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDivisionAccess().getRightExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getDivisionAccess().getRightExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponential__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExponentialAccess().getLeftExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getExponentialAccess().getLeftExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponential__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExponentialAccess().getRightExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getExponentialAccess().getRightExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getLeftExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getMultiplicationAccess().getLeftExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getRightExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getMultiplicationAccess().getRightExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGTAccess().getLeftExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getGTAccess().getLeftExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GT__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGTAccess().getRightExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getGTAccess().getRightExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GTEqual__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGTEqualAccess().getLeftExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getGTEqualAccess().getLeftExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GTEqual__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGTEqualAccess().getRightExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getGTEqualAccess().getRightExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLTAccess().getLeftExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getLTAccess().getLeftExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LT__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLTAccess().getRightExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getLTAccess().getRightExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LTEqual__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLTEqualAccess().getLeftExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getLTEqualAccess().getLeftExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LTEqual__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLTEqualAccess().getRightExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getLTEqualAccess().getRightExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualAccess().getLeftExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getEqualAccess().getLeftExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualAccess().getRightExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getEqualAccess().getRightExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignementAccess().getLeftExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getAssignementAccess().getLeftExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignement__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignementAccess().getRightExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getAssignementAccess().getRightExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__NameAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeIntegerAccess().getNameEStringParserRuleCall_1_1_0()); }
		ruleEString
		{ after(grammarAccess.getLeIntegerAccess().getNameEStringParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeInteger__InitialeValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeIntegerAccess().getInitialeValueEIntParserRuleCall_2_0()); }
		ruleEInt
		{ after(grammarAccess.getLeIntegerAccess().getInitialeValueEIntParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__NameAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeStringAccess().getNameEStringParserRuleCall_1_1_0()); }
		ruleEString
		{ after(grammarAccess.getLeStringAccess().getNameEStringParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeString__InitialeValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeStringAccess().getInitialeValueEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getLeStringAccess().getInitialeValueEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeBoolean__NameAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeBooleanAccess().getNameEStringParserRuleCall_1_1_0()); }
		ruleEString
		{ after(grammarAccess.getLeBooleanAccess().getNameEStringParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeBoolean__InitialeValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeBooleanAccess().getInitialeValueEBooleanParserRuleCall_2_0()); }
		ruleEBoolean
		{ after(grammarAccess.getLeBooleanAccess().getInitialeValueEBooleanParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeFloat__NameAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeFloatAccess().getNameEStringParserRuleCall_1_1_0()); }
		ruleEString
		{ after(grammarAccess.getLeFloatAccess().getNameEStringParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeFloat__InitialeValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeFloatAccess().getInitialeValueEFloatParserRuleCall_2_0()); }
		ruleEFloat
		{ after(grammarAccess.getLeFloatAccess().getInitialeValueEFloatParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__StatementAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintAccess().getStatementStatementParserRuleCall_3_0()); }
		ruleStatement
		{ after(grammarAccess.getPrintAccess().getStatementStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wheel__PortIDAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWheelAccess().getPortIDEStringParserRuleCall_3_0()); }
		ruleEString
		{ after(grammarAccess.getWheelAccess().getPortIDEStringParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wheel__SpeedAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWheelAccess().getSpeedEIntParserRuleCall_4_1_0()); }
		ruleEInt
		{ after(grammarAccess.getWheelAccess().getSpeedEIntParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arm__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArmAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getArmAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arm__PortIDAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArmAccess().getPortIDEStringParserRuleCall_4_0()); }
		ruleEString
		{ after(grammarAccess.getArmAccess().getPortIDEStringParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arm__AngleAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArmAccess().getAngleEIntParserRuleCall_5_1_0()); }
		ruleEInt
		{ after(grammarAccess.getArmAccess().getAngleEIntParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Led__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLedAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getLedAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Led__PortIDAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLedAccess().getPortIDEStringParserRuleCall_4_0()); }
		ruleEString
		{ after(grammarAccess.getLedAccess().getPortIDEStringParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Led__BrightAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLedAccess().getBrightEIntParserRuleCall_5_1_0()); }
		ruleEInt
		{ after(grammarAccess.getLedAccess().getBrightEIntParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShootLauncher__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShootLauncherAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getShootLauncherAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShootLauncher__PortIDAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShootLauncherAccess().getPortIDEStringParserRuleCall_4_0()); }
		ruleEString
		{ after(grammarAccess.getShootLauncherAccess().getPortIDEStringParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColorSensorAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getColorSensorAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__PortIDAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColorSensorAccess().getPortIDEStringParserRuleCall_4_0()); }
		ruleEString
		{ after(grammarAccess.getColorSensorAccess().getPortIDEStringParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LaserSensor__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLaserSensorAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getLaserSensorAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LaserSensor__PortIDAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLaserSensorAccess().getPortIDEStringParserRuleCall_4_0()); }
		ruleEString
		{ after(grammarAccess.getLaserSensorAccess().getPortIDEStringParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GPSSensor__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGPSSensorAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getGPSSensorAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GPSSensor__PortIDAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGPSSensorAccess().getPortIDEStringParserRuleCall_4_0()); }
		ruleEString
		{ after(grammarAccess.getGPSSensorAccess().getPortIDEStringParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GyroSensor__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGyroSensorAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getGyroSensorAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GyroSensor__PortIDAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGyroSensorAccess().getPortIDEStringParserRuleCall_4_0()); }
		ruleEString
		{ after(grammarAccess.getGyroSensorAccess().getPortIDEStringParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__RobotAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTurnAccess().getRobotRobotCrossReference_0_0()); }
		(
			{ before(grammarAccess.getTurnAccess().getRobotRobotIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTurnAccess().getRobotRobotIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getTurnAccess().getRobotRobotCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__DirectionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTurnAccess().getDirectionDirectionEnumRuleCall_3_0()); }
		ruleDirection
		{ after(grammarAccess.getTurnAccess().getDirectionDirectionEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__AngleAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTurnAccess().getAngleExpressionParserRuleCall_5_0()); }
		ruleExpression
		{ after(grammarAccess.getTurnAccess().getAngleExpressionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__SpeedAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTurnAccess().getSpeedExpressionParserRuleCall_7_0()); }
		ruleExpression
		{ after(grammarAccess.getTurnAccess().getSpeedExpressionParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__DurationAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTurnAccess().getDurationExpressionParserRuleCall_9_0()); }
		ruleExpression
		{ after(grammarAccess.getTurnAccess().getDurationExpressionParserRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Go__RobotAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGoAccess().getRobotRobotCrossReference_0_0()); }
		(
			{ before(grammarAccess.getGoAccess().getRobotRobotIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getGoAccess().getRobotRobotIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getGoAccess().getRobotRobotCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Go__SpeedAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGoAccess().getSpeedExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getGoAccess().getSpeedExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Go__DurationAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGoAccess().getDurationExpressionParserRuleCall_4_1_0()); }
		ruleExpression
		{ after(grammarAccess.getGoAccess().getDurationExpressionParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeAngle__RobotAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChangeAngleAccess().getRobotRobotCrossReference_0_0()); }
		(
			{ before(grammarAccess.getChangeAngleAccess().getRobotRobotIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getChangeAngleAccess().getRobotRobotIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getChangeAngleAccess().getRobotRobotCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeAngle__AngleAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChangeAngleAccess().getAngleExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getChangeAngleAccess().getAngleExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeAngle__SpeedAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChangeAngleAccess().getSpeedExpressionParserRuleCall_4_1_0()); }
		ruleExpression
		{ after(grammarAccess.getChangeAngleAccess().getSpeedExpressionParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeIntensity__RobotAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChangeIntensityAccess().getRobotRobotCrossReference_0_0()); }
		(
			{ before(grammarAccess.getChangeIntensityAccess().getRobotRobotIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getChangeIntensityAccess().getRobotRobotIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getChangeIntensityAccess().getRobotRobotCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeIntensity__IntensityAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChangeIntensityAccess().getIntensityExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getChangeIntensityAccess().getIntensityExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shoot__RobotAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShootAccess().getRobotRobotCrossReference_0_0()); }
		(
			{ before(grammarAccess.getShootAccess().getRobotRobotIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getShootAccess().getRobotRobotIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getShootAccess().getRobotRobotCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shoot__ForceAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShootAccess().getForceExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getShootAccess().getForceExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
