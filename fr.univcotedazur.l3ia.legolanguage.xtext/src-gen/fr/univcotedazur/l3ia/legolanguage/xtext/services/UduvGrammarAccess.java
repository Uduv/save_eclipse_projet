/*
 * generated by Xtext 2.25.0
 */
package fr.univcotedazur.l3ia.legolanguage.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UduvGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		
		//Program returns Program:
		//    {Program}
		//        (statement+=Statement)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Program}
		//    (statement+=Statement)*
		public Group getGroup() { return cGroup; }
		
		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }
		
		//(statement+=Statement)*
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLoopParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPrintParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCommentaryParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRobotDeclarationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSensorParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cActuatorParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cRobotStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Statement returns Statement:
		//    If | Loop  | Variable | Print | Expression | Commentary | RobotDeclaration | Sensor | Actuator | RobotStatement ;
		@Override public ParserRule getRule() { return rule; }
		
		//If | Loop  | Variable | Print | Expression | Commentary | RobotDeclaration | Sensor | Actuator | RobotStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//If
		public RuleCall getIfParserRuleCall_0() { return cIfParserRuleCall_0; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_1() { return cLoopParserRuleCall_1; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_2() { return cVariableParserRuleCall_2; }
		
		//Print
		public RuleCall getPrintParserRuleCall_3() { return cPrintParserRuleCall_3; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_4() { return cExpressionParserRuleCall_4; }
		
		//Commentary
		public RuleCall getCommentaryParserRuleCall_5() { return cCommentaryParserRuleCall_5; }
		
		//RobotDeclaration
		public RuleCall getRobotDeclarationParserRuleCall_6() { return cRobotDeclarationParserRuleCall_6; }
		
		//Sensor
		public RuleCall getSensorParserRuleCall_7() { return cSensorParserRuleCall_7; }
		
		//Actuator
		public RuleCall getActuatorParserRuleCall_8() { return cActuatorParserRuleCall_8; }
		
		//RobotStatement
		public RuleCall getRobotStatementParserRuleCall_9() { return cRobotStatementParserRuleCall_9; }
	}
	public class RobotDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.RobotDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRobotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cLeftWheelAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cLeftWheelWheelParserRuleCall_2_2_0 = (RuleCall)cLeftWheelAssignment_2_2.eContents().get(0);
		private final Keyword cRightKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cRightWheelAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cRightWheelWheelParserRuleCall_2_4_0 = (RuleCall)cRightWheelAssignment_2_4.eContents().get(0);
		private final Alternatives cAlternatives_2_5 = (Alternatives)cGroup_2.eContents().get(5);
		private final Assignment cActuatorAssignment_2_5_0 = (Assignment)cAlternatives_2_5.eContents().get(0);
		private final RuleCall cActuatorActuatorParserRuleCall_2_5_0_0 = (RuleCall)cActuatorAssignment_2_5_0.eContents().get(0);
		private final Assignment cSensorAssignment_2_5_1 = (Assignment)cAlternatives_2_5.eContents().get(1);
		private final RuleCall cSensorSensorParserRuleCall_2_5_1_0 = (RuleCall)cSensorAssignment_2_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		
		//RobotDeclaration returns Robot:
		//    'Robot' name=ID
		//        ('{'
		//        "left" leftWheel = Wheel
		//        "right" rightWheel= Wheel
		//        ((actuator+=Actuator) |(sensor+=Sensor))*
		//        '}')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Robot' name=ID
		//    ('{'
		//    "left" leftWheel = Wheel
		//    "right" rightWheel= Wheel
		//    ((actuator+=Actuator) |(sensor+=Sensor))*
		//    '}')?
		public Group getGroup() { return cGroup; }
		
		//'Robot'
		public Keyword getRobotKeyword_0() { return cRobotKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('{'
		//"left" leftWheel = Wheel
		//"right" rightWheel= Wheel
		//((actuator+=Actuator) |(sensor+=Sensor))*
		//'}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//"left"
		public Keyword getLeftKeyword_2_1() { return cLeftKeyword_2_1; }
		
		//leftWheel = Wheel
		public Assignment getLeftWheelAssignment_2_2() { return cLeftWheelAssignment_2_2; }
		
		//Wheel
		public RuleCall getLeftWheelWheelParserRuleCall_2_2_0() { return cLeftWheelWheelParserRuleCall_2_2_0; }
		
		//"right"
		public Keyword getRightKeyword_2_3() { return cRightKeyword_2_3; }
		
		//rightWheel= Wheel
		public Assignment getRightWheelAssignment_2_4() { return cRightWheelAssignment_2_4; }
		
		//Wheel
		public RuleCall getRightWheelWheelParserRuleCall_2_4_0() { return cRightWheelWheelParserRuleCall_2_4_0; }
		
		//((actuator+=Actuator) |(sensor+=Sensor))*
		public Alternatives getAlternatives_2_5() { return cAlternatives_2_5; }
		
		//(actuator+=Actuator)
		public Assignment getActuatorAssignment_2_5_0() { return cActuatorAssignment_2_5_0; }
		
		//Actuator
		public RuleCall getActuatorActuatorParserRuleCall_2_5_0_0() { return cActuatorActuatorParserRuleCall_2_5_0_0; }
		
		//(sensor+=Sensor)
		public Assignment getSensorAssignment_2_5_1() { return cSensorAssignment_2_5_1; }
		
		//Sensor
		public RuleCall getSensorSensorParserRuleCall_2_5_1_0() { return cSensorSensorParserRuleCall_2_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_6() { return cRightCurlyBracketKeyword_2_6; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSensorProxyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActuatorProxyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableProxyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBinaryOperationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Expression returns Expression:
		//     SensorProxy | ActuatorProxy | VariableProxy  | BinaryOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//SensorProxy | ActuatorProxy | VariableProxy  | BinaryOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SensorProxy
		public RuleCall getSensorProxyParserRuleCall_0() { return cSensorProxyParserRuleCall_0; }
		
		//ActuatorProxy
		public RuleCall getActuatorProxyParserRuleCall_1() { return cActuatorProxyParserRuleCall_1; }
		
		//VariableProxy
		public RuleCall getVariableProxyParserRuleCall_2() { return cVariableProxyParserRuleCall_2; }
		
		//BinaryOperation
		public RuleCall getBinaryOperationParserRuleCall_3() { return cBinaryOperationParserRuleCall_3; }
	}
	public class CalculElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Calcul");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubstarctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDivisionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExponentialParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMultiplicationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Calcul returns Calcul :
		//    Substarction | Addition | Division | Exponential | Multiplication ;
		@Override public ParserRule getRule() { return rule; }
		
		//Substarction | Addition | Division | Exponential | Multiplication
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Substarction
		public RuleCall getSubstarctionParserRuleCall_0() { return cSubstarctionParserRuleCall_0; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_1() { return cAdditionParserRuleCall_1; }
		
		//Division
		public RuleCall getDivisionParserRuleCall_2() { return cDivisionParserRuleCall_2; }
		
		//Exponential
		public RuleCall getExponentialParserRuleCall_3() { return cExponentialParserRuleCall_3; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_4() { return cMultiplicationParserRuleCall_4; }
	}
	public class BinaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.BinaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComparaisonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCalculParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssignementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BinaryOperation returns BinaryOperation :
		//Comparaison |  Calcul |  Assignement /*| SensorOperation | ActuatorOperation*/ ;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparaison |  Calcul |  Assignement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Comparaison
		public RuleCall getComparaisonParserRuleCall_0() { return cComparaisonParserRuleCall_0; }
		
		//Calcul
		public RuleCall getCalculParserRuleCall_1() { return cCalculParserRuleCall_1; }
		
		//Assignement
		public RuleCall getAssignementParserRuleCall_2() { return cAssignementParserRuleCall_2; }
	}
	public class ComparaisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Comparaison");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGTParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEqualParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGTEqualParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLTEqualParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Comparaison returns Comparaison:
		//    GT | LT | Equal | GTEqual | LTEqual ;
		@Override public ParserRule getRule() { return rule; }
		
		//GT | LT | Equal | GTEqual | LTEqual
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GT
		public RuleCall getGTParserRuleCall_0() { return cGTParserRuleCall_0; }
		
		//LT
		public RuleCall getLTParserRuleCall_1() { return cLTParserRuleCall_1; }
		
		//Equal
		public RuleCall getEqualParserRuleCall_2() { return cEqualParserRuleCall_2; }
		
		//GTEqual
		public RuleCall getGTEqualParserRuleCall_3() { return cGTEqualParserRuleCall_3; }
		
		//LTEqual
		public RuleCall getLTEqualParserRuleCall_4() { return cLTEqualParserRuleCall_4; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLeIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLeStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLeFloatParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLeBooleanParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Variable returns Variable:
		//    LeInteger | LeString | LeFloat | LeBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//LeInteger | LeString | LeFloat | LeBoolean
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LeInteger
		public RuleCall getLeIntegerParserRuleCall_0() { return cLeIntegerParserRuleCall_0; }
		
		//LeString
		public RuleCall getLeStringParserRuleCall_1() { return cLeStringParserRuleCall_1; }
		
		//LeFloat
		public RuleCall getLeFloatParserRuleCall_2() { return cLeFloatParserRuleCall_2; }
		
		//LeBoolean
		public RuleCall getLeBooleanParserRuleCall_3() { return cLeBooleanParserRuleCall_3; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Sensor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColorSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLaserSensorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGPSSensorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGyroSensorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Sensor returns Sensor :
		//    ColorSensor | LaserSensor | GPSSensor | GyroSensor
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ColorSensor | LaserSensor | GPSSensor | GyroSensor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ColorSensor
		public RuleCall getColorSensorParserRuleCall_0() { return cColorSensorParserRuleCall_0; }
		
		//LaserSensor
		public RuleCall getLaserSensorParserRuleCall_1() { return cLaserSensorParserRuleCall_1; }
		
		//GPSSensor
		public RuleCall getGPSSensorParserRuleCall_2() { return cGPSSensorParserRuleCall_2; }
		
		//GyroSensor
		public RuleCall getGyroSensorParserRuleCall_3() { return cGyroSensorParserRuleCall_3; }
	}
	public class RobotStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.RobotStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTurnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cChangeAngleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cChangeIntensityParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cShootParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//RobotStatement returns RobotStatement :
		//    Go | Turn | ChangeAngle | ChangeIntensity | Shoot
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Go | Turn | ChangeAngle | ChangeIntensity | Shoot
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Go
		public RuleCall getGoParserRuleCall_0() { return cGoParserRuleCall_0; }
		
		//Turn
		public RuleCall getTurnParserRuleCall_1() { return cTurnParserRuleCall_1; }
		
		//ChangeAngle
		public RuleCall getChangeAngleParserRuleCall_2() { return cChangeAngleParserRuleCall_2; }
		
		//ChangeIntensity
		public RuleCall getChangeIntensityParserRuleCall_3() { return cChangeIntensityParserRuleCall_3; }
		
		//Shoot
		public RuleCall getShootParserRuleCall_4() { return cShootParserRuleCall_4; }
	}
	public class ActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Actuator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMotorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Actuator returns Actuator :
		//    Motor | Led
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Motor | Led
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Motor
		public RuleCall getMotorParserRuleCall_0() { return cMotorParserRuleCall_0; }
		
		//Led
		public RuleCall getLedParserRuleCall_1() { return cLedParserRuleCall_1; }
	}
	public class MotorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Motor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRotativeMotorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cShootLauncherParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Motor returns Motor :
		//    RotativeMotor | ShootLauncher
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RotativeMotor | ShootLauncher
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RotativeMotor
		public RuleCall getRotativeMotorParserRuleCall_0() { return cRotativeMotorParserRuleCall_0; }
		
		//ShootLauncher
		public RuleCall getShootLauncherParserRuleCall_1() { return cShootLauncherParserRuleCall_1; }
	}
	public class RotativeMotorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.RotativeMotor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWheelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArmParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RotativeMotor returns RotativeMotor:
		//    Wheel | Arm
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Wheel | Arm
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Wheel
		public RuleCall getWheelParserRuleCall_0() { return cWheelParserRuleCall_0; }
		
		//Arm
		public RuleCall getArmParserRuleCall_1() { return cArmParserRuleCall_1; }
	}
	public class CommentaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Commentary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommentaryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cApostropheApostropheApostropheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitialeValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitialeValueEStringParserRuleCall_2_0 = (RuleCall)cInitialeValueAssignment_2.eContents().get(0);
		private final Keyword cApostropheApostropheApostropheKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Commentary returns Commentary:
		//    {Commentary}
		//    '\'\'\''
		//        initialeValue=EString
		//    '\'\'\'';
		@Override public ParserRule getRule() { return rule; }
		
		//{Commentary}
		//'\'\'\''
		//    initialeValue=EString
		//'\'\'\''
		public Group getGroup() { return cGroup; }
		
		//{Commentary}
		public Action getCommentaryAction_0() { return cCommentaryAction_0; }
		
		//'\'\'\''
		public Keyword getApostropheApostropheApostropheKeyword_1() { return cApostropheApostropheApostropheKeyword_1; }
		
		//initialeValue=EString
		public Assignment getInitialeValueAssignment_2() { return cInitialeValueAssignment_2; }
		
		//EString
		public RuleCall getInitialeValueEStringParserRuleCall_2_0() { return cInitialeValueEStringParserRuleCall_2_0; }
		
		//'\'\'\''
		public Keyword getApostropheApostropheApostropheKeyword_3() { return cApostropheApostropheApostropheKeyword_3; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Loop");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWhileLoopParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForLoopParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Loop returns Loop :
		//    WhileLoop | ForLoop  ;
		@Override public ParserRule getRule() { return rule; }
		
		//WhileLoop | ForLoop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WhileLoop
		public RuleCall getWhileLoopParserRuleCall_0() { return cWhileLoopParserRuleCall_0; }
		
		//ForLoop
		public RuleCall getForLoopParserRuleCall_1() { return cForLoopParserRuleCall_1; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionComparaisonParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//If returns If :
		//    'if'
		//    condition=Comparaison
		//    '{'
		//        (statement+=Statement)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'if'
		//condition=Comparaison
		//'{'
		//    (statement+=Statement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=Comparaison
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Comparaison
		public RuleCall getConditionComparaisonParserRuleCall_1_0() { return cConditionComparaisonParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(statement+=Statement)*
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_0() { return cStatementStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class WhileLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.WhileLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLoopConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLoopConditionComparaisonParserRuleCall_1_0 = (RuleCall)cLoopConditionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WhileLoop returns WhileLoop:
		//    'while'
		//     loopCondition=Comparaison
		//    '{'
		//        (statement+=Statement)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'while'
		// loopCondition=Comparaison
		//'{'
		//    (statement+=Statement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//loopCondition=Comparaison
		public Assignment getLoopConditionAssignment_1() { return cLoopConditionAssignment_1; }
		
		//Comparaison
		public RuleCall getLoopConditionComparaisonParserRuleCall_1_0() { return cLoopConditionComparaisonParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(statement+=Statement)*
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_0() { return cStatementStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ForLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.ForLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLoopConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLoopConditionComparaisonParserRuleCall_1_0 = (RuleCall)cLoopConditionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ForLoop returns ForLoop:
		//    'for'
		//    loopCondition=Comparaison
		//    '{'
		//        (statement+=Statement)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'for'
		//loopCondition=Comparaison
		//'{'
		//    (statement+=Statement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//loopCondition=Comparaison
		public Assignment getLoopConditionAssignment_1() { return cLoopConditionAssignment_1; }
		
		//Comparaison
		public RuleCall getLoopConditionComparaisonParserRuleCall_1_0() { return cLoopConditionComparaisonParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(statement+=Statement)*
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_0() { return cStatementStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Addition returns Addition:
		//    '('
		//        left=Expression
		//        '+'
		//        right=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '+'
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class SubstarctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Substarction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Substarction returns Substarction:
		//    '('
		//        left=Expression
		//        '-'
		//        right=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '-'
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Division");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Division returns Division:
		//    '('
		//        left=Expression
		//        '/'
		//        right=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '/'
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ExponentialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Exponential");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Exponential returns Exponential:
		//    '('
		//        left=Expression
		//        '^'
		//        right=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '^'
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_2() { return cCircumflexAccentKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Multiplication returns Multiplication:
		//    '('
		//        left=Expression
		//        '*'
		//        right=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '*'
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class GTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.GT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GT returns GT:
		//    '('
		//        left=Expression
		//        '>'
		//        right=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '>'
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class GTEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.GTEqual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GTEqual returns GTEqual:
		//    '('
		//        left=Expression
		//        '>='
		//        right=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '>='
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.LT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LT returns LT:
		//    '('
		//        left=Expression
		//        '<'
		//        right=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '<'
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LTEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.LTEqual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LTEqual returns LTEqual:
		//    '('
		//        left=Expression
		//        '<='
		//        right=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '<='
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Equal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Equal returns Equal:
		//    '('
		//        left=Expression
		//        '=='
		//        right=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '=='
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AssignementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Assignement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Assignement returns Assignement:
		//    '('
		//        left=Expression
		//        '='
		//         right=Expression
		//    ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '='
		//     right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LeIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.LeInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLeIntegerAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIntKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cInitialeValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitialeValueEIntParserRuleCall_2_0 = (RuleCall)cInitialeValueAssignment_2.eContents().get(0);
		
		//LeInteger returns LeInteger:
		//    {LeInteger}
		//    ('int' name=EString '=')?
		//        initialeValue=EInt
		//        ;
		@Override public ParserRule getRule() { return rule; }
		
		//{LeInteger}
		//('int' name=EString '=')?
		//    initialeValue=EInt
		public Group getGroup() { return cGroup; }
		
		//{LeInteger}
		public Action getLeIntegerAction_0() { return cLeIntegerAction_0; }
		
		//('int' name=EString '=')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'int'
		public Keyword getIntKeyword_1_0() { return cIntKeyword_1_0; }
		
		//name=EString
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_1_0() { return cNameEStringParserRuleCall_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }
		
		//initialeValue=EInt
		public Assignment getInitialeValueAssignment_2() { return cInitialeValueAssignment_2; }
		
		//EInt
		public RuleCall getInitialeValueEIntParserRuleCall_2_0() { return cInitialeValueEIntParserRuleCall_2_0; }
	}
	public class LeStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.LeString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLeStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cStringKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cInitialeValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitialeValueEStringParserRuleCall_2_0 = (RuleCall)cInitialeValueAssignment_2.eContents().get(0);
		
		//LeString returns LeString:
		//    {LeString}
		//    ('string' name=EString '=')?
		//        initialeValue=EString
		//        ;
		@Override public ParserRule getRule() { return rule; }
		
		//{LeString}
		//('string' name=EString '=')?
		//    initialeValue=EString
		public Group getGroup() { return cGroup; }
		
		//{LeString}
		public Action getLeStringAction_0() { return cLeStringAction_0; }
		
		//('string' name=EString '=')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'string'
		public Keyword getStringKeyword_1_0() { return cStringKeyword_1_0; }
		
		//name=EString
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_1_0() { return cNameEStringParserRuleCall_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }
		
		//initialeValue=EString
		public Assignment getInitialeValueAssignment_2() { return cInitialeValueAssignment_2; }
		
		//EString
		public RuleCall getInitialeValueEStringParserRuleCall_2_0() { return cInitialeValueEStringParserRuleCall_2_0; }
	}
	public class LeBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.LeBoolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLeBooleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cBooleanKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cInitialeValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitialeValueEBooleanParserRuleCall_2_0 = (RuleCall)cInitialeValueAssignment_2.eContents().get(0);
		
		//LeBoolean returns LeBoolean:
		//    {LeBoolean}
		//    ('boolean' name=EString '=')?
		//         initialeValue=EBoolean
		//        ;
		@Override public ParserRule getRule() { return rule; }
		
		//{LeBoolean}
		//('boolean' name=EString '=')?
		//     initialeValue=EBoolean
		public Group getGroup() { return cGroup; }
		
		//{LeBoolean}
		public Action getLeBooleanAction_0() { return cLeBooleanAction_0; }
		
		//('boolean' name=EString '=')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'boolean'
		public Keyword getBooleanKeyword_1_0() { return cBooleanKeyword_1_0; }
		
		//name=EString
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_1_0() { return cNameEStringParserRuleCall_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }
		
		//initialeValue=EBoolean
		public Assignment getInitialeValueAssignment_2() { return cInitialeValueAssignment_2; }
		
		//EBoolean
		public RuleCall getInitialeValueEBooleanParserRuleCall_2_0() { return cInitialeValueEBooleanParserRuleCall_2_0; }
	}
	public class LeFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.LeFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLeFloatAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFloatKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cInitialeValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitialeValueEFloatParserRuleCall_2_0 = (RuleCall)cInitialeValueAssignment_2.eContents().get(0);
		
		//LeFloat returns LeFloat:
		//    {LeFloat}
		//    ('float' name=EString '=')?
		//         initialeValue= EFloat
		//        ;
		@Override public ParserRule getRule() { return rule; }
		
		//{LeFloat}
		//('float' name=EString '=')?
		//     initialeValue= EFloat
		public Group getGroup() { return cGroup; }
		
		//{LeFloat}
		public Action getLeFloatAction_0() { return cLeFloatAction_0; }
		
		//('float' name=EString '=')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'float'
		public Keyword getFloatKeyword_1_0() { return cFloatKeyword_1_0; }
		
		//name=EString
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_1_0() { return cNameEStringParserRuleCall_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }
		
		//initialeValue= EFloat
		public Assignment getInitialeValueAssignment_2() { return cInitialeValueAssignment_2; }
		
		//EFloat
		public RuleCall getInitialeValueEFloatParserRuleCall_2_0() { return cInitialeValueEFloatParserRuleCall_2_0; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Print returns Print:
		//    {Print}
		//    'print' '(' (statement+=Statement)* ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Print}
		//'print' '(' (statement+=Statement)* ')'
		public Group getGroup() { return cGroup; }
		
		//{Print}
		public Action getPrintAction_0() { return cPrintAction_0; }
		
		//'print'
		public Keyword getPrintKeyword_1() { return cPrintKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(statement+=Statement)*
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_0() { return cStatementStatementParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class VariableProxyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.VariableProxy");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_0 = (CrossReference)cVariableAssignment.eContents().get(0);
		private final RuleCall cVariableVariableEStringParserRuleCall_0_1 = (RuleCall)cVariableVariableCrossReference_0.eContents().get(1);
		
		//VariableProxy returns VariableProxy:
		//    variable=[Variable|EString]
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[Variable|EString]
		public Assignment getVariableAssignment() { return cVariableAssignment; }
		
		//[Variable|EString]
		public CrossReference getVariableVariableCrossReference_0() { return cVariableVariableCrossReference_0; }
		
		//EString
		public RuleCall getVariableVariableEStringParserRuleCall_0_1() { return cVariableVariableEStringParserRuleCall_0_1; }
	}
	public class SensorProxyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.SensorProxy");
		private final Assignment cSensorAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSensorSensorCrossReference_0 = (CrossReference)cSensorAssignment.eContents().get(0);
		private final RuleCall cSensorSensorEStringParserRuleCall_0_1 = (RuleCall)cSensorSensorCrossReference_0.eContents().get(1);
		
		//SensorProxy returns SensorProxy:
		//    sensor=[Sensor|EString]
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//sensor=[Sensor|EString]
		public Assignment getSensorAssignment() { return cSensorAssignment; }
		
		//[Sensor|EString]
		public CrossReference getSensorSensorCrossReference_0() { return cSensorSensorCrossReference_0; }
		
		//EString
		public RuleCall getSensorSensorEStringParserRuleCall_0_1() { return cSensorSensorEStringParserRuleCall_0_1; }
	}
	public class ActuatorProxyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.ActuatorProxy");
		private final Assignment cActuatorAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cActuatorActuatorCrossReference_0 = (CrossReference)cActuatorAssignment.eContents().get(0);
		private final RuleCall cActuatorActuatorEStringParserRuleCall_0_1 = (RuleCall)cActuatorActuatorCrossReference_0.eContents().get(1);
		
		//ActuatorProxy returns ActuatorProxy:
		//    actuator=[Actuator|EString]
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//actuator=[Actuator|EString]
		public Assignment getActuatorAssignment() { return cActuatorAssignment; }
		
		//[Actuator|EString]
		public CrossReference getActuatorActuatorCrossReference_0() { return cActuatorActuatorCrossReference_0; }
		
		//EString
		public RuleCall getActuatorActuatorEStringParserRuleCall_0_1() { return cActuatorActuatorEStringParserRuleCall_0_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'True' | 'False';
		@Override public ParserRule getRule() { return rule; }
		
		//'True' | 'False'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'True'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'False'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//EFloat returns ecore::EFloat:
		//    INT '.' INT
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class WheelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Wheel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWheelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWheelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPortIDAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPortIDEStringParserRuleCall_3_0 = (RuleCall)cPortIDAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSpeedAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSpeedEIntParserRuleCall_4_1_0 = (RuleCall)cSpeedAssignment_4_1.eContents().get(0);
		
		//Wheel returns Wheel :
		//    {Wheel}
		//    'wheel'
		//    'on'
		//    portID=EString
		//    ("=" speed=EInt)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Wheel}
		//'wheel'
		//'on'
		//portID=EString
		//("=" speed=EInt)?
		public Group getGroup() { return cGroup; }
		
		//{Wheel}
		public Action getWheelAction_0() { return cWheelAction_0; }
		
		//'wheel'
		public Keyword getWheelKeyword_1() { return cWheelKeyword_1; }
		
		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }
		
		//portID=EString
		public Assignment getPortIDAssignment_3() { return cPortIDAssignment_3; }
		
		//EString
		public RuleCall getPortIDEStringParserRuleCall_3_0() { return cPortIDEStringParserRuleCall_3_0; }
		
		//("=" speed=EInt)?
		public Group getGroup_4() { return cGroup_4; }
		
		//"="
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//speed=EInt
		public Assignment getSpeedAssignment_4_1() { return cSpeedAssignment_4_1; }
		
		//EInt
		public RuleCall getSpeedEIntParserRuleCall_4_1_0() { return cSpeedEIntParserRuleCall_4_1_0; }
	}
	public class ArmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Arm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArmAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cArmKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPortIDAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPortIDEStringParserRuleCall_4_0 = (RuleCall)cPortIDAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAngleAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAngleEIntParserRuleCall_5_1_0 = (RuleCall)cAngleAssignment_5_1.eContents().get(0);
		
		//Arm returns Arm :
		//    {Arm}
		//    'arm'
		//    name=ID
		//    'on'
		//    portID=EString
		//    ("=" angle=EInt)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Arm}
		//'arm'
		//name=ID
		//'on'
		//portID=EString
		//("=" angle=EInt)?
		public Group getGroup() { return cGroup; }
		
		//{Arm}
		public Action getArmAction_0() { return cArmAction_0; }
		
		//'arm'
		public Keyword getArmKeyword_1() { return cArmKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'on'
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
		
		//portID=EString
		public Assignment getPortIDAssignment_4() { return cPortIDAssignment_4; }
		
		//EString
		public RuleCall getPortIDEStringParserRuleCall_4_0() { return cPortIDEStringParserRuleCall_4_0; }
		
		//("=" angle=EInt)?
		public Group getGroup_5() { return cGroup_5; }
		
		//"="
		public Keyword getEqualsSignKeyword_5_0() { return cEqualsSignKeyword_5_0; }
		
		//angle=EInt
		public Assignment getAngleAssignment_5_1() { return cAngleAssignment_5_1; }
		
		//EInt
		public RuleCall getAngleEIntParserRuleCall_5_1_0() { return cAngleEIntParserRuleCall_5_1_0; }
	}
	public class LedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Led");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLedAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPortIDAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPortIDEStringParserRuleCall_4_0 = (RuleCall)cPortIDAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cBrightAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cBrightEIntParserRuleCall_5_1_0 = (RuleCall)cBrightAssignment_5_1.eContents().get(0);
		
		//Led returns Led:
		//    {Led}
		//    'led'
		//    name=ID
		//    'on'
		//    portID=EString
		//    ("=" bright=EInt)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Led}
		//'led'
		//name=ID
		//'on'
		//portID=EString
		//("=" bright=EInt)?
		public Group getGroup() { return cGroup; }
		
		//{Led}
		public Action getLedAction_0() { return cLedAction_0; }
		
		//'led'
		public Keyword getLedKeyword_1() { return cLedKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'on'
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
		
		//portID=EString
		public Assignment getPortIDAssignment_4() { return cPortIDAssignment_4; }
		
		//EString
		public RuleCall getPortIDEStringParserRuleCall_4_0() { return cPortIDEStringParserRuleCall_4_0; }
		
		//("=" bright=EInt)?
		public Group getGroup_5() { return cGroup_5; }
		
		//"="
		public Keyword getEqualsSignKeyword_5_0() { return cEqualsSignKeyword_5_0; }
		
		//bright=EInt
		public Assignment getBrightAssignment_5_1() { return cBrightAssignment_5_1; }
		
		//EInt
		public RuleCall getBrightEIntParserRuleCall_5_1_0() { return cBrightEIntParserRuleCall_5_1_0; }
	}
	public class ShootLauncherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.ShootLauncher");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShootLauncherAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cShootLauncherKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPortIDAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPortIDEStringParserRuleCall_4_0 = (RuleCall)cPortIDAssignment_4.eContents().get(0);
		
		//ShootLauncher returns ShootLauncher :
		//    {ShootLauncher}
		//    'shootLauncher'
		//    name=ID
		//    'on'
		//    portID=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ShootLauncher}
		//'shootLauncher'
		//name=ID
		//'on'
		//portID=EString
		public Group getGroup() { return cGroup; }
		
		//{ShootLauncher}
		public Action getShootLauncherAction_0() { return cShootLauncherAction_0; }
		
		//'shootLauncher'
		public Keyword getShootLauncherKeyword_1() { return cShootLauncherKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'on'
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
		
		//portID=EString
		public Assignment getPortIDAssignment_4() { return cPortIDAssignment_4; }
		
		//EString
		public RuleCall getPortIDEStringParserRuleCall_4_0() { return cPortIDEStringParserRuleCall_4_0; }
	}
	public class ColorSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.ColorSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cColorSensorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColorSensorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPortIDAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPortIDEStringParserRuleCall_4_0 = (RuleCall)cPortIDAssignment_4.eContents().get(0);
		
		//ColorSensor returns ColorSensor :
		//    {ColorSensor}
		//    'colorSensor'
		//    name=ID
		//    'on'
		//    portID=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ColorSensor}
		//'colorSensor'
		//name=ID
		//'on'
		//portID=EString
		public Group getGroup() { return cGroup; }
		
		//{ColorSensor}
		public Action getColorSensorAction_0() { return cColorSensorAction_0; }
		
		//'colorSensor'
		public Keyword getColorSensorKeyword_1() { return cColorSensorKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'on'
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
		
		//portID=EString
		public Assignment getPortIDAssignment_4() { return cPortIDAssignment_4; }
		
		//EString
		public RuleCall getPortIDEStringParserRuleCall_4_0() { return cPortIDEStringParserRuleCall_4_0; }
	}
	public class LaserSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.LaserSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLaserSensorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLaserSensorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPortIDAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPortIDEStringParserRuleCall_4_0 = (RuleCall)cPortIDAssignment_4.eContents().get(0);
		
		//LaserSensor returns LaserSensor :
		//    {LaserSensor}
		//    'laserSensor'
		//    name=ID
		//    'on'
		//    portID=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{LaserSensor}
		//'laserSensor'
		//name=ID
		//'on'
		//portID=EString
		public Group getGroup() { return cGroup; }
		
		//{LaserSensor}
		public Action getLaserSensorAction_0() { return cLaserSensorAction_0; }
		
		//'laserSensor'
		public Keyword getLaserSensorKeyword_1() { return cLaserSensorKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'on'
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
		
		//portID=EString
		public Assignment getPortIDAssignment_4() { return cPortIDAssignment_4; }
		
		//EString
		public RuleCall getPortIDEStringParserRuleCall_4_0() { return cPortIDEStringParserRuleCall_4_0; }
	}
	public class GPSSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.GPSSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGPSSensorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLaserSensorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPortIDAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPortIDEStringParserRuleCall_4_0 = (RuleCall)cPortIDAssignment_4.eContents().get(0);
		
		//GPSSensor returns GPSSensor :
		//    {GPSSensor}
		//    'laserSensor'
		//    name=ID
		//    'on'
		//    portID=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{GPSSensor}
		//'laserSensor'
		//name=ID
		//'on'
		//portID=EString
		public Group getGroup() { return cGroup; }
		
		//{GPSSensor}
		public Action getGPSSensorAction_0() { return cGPSSensorAction_0; }
		
		//'laserSensor'
		public Keyword getLaserSensorKeyword_1() { return cLaserSensorKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'on'
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
		
		//portID=EString
		public Assignment getPortIDAssignment_4() { return cPortIDAssignment_4; }
		
		//EString
		public RuleCall getPortIDEStringParserRuleCall_4_0() { return cPortIDEStringParserRuleCall_4_0; }
	}
	public class GyroSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.GyroSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGyroSensorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLaserSensorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPortIDAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPortIDEStringParserRuleCall_4_0 = (RuleCall)cPortIDAssignment_4.eContents().get(0);
		
		//GyroSensor returns GyroSensor :
		//    {GyroSensor}
		//    'laserSensor'
		//    name=ID
		//    'on'
		//    portID=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{GyroSensor}
		//'laserSensor'
		//name=ID
		//'on'
		//portID=EString
		public Group getGroup() { return cGroup; }
		
		//{GyroSensor}
		public Action getGyroSensorAction_0() { return cGyroSensorAction_0; }
		
		//'laserSensor'
		public Keyword getLaserSensorKeyword_1() { return cLaserSensorKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'on'
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
		
		//portID=EString
		public Assignment getPortIDAssignment_4() { return cPortIDAssignment_4; }
		
		//EString
		public RuleCall getPortIDEStringParserRuleCall_4_0() { return cPortIDEStringParserRuleCall_4_0; }
	}
	public class TurnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Turn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRobotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRobotRobotCrossReference_0_0 = (CrossReference)cRobotAssignment_0.eContents().get(0);
		private final RuleCall cRobotRobotIDTerminalRuleCall_0_0_1 = (RuleCall)cRobotRobotCrossReference_0_0.eContents().get(1);
		private final Keyword cTurnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDirectionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDirectionDirectionEnumRuleCall_3_0 = (RuleCall)cDirectionAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAngleAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAngleExpressionParserRuleCall_5_0 = (RuleCall)cAngleAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSpeedAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSpeedExpressionParserRuleCall_7_0 = (RuleCall)cSpeedAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cDurationAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cDurationExpressionParserRuleCall_9_0 = (RuleCall)cDurationAssignment_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Turn returns Turn :
		//    robot=[Robot|ID]
		//    'turn' '('
		//    direction=Direction ","
		//    angle=Expression ","
		//    speed=Expression ","
		//    duration=Expression
		//    ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//robot=[Robot|ID]
		//'turn' '('
		//direction=Direction ","
		//angle=Expression ","
		//speed=Expression ","
		//duration=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//robot=[Robot|ID]
		public Assignment getRobotAssignment_0() { return cRobotAssignment_0; }
		
		//[Robot|ID]
		public CrossReference getRobotRobotCrossReference_0_0() { return cRobotRobotCrossReference_0_0; }
		
		//ID
		public RuleCall getRobotRobotIDTerminalRuleCall_0_0_1() { return cRobotRobotIDTerminalRuleCall_0_0_1; }
		
		//'turn'
		public Keyword getTurnKeyword_1() { return cTurnKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//direction=Direction
		public Assignment getDirectionAssignment_3() { return cDirectionAssignment_3; }
		
		//Direction
		public RuleCall getDirectionDirectionEnumRuleCall_3_0() { return cDirectionDirectionEnumRuleCall_3_0; }
		
		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//angle=Expression
		public Assignment getAngleAssignment_5() { return cAngleAssignment_5; }
		
		//Expression
		public RuleCall getAngleExpressionParserRuleCall_5_0() { return cAngleExpressionParserRuleCall_5_0; }
		
		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//speed=Expression
		public Assignment getSpeedAssignment_7() { return cSpeedAssignment_7; }
		
		//Expression
		public RuleCall getSpeedExpressionParserRuleCall_7_0() { return cSpeedExpressionParserRuleCall_7_0; }
		
		//","
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//duration=Expression
		public Assignment getDurationAssignment_9() { return cDurationAssignment_9; }
		
		//Expression
		public RuleCall getDurationExpressionParserRuleCall_9_0() { return cDurationExpressionParserRuleCall_9_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
	}
	public class GoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Go");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRobotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRobotRobotCrossReference_0_0 = (CrossReference)cRobotAssignment_0.eContents().get(0);
		private final RuleCall cRobotRobotIDTerminalRuleCall_0_0_1 = (RuleCall)cRobotRobotCrossReference_0_0.eContents().get(1);
		private final Keyword cGoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSpeedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpeedBinaryOperationParserRuleCall_3_0 = (RuleCall)cSpeedAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDurationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDurationBinaryOperationParserRuleCall_5_0 = (RuleCall)cDurationAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Go returns Go :
		//    robot=[Robot|ID]
		//    'go' '('
		//    speed=BinaryOperation","
		//    (duration=BinaryOperation)?
		//    ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//robot=[Robot|ID]
		//'go' '('
		//speed=BinaryOperation","
		//(duration=BinaryOperation)?
		//')'
		public Group getGroup() { return cGroup; }
		
		//robot=[Robot|ID]
		public Assignment getRobotAssignment_0() { return cRobotAssignment_0; }
		
		//[Robot|ID]
		public CrossReference getRobotRobotCrossReference_0_0() { return cRobotRobotCrossReference_0_0; }
		
		//ID
		public RuleCall getRobotRobotIDTerminalRuleCall_0_0_1() { return cRobotRobotIDTerminalRuleCall_0_0_1; }
		
		//'go'
		public Keyword getGoKeyword_1() { return cGoKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//speed=BinaryOperation
		public Assignment getSpeedAssignment_3() { return cSpeedAssignment_3; }
		
		//BinaryOperation
		public RuleCall getSpeedBinaryOperationParserRuleCall_3_0() { return cSpeedBinaryOperationParserRuleCall_3_0; }
		
		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//(duration=BinaryOperation)?
		public Assignment getDurationAssignment_5() { return cDurationAssignment_5; }
		
		//BinaryOperation
		public RuleCall getDurationBinaryOperationParserRuleCall_5_0() { return cDurationBinaryOperationParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ChangeAngleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.ChangeAngle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRobotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRobotRobotCrossReference_0_0 = (CrossReference)cRobotAssignment_0.eContents().get(0);
		private final RuleCall cRobotRobotIDTerminalRuleCall_0_0_1 = (RuleCall)cRobotRobotCrossReference_0_0.eContents().get(1);
		private final Keyword cChangeAngleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAngleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAngleExpressionParserRuleCall_3_0 = (RuleCall)cAngleAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSpeedAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSpeedExpressionParserRuleCall_5_0 = (RuleCall)cSpeedAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ChangeAngle returns ChangeAngle :
		//    robot=[Robot|ID]
		//    'changeAngle' '('
		//    angle=Expression','
		//    (speed=Expression)?
		//    ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//robot=[Robot|ID]
		//'changeAngle' '('
		//angle=Expression','
		//(speed=Expression)?
		//')'
		public Group getGroup() { return cGroup; }
		
		//robot=[Robot|ID]
		public Assignment getRobotAssignment_0() { return cRobotAssignment_0; }
		
		//[Robot|ID]
		public CrossReference getRobotRobotCrossReference_0_0() { return cRobotRobotCrossReference_0_0; }
		
		//ID
		public RuleCall getRobotRobotIDTerminalRuleCall_0_0_1() { return cRobotRobotIDTerminalRuleCall_0_0_1; }
		
		//'changeAngle'
		public Keyword getChangeAngleKeyword_1() { return cChangeAngleKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//angle=Expression
		public Assignment getAngleAssignment_3() { return cAngleAssignment_3; }
		
		//Expression
		public RuleCall getAngleExpressionParserRuleCall_3_0() { return cAngleExpressionParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//(speed=Expression)?
		public Assignment getSpeedAssignment_5() { return cSpeedAssignment_5; }
		
		//Expression
		public RuleCall getSpeedExpressionParserRuleCall_5_0() { return cSpeedExpressionParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ChangeIntensityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.ChangeIntensity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRobotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRobotRobotCrossReference_0_0 = (CrossReference)cRobotAssignment_0.eContents().get(0);
		private final RuleCall cRobotRobotIDTerminalRuleCall_0_0_1 = (RuleCall)cRobotRobotCrossReference_0_0.eContents().get(1);
		private final Keyword cChangeIntensityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIntensityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIntensityExpressionParserRuleCall_3_0 = (RuleCall)cIntensityAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ChangeIntensity returns ChangeIntensity :
		//    robot=[Robot|ID]
		//    'ChangeIntensity' '('
		//    intensity=Expression
		//    ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//robot=[Robot|ID]
		//'ChangeIntensity' '('
		//intensity=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//robot=[Robot|ID]
		public Assignment getRobotAssignment_0() { return cRobotAssignment_0; }
		
		//[Robot|ID]
		public CrossReference getRobotRobotCrossReference_0_0() { return cRobotRobotCrossReference_0_0; }
		
		//ID
		public RuleCall getRobotRobotIDTerminalRuleCall_0_0_1() { return cRobotRobotIDTerminalRuleCall_0_0_1; }
		
		//'ChangeIntensity'
		public Keyword getChangeIntensityKeyword_1() { return cChangeIntensityKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//intensity=Expression
		public Assignment getIntensityAssignment_3() { return cIntensityAssignment_3; }
		
		//Expression
		public RuleCall getIntensityExpressionParserRuleCall_3_0() { return cIntensityExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ShootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Shoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRobotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRobotRobotCrossReference_0_0 = (CrossReference)cRobotAssignment_0.eContents().get(0);
		private final RuleCall cRobotRobotIDTerminalRuleCall_0_0_1 = (RuleCall)cRobotRobotCrossReference_0_0.eContents().get(1);
		private final Keyword cShootKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cForceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cForceExpressionParserRuleCall_3_0 = (RuleCall)cForceAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Shoot returns Shoot :
		//    robot=[Robot|ID]
		//    'shoot' '('
		//    force=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//robot=[Robot|ID]
		//'shoot' '('
		//force=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//robot=[Robot|ID]
		public Assignment getRobotAssignment_0() { return cRobotAssignment_0; }
		
		//[Robot|ID]
		public CrossReference getRobotRobotCrossReference_0_0() { return cRobotRobotCrossReference_0_0; }
		
		//ID
		public RuleCall getRobotRobotIDTerminalRuleCall_0_0_1() { return cRobotRobotIDTerminalRuleCall_0_0_1; }
		
		//'shoot'
		public Keyword getShootKeyword_1() { return cShootKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//force=Expression
		public Assignment getForceAssignment_3() { return cForceAssignment_3; }
		
		//Expression
		public RuleCall getForceExpressionParserRuleCall_3_0() { return cForceExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	public class ColorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRougeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRougeRougeKeyword_0_0 = (Keyword)cRougeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBleuEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBleuBleuKeyword_1_0 = (Keyword)cBleuEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Color:
		//    Rouge = "Rouge" | Bleu = "Bleu"
		//;
		public EnumRule getRule() { return rule; }
		
		//Rouge = "Rouge" | Bleu = "Bleu"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Rouge = "Rouge"
		public EnumLiteralDeclaration getRougeEnumLiteralDeclaration_0() { return cRougeEnumLiteralDeclaration_0; }
		
		//"Rouge"
		public Keyword getRougeRougeKeyword_0_0() { return cRougeRougeKeyword_0_0; }
		
		//Bleu = "Bleu"
		public EnumLiteralDeclaration getBleuEnumLiteralDeclaration_1() { return cBleuEnumLiteralDeclaration_1; }
		
		//"Bleu"
		public Keyword getBleuBleuKeyword_1_0() { return cBleuBleuKeyword_1_0; }
	}
	public class DirectionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Direction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLeftEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLeftLeftKeyword_0_0 = (Keyword)cLeftEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRightEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRightRightKeyword_1_0 = (Keyword)cRightEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Direction:
		//    Left= "Left" | Right = "Right"
		//;
		public EnumRule getRule() { return rule; }
		
		//Left= "Left" | Right = "Right"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Left= "Left"
		public EnumLiteralDeclaration getLeftEnumLiteralDeclaration_0() { return cLeftEnumLiteralDeclaration_0; }
		
		//"Left"
		public Keyword getLeftLeftKeyword_0_0() { return cLeftLeftKeyword_0_0; }
		
		//Right = "Right"
		public EnumLiteralDeclaration getRightEnumLiteralDeclaration_1() { return cRightEnumLiteralDeclaration_1; }
		
		//"Right"
		public Keyword getRightRightKeyword_1_0() { return cRightRightKeyword_1_0; }
	}
	
	private final ProgramElements pProgram;
	private final StatementElements pStatement;
	private final RobotDeclarationElements pRobotDeclaration;
	private final ExpressionElements pExpression;
	private final CalculElements pCalcul;
	private final BinaryOperationElements pBinaryOperation;
	private final ComparaisonElements pComparaison;
	private final VariableElements pVariable;
	private final SensorElements pSensor;
	private final RobotStatementElements pRobotStatement;
	private final ActuatorElements pActuator;
	private final MotorElements pMotor;
	private final RotativeMotorElements pRotativeMotor;
	private final CommentaryElements pCommentary;
	private final LoopElements pLoop;
	private final IfElements pIf;
	private final WhileLoopElements pWhileLoop;
	private final ForLoopElements pForLoop;
	private final AdditionElements pAddition;
	private final SubstarctionElements pSubstarction;
	private final DivisionElements pDivision;
	private final ExponentialElements pExponential;
	private final MultiplicationElements pMultiplication;
	private final GTElements pGT;
	private final GTEqualElements pGTEqual;
	private final LTElements pLT;
	private final LTEqualElements pLTEqual;
	private final EqualElements pEqual;
	private final AssignementElements pAssignement;
	private final LeIntegerElements pLeInteger;
	private final LeStringElements pLeString;
	private final LeBooleanElements pLeBoolean;
	private final LeFloatElements pLeFloat;
	private final PrintElements pPrint;
	private final VariableProxyElements pVariableProxy;
	private final SensorProxyElements pSensorProxy;
	private final ActuatorProxyElements pActuatorProxy;
	private final EBooleanElements pEBoolean;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	private final EFloatElements pEFloat;
	private final WheelElements pWheel;
	private final ArmElements pArm;
	private final LedElements pLed;
	private final ShootLauncherElements pShootLauncher;
	private final ColorSensorElements pColorSensor;
	private final LaserSensorElements pLaserSensor;
	private final GPSSensorElements pGPSSensor;
	private final GyroSensorElements pGyroSensor;
	private final TurnElements pTurn;
	private final GoElements pGo;
	private final ChangeAngleElements pChangeAngle;
	private final ChangeIntensityElements pChangeIntensity;
	private final ShootElements pShoot;
	private final ColorElements eColor;
	private final DirectionElements eDirection;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UduvGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pStatement = new StatementElements();
		this.pRobotDeclaration = new RobotDeclarationElements();
		this.pExpression = new ExpressionElements();
		this.pCalcul = new CalculElements();
		this.pBinaryOperation = new BinaryOperationElements();
		this.pComparaison = new ComparaisonElements();
		this.pVariable = new VariableElements();
		this.pSensor = new SensorElements();
		this.pRobotStatement = new RobotStatementElements();
		this.pActuator = new ActuatorElements();
		this.pMotor = new MotorElements();
		this.pRotativeMotor = new RotativeMotorElements();
		this.pCommentary = new CommentaryElements();
		this.pLoop = new LoopElements();
		this.pIf = new IfElements();
		this.pWhileLoop = new WhileLoopElements();
		this.pForLoop = new ForLoopElements();
		this.pAddition = new AdditionElements();
		this.pSubstarction = new SubstarctionElements();
		this.pDivision = new DivisionElements();
		this.pExponential = new ExponentialElements();
		this.pMultiplication = new MultiplicationElements();
		this.pGT = new GTElements();
		this.pGTEqual = new GTEqualElements();
		this.pLT = new LTElements();
		this.pLTEqual = new LTEqualElements();
		this.pEqual = new EqualElements();
		this.pAssignement = new AssignementElements();
		this.pLeInteger = new LeIntegerElements();
		this.pLeString = new LeStringElements();
		this.pLeBoolean = new LeBooleanElements();
		this.pLeFloat = new LeFloatElements();
		this.pPrint = new PrintElements();
		this.pVariableProxy = new VariableProxyElements();
		this.pSensorProxy = new SensorProxyElements();
		this.pActuatorProxy = new ActuatorProxyElements();
		this.pEBoolean = new EBooleanElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
		this.pEFloat = new EFloatElements();
		this.pWheel = new WheelElements();
		this.pArm = new ArmElements();
		this.pLed = new LedElements();
		this.pShootLauncher = new ShootLauncherElements();
		this.pColorSensor = new ColorSensorElements();
		this.pLaserSensor = new LaserSensorElements();
		this.pGPSSensor = new GPSSensorElements();
		this.pGyroSensor = new GyroSensorElements();
		this.pTurn = new TurnElements();
		this.pGo = new GoElements();
		this.pChangeAngle = new ChangeAngleElements();
		this.pChangeIntensity = new ChangeIntensityElements();
		this.pShoot = new ShootElements();
		this.eColor = new ColorElements();
		this.eDirection = new DirectionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.univcotedazur.l3ia.legolanguage.xtext.Uduv".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program returns Program:
	//    {Program}
	//        (statement+=Statement)*
	//;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Statement returns Statement:
	//    If | Loop  | Variable | Print | Expression | Commentary | RobotDeclaration | Sensor | Actuator | RobotStatement ;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//RobotDeclaration returns Robot:
	//    'Robot' name=ID
	//        ('{'
	//        "left" leftWheel = Wheel
	//        "right" rightWheel= Wheel
	//        ((actuator+=Actuator) |(sensor+=Sensor))*
	//        '}')?
	//;
	public RobotDeclarationElements getRobotDeclarationAccess() {
		return pRobotDeclaration;
	}
	
	public ParserRule getRobotDeclarationRule() {
		return getRobotDeclarationAccess().getRule();
	}
	
	//Expression returns Expression:
	//     SensorProxy | ActuatorProxy | VariableProxy  | BinaryOperation;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Calcul returns Calcul :
	//    Substarction | Addition | Division | Exponential | Multiplication ;
	public CalculElements getCalculAccess() {
		return pCalcul;
	}
	
	public ParserRule getCalculRule() {
		return getCalculAccess().getRule();
	}
	
	//BinaryOperation returns BinaryOperation :
	//Comparaison |  Calcul |  Assignement /*| SensorOperation | ActuatorOperation*/ ;
	public BinaryOperationElements getBinaryOperationAccess() {
		return pBinaryOperation;
	}
	
	public ParserRule getBinaryOperationRule() {
		return getBinaryOperationAccess().getRule();
	}
	
	//Comparaison returns Comparaison:
	//    GT | LT | Equal | GTEqual | LTEqual ;
	public ComparaisonElements getComparaisonAccess() {
		return pComparaison;
	}
	
	public ParserRule getComparaisonRule() {
		return getComparaisonAccess().getRule();
	}
	
	//Variable returns Variable:
	//    LeInteger | LeString | LeFloat | LeBoolean;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Sensor returns Sensor :
	//    ColorSensor | LaserSensor | GPSSensor | GyroSensor
	//;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//RobotStatement returns RobotStatement :
	//    Go | Turn | ChangeAngle | ChangeIntensity | Shoot
	//;
	public RobotStatementElements getRobotStatementAccess() {
		return pRobotStatement;
	}
	
	public ParserRule getRobotStatementRule() {
		return getRobotStatementAccess().getRule();
	}
	
	//Actuator returns Actuator :
	//    Motor | Led
	//;
	public ActuatorElements getActuatorAccess() {
		return pActuator;
	}
	
	public ParserRule getActuatorRule() {
		return getActuatorAccess().getRule();
	}
	
	//Motor returns Motor :
	//    RotativeMotor | ShootLauncher
	//;
	public MotorElements getMotorAccess() {
		return pMotor;
	}
	
	public ParserRule getMotorRule() {
		return getMotorAccess().getRule();
	}
	
	//RotativeMotor returns RotativeMotor:
	//    Wheel | Arm
	//;
	public RotativeMotorElements getRotativeMotorAccess() {
		return pRotativeMotor;
	}
	
	public ParserRule getRotativeMotorRule() {
		return getRotativeMotorAccess().getRule();
	}
	
	//Commentary returns Commentary:
	//    {Commentary}
	//    '\'\'\''
	//        initialeValue=EString
	//    '\'\'\'';
	public CommentaryElements getCommentaryAccess() {
		return pCommentary;
	}
	
	public ParserRule getCommentaryRule() {
		return getCommentaryAccess().getRule();
	}
	
	//Loop returns Loop :
	//    WhileLoop | ForLoop  ;
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//If returns If :
	//    'if'
	//    condition=Comparaison
	//    '{'
	//        (statement+=Statement)*
	//    '}';
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//WhileLoop returns WhileLoop:
	//    'while'
	//     loopCondition=Comparaison
	//    '{'
	//        (statement+=Statement)*
	//    '}';
	public WhileLoopElements getWhileLoopAccess() {
		return pWhileLoop;
	}
	
	public ParserRule getWhileLoopRule() {
		return getWhileLoopAccess().getRule();
	}
	
	//ForLoop returns ForLoop:
	//    'for'
	//    loopCondition=Comparaison
	//    '{'
	//        (statement+=Statement)*
	//    '}';
	public ForLoopElements getForLoopAccess() {
		return pForLoop;
	}
	
	public ParserRule getForLoopRule() {
		return getForLoopAccess().getRule();
	}
	
	//Addition returns Addition:
	//    '('
	//        left=Expression
	//        '+'
	//        right=Expression
	//    ')';
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Substarction returns Substarction:
	//    '('
	//        left=Expression
	//        '-'
	//        right=Expression
	//    ')';
	public SubstarctionElements getSubstarctionAccess() {
		return pSubstarction;
	}
	
	public ParserRule getSubstarctionRule() {
		return getSubstarctionAccess().getRule();
	}
	
	//Division returns Division:
	//    '('
	//        left=Expression
	//        '/'
	//        right=Expression
	//    ')';
	public DivisionElements getDivisionAccess() {
		return pDivision;
	}
	
	public ParserRule getDivisionRule() {
		return getDivisionAccess().getRule();
	}
	
	//Exponential returns Exponential:
	//    '('
	//        left=Expression
	//        '^'
	//        right=Expression
	//    ')';
	public ExponentialElements getExponentialAccess() {
		return pExponential;
	}
	
	public ParserRule getExponentialRule() {
		return getExponentialAccess().getRule();
	}
	
	//Multiplication returns Multiplication:
	//    '('
	//        left=Expression
	//        '*'
	//        right=Expression
	//    ')';
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//GT returns GT:
	//    '('
	//        left=Expression
	//        '>'
	//        right=Expression
	//    ')';
	public GTElements getGTAccess() {
		return pGT;
	}
	
	public ParserRule getGTRule() {
		return getGTAccess().getRule();
	}
	
	//GTEqual returns GTEqual:
	//    '('
	//        left=Expression
	//        '>='
	//        right=Expression
	//    ')';
	public GTEqualElements getGTEqualAccess() {
		return pGTEqual;
	}
	
	public ParserRule getGTEqualRule() {
		return getGTEqualAccess().getRule();
	}
	
	//LT returns LT:
	//    '('
	//        left=Expression
	//        '<'
	//        right=Expression
	//    ')';
	public LTElements getLTAccess() {
		return pLT;
	}
	
	public ParserRule getLTRule() {
		return getLTAccess().getRule();
	}
	
	//LTEqual returns LTEqual:
	//    '('
	//        left=Expression
	//        '<='
	//        right=Expression
	//    ')';
	public LTEqualElements getLTEqualAccess() {
		return pLTEqual;
	}
	
	public ParserRule getLTEqualRule() {
		return getLTEqualAccess().getRule();
	}
	
	//Equal returns Equal:
	//    '('
	//        left=Expression
	//        '=='
	//        right=Expression
	//    ')';
	public EqualElements getEqualAccess() {
		return pEqual;
	}
	
	public ParserRule getEqualRule() {
		return getEqualAccess().getRule();
	}
	
	//Assignement returns Assignement:
	//    '('
	//        left=Expression
	//        '='
	//         right=Expression
	//    ')'
	//    ;
	public AssignementElements getAssignementAccess() {
		return pAssignement;
	}
	
	public ParserRule getAssignementRule() {
		return getAssignementAccess().getRule();
	}
	
	//LeInteger returns LeInteger:
	//    {LeInteger}
	//    ('int' name=EString '=')?
	//        initialeValue=EInt
	//        ;
	public LeIntegerElements getLeIntegerAccess() {
		return pLeInteger;
	}
	
	public ParserRule getLeIntegerRule() {
		return getLeIntegerAccess().getRule();
	}
	
	//LeString returns LeString:
	//    {LeString}
	//    ('string' name=EString '=')?
	//        initialeValue=EString
	//        ;
	public LeStringElements getLeStringAccess() {
		return pLeString;
	}
	
	public ParserRule getLeStringRule() {
		return getLeStringAccess().getRule();
	}
	
	//LeBoolean returns LeBoolean:
	//    {LeBoolean}
	//    ('boolean' name=EString '=')?
	//         initialeValue=EBoolean
	//        ;
	public LeBooleanElements getLeBooleanAccess() {
		return pLeBoolean;
	}
	
	public ParserRule getLeBooleanRule() {
		return getLeBooleanAccess().getRule();
	}
	
	//LeFloat returns LeFloat:
	//    {LeFloat}
	//    ('float' name=EString '=')?
	//         initialeValue= EFloat
	//        ;
	public LeFloatElements getLeFloatAccess() {
		return pLeFloat;
	}
	
	public ParserRule getLeFloatRule() {
		return getLeFloatAccess().getRule();
	}
	
	//Print returns Print:
	//    {Print}
	//    'print' '(' (statement+=Statement)* ')'
	//    ;
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	//VariableProxy returns VariableProxy:
	//    variable=[Variable|EString]
	//    ;
	public VariableProxyElements getVariableProxyAccess() {
		return pVariableProxy;
	}
	
	public ParserRule getVariableProxyRule() {
		return getVariableProxyAccess().getRule();
	}
	
	//SensorProxy returns SensorProxy:
	//    sensor=[Sensor|EString]
	//    ;
	public SensorProxyElements getSensorProxyAccess() {
		return pSensorProxy;
	}
	
	public ParserRule getSensorProxyRule() {
		return getSensorProxyAccess().getRule();
	}
	
	//ActuatorProxy returns ActuatorProxy:
	//    actuator=[Actuator|EString]
	//    ;
	public ActuatorProxyElements getActuatorProxyAccess() {
		return pActuatorProxy;
	}
	
	public ParserRule getActuatorProxyRule() {
		return getActuatorProxyAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'True' | 'False';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EFloat returns ecore::EFloat:
	//    INT '.' INT
	//    ;
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}
	
	//Wheel returns Wheel :
	//    {Wheel}
	//    'wheel'
	//    'on'
	//    portID=EString
	//    ("=" speed=EInt)?
	//;
	public WheelElements getWheelAccess() {
		return pWheel;
	}
	
	public ParserRule getWheelRule() {
		return getWheelAccess().getRule();
	}
	
	//Arm returns Arm :
	//    {Arm}
	//    'arm'
	//    name=ID
	//    'on'
	//    portID=EString
	//    ("=" angle=EInt)?
	//;
	public ArmElements getArmAccess() {
		return pArm;
	}
	
	public ParserRule getArmRule() {
		return getArmAccess().getRule();
	}
	
	//Led returns Led:
	//    {Led}
	//    'led'
	//    name=ID
	//    'on'
	//    portID=EString
	//    ("=" bright=EInt)?
	//;
	public LedElements getLedAccess() {
		return pLed;
	}
	
	public ParserRule getLedRule() {
		return getLedAccess().getRule();
	}
	
	//ShootLauncher returns ShootLauncher :
	//    {ShootLauncher}
	//    'shootLauncher'
	//    name=ID
	//    'on'
	//    portID=EString
	//;
	public ShootLauncherElements getShootLauncherAccess() {
		return pShootLauncher;
	}
	
	public ParserRule getShootLauncherRule() {
		return getShootLauncherAccess().getRule();
	}
	
	//ColorSensor returns ColorSensor :
	//    {ColorSensor}
	//    'colorSensor'
	//    name=ID
	//    'on'
	//    portID=EString
	//;
	public ColorSensorElements getColorSensorAccess() {
		return pColorSensor;
	}
	
	public ParserRule getColorSensorRule() {
		return getColorSensorAccess().getRule();
	}
	
	//LaserSensor returns LaserSensor :
	//    {LaserSensor}
	//    'laserSensor'
	//    name=ID
	//    'on'
	//    portID=EString
	//;
	public LaserSensorElements getLaserSensorAccess() {
		return pLaserSensor;
	}
	
	public ParserRule getLaserSensorRule() {
		return getLaserSensorAccess().getRule();
	}
	
	//GPSSensor returns GPSSensor :
	//    {GPSSensor}
	//    'laserSensor'
	//    name=ID
	//    'on'
	//    portID=EString
	//;
	public GPSSensorElements getGPSSensorAccess() {
		return pGPSSensor;
	}
	
	public ParserRule getGPSSensorRule() {
		return getGPSSensorAccess().getRule();
	}
	
	//GyroSensor returns GyroSensor :
	//    {GyroSensor}
	//    'laserSensor'
	//    name=ID
	//    'on'
	//    portID=EString
	//;
	public GyroSensorElements getGyroSensorAccess() {
		return pGyroSensor;
	}
	
	public ParserRule getGyroSensorRule() {
		return getGyroSensorAccess().getRule();
	}
	
	//Turn returns Turn :
	//    robot=[Robot|ID]
	//    'turn' '('
	//    direction=Direction ","
	//    angle=Expression ","
	//    speed=Expression ","
	//    duration=Expression
	//    ')'
	//;
	public TurnElements getTurnAccess() {
		return pTurn;
	}
	
	public ParserRule getTurnRule() {
		return getTurnAccess().getRule();
	}
	
	//Go returns Go :
	//    robot=[Robot|ID]
	//    'go' '('
	//    speed=BinaryOperation","
	//    (duration=BinaryOperation)?
	//    ')'
	//;
	public GoElements getGoAccess() {
		return pGo;
	}
	
	public ParserRule getGoRule() {
		return getGoAccess().getRule();
	}
	
	//ChangeAngle returns ChangeAngle :
	//    robot=[Robot|ID]
	//    'changeAngle' '('
	//    angle=Expression','
	//    (speed=Expression)?
	//    ')'
	//;
	public ChangeAngleElements getChangeAngleAccess() {
		return pChangeAngle;
	}
	
	public ParserRule getChangeAngleRule() {
		return getChangeAngleAccess().getRule();
	}
	
	//ChangeIntensity returns ChangeIntensity :
	//    robot=[Robot|ID]
	//    'ChangeIntensity' '('
	//    intensity=Expression
	//    ')'
	//;
	public ChangeIntensityElements getChangeIntensityAccess() {
		return pChangeIntensity;
	}
	
	public ParserRule getChangeIntensityRule() {
		return getChangeIntensityAccess().getRule();
	}
	
	//Shoot returns Shoot :
	//    robot=[Robot|ID]
	//    'shoot' '('
	//    force=Expression ')'
	//;
	public ShootElements getShootAccess() {
		return pShoot;
	}
	
	public ParserRule getShootRule() {
		return getShootAccess().getRule();
	}
	
	//enum Color:
	//    Rouge = "Rouge" | Bleu = "Bleu"
	//;
	public ColorElements getColorAccess() {
		return eColor;
	}
	
	public EnumRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//enum Direction:
	//    Left= "Left" | Right = "Right"
	//;
	public DirectionElements getDirectionAccess() {
		return eDirection;
	}
	
	public EnumRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
