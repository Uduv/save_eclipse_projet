/*
 * generated by Xtext 2.25.0
 */
package fr.univcotedazur.l3ia.legolanguage.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UduvGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProgramKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cStatementKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cStatementAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_4_2_0 = (RuleCall)cStatementAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cStatementAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_4_3_1_0 = (RuleCall)cStatementAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Program returns Program:
		//    {Program}
		//    'Program'
		//    name=EString
		//    '{'
		//        ('statement' '{' statement+=Statement ( "," statement+=Statement)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Program}
		//'Program'
		//name=EString
		//'{'
		//    ('statement' '{' statement+=Statement ( "," statement+=Statement)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }
		
		//'Program'
		public Keyword getProgramKeyword_1() { return cProgramKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('statement' '{' statement+=Statement ( "," statement+=Statement)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'statement'
		public Keyword getStatementKeyword_4_0() { return cStatementKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//statement+=Statement
		public Assignment getStatementAssignment_4_2() { return cStatementAssignment_4_2; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_4_2_0() { return cStatementStatementParserRuleCall_4_2_0; }
		
		//( "," statement+=Statement)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//statement+=Statement
		public Assignment getStatementAssignment_4_3_1() { return cStatementAssignment_4_3_1; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_4_3_1_0() { return cStatementStatementParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWhileLoopParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubstarctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGTParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAssignementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLeIntegerParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLeStringParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLTParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cForLoopParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cVariable_ProxyParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cPrintParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Statement returns Statement:
		//    WhileLoop | Substarction | GT | Assignement | leInteger | leString | LT | ForLoop | Variable_Proxy | Print;
		@Override public ParserRule getRule() { return rule; }
		
		//WhileLoop | Substarction | GT | Assignement | leInteger | leString | LT | ForLoop | Variable_Proxy | Print
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WhileLoop
		public RuleCall getWhileLoopParserRuleCall_0() { return cWhileLoopParserRuleCall_0; }
		
		//Substarction
		public RuleCall getSubstarctionParserRuleCall_1() { return cSubstarctionParserRuleCall_1; }
		
		//GT
		public RuleCall getGTParserRuleCall_2() { return cGTParserRuleCall_2; }
		
		//Assignement
		public RuleCall getAssignementParserRuleCall_3() { return cAssignementParserRuleCall_3; }
		
		//leInteger
		public RuleCall getLeIntegerParserRuleCall_4() { return cLeIntegerParserRuleCall_4; }
		
		//leString
		public RuleCall getLeStringParserRuleCall_5() { return cLeStringParserRuleCall_5; }
		
		//LT
		public RuleCall getLTParserRuleCall_6() { return cLTParserRuleCall_6; }
		
		//ForLoop
		public RuleCall getForLoopParserRuleCall_7() { return cForLoopParserRuleCall_7; }
		
		//Variable_Proxy
		public RuleCall getVariable_ProxyParserRuleCall_8() { return cVariable_ProxyParserRuleCall_8; }
		
		//Print
		public RuleCall getPrintParserRuleCall_9() { return cPrintParserRuleCall_9; }
	}
	public class ComparaisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Comparaison");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGTParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEqualParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Comparaison returns Comparaison:
		//    GT | LT | Equal;
		@Override public ParserRule getRule() { return rule; }
		
		//GT | LT | Equal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GT
		public RuleCall getGTParserRuleCall_0() { return cGTParserRuleCall_0; }
		
		//LT
		public RuleCall getLTParserRuleCall_1() { return cLTParserRuleCall_1; }
		
		//Equal
		public RuleCall getEqualParserRuleCall_2() { return cEqualParserRuleCall_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubstarctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssignementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLTParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVariable_ProxyParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Expression returns Expression:
		//    Substarction | GT | Assignement | LT  | Variable_Proxy;
		@Override public ParserRule getRule() { return rule; }
		
		//Substarction | GT | Assignement | LT  | Variable_Proxy
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Substarction
		public RuleCall getSubstarctionParserRuleCall_0() { return cSubstarctionParserRuleCall_0; }
		
		//GT
		public RuleCall getGTParserRuleCall_1() { return cGTParserRuleCall_1; }
		
		//Assignement
		public RuleCall getAssignementParserRuleCall_2() { return cAssignementParserRuleCall_2; }
		
		//LT
		public RuleCall getLTParserRuleCall_3() { return cLTParserRuleCall_3; }
		
		//Variable_Proxy
		public RuleCall getVariable_ProxyParserRuleCall_4() { return cVariable_ProxyParserRuleCall_4; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLeIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLeStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLeFloatParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLeBooleanParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Variable returns Variable:
		//    leInteger | leString | leFloat | leBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//leInteger | leString | leFloat | leBoolean
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//leInteger
		public RuleCall getLeIntegerParserRuleCall_0() { return cLeIntegerParserRuleCall_0; }
		
		//leString
		public RuleCall getLeStringParserRuleCall_1() { return cLeStringParserRuleCall_1; }
		
		//leFloat
		public RuleCall getLeFloatParserRuleCall_2() { return cLeFloatParserRuleCall_2; }
		
		//leBoolean
		public RuleCall getLeBooleanParserRuleCall_3() { return cLeBooleanParserRuleCall_3; }
	}
	public class WhileLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.WhileLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLoopConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLoopConditionComparaisonParserRuleCall_2_0 = (RuleCall)cLoopConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementStatementParserRuleCall_5_0 = (RuleCall)cStatementAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//WhileLoop returns WhileLoop:
		//    'while'
		//    '(' loopCondition=Comparaison')'
		//    '{'
		//        (statement+=Statement)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'while'
		//'(' loopCondition=Comparaison')'
		//'{'
		//    (statement+=Statement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//loopCondition=Comparaison
		public Assignment getLoopConditionAssignment_2() { return cLoopConditionAssignment_2; }
		
		//Comparaison
		public RuleCall getLoopConditionComparaisonParserRuleCall_2_0() { return cLoopConditionComparaisonParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(statement+=Statement)*
		public Assignment getStatementAssignment_5() { return cStatementAssignment_5; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_5_0() { return cStatementStatementParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ForLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.ForLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLoopConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLoopConditionComparaisonParserRuleCall_2_0 = (RuleCall)cLoopConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementStatementParserRuleCall_5_0 = (RuleCall)cStatementAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ForLoop returns ForLoop:
		//    'for'
		//    '(' loopCondition=Comparaison')'
		//    '{'
		//        (statement+=Statement)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'for'
		//'(' loopCondition=Comparaison')'
		//'{'
		//    (statement+=Statement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//loopCondition=Comparaison
		public Assignment getLoopConditionAssignment_2() { return cLoopConditionAssignment_2; }
		
		//Comparaison
		public RuleCall getLoopConditionComparaisonParserRuleCall_2_0() { return cLoopConditionComparaisonParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(statement+=Statement)*
		public Assignment getStatementAssignment_5() { return cStatementAssignment_5; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_5_0() { return cStatementStatementParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class SubstarctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Substarction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Substarction returns Substarction:
		//    '('
		//        left=Expression
		//        '-'
		//        right=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '-'
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class GTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.GT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GT returns GT:
		//    '('
		//        left=Expression
		//        '>'
		//        right=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '>'
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.LT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LT returns LT:
		//    '('
		//        left=Expression
		//        '<'
		//        right=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '<'
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Equal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Equal returns Equal:
		//    '('
		//        left=Expression
		//        '=='
		//        right=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '=='
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AssignementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Assignement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightExpressionParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		
		//Assignement returns Assignement:
		//        'left' left=Expression
		//        '='
		//        'right' right=Expression
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'left' left=Expression
		//'='
		//'right' right=Expression
		public Group getGroup() { return cGroup; }
		
		//'left'
		public Keyword getLeftKeyword_0() { return cLeftKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'right'
		public Keyword getRightKeyword_3() { return cRightKeyword_3; }
		
		//right=Expression
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_4_0() { return cRightExpressionParserRuleCall_4_0; }
	}
	public class LeIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.leInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLeIntegerAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsConstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsConstIsConstKeyword_1_0 = (Keyword)cIsConstAssignment_1.eContents().get(0);
		private final Keyword cIntKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cInitialeValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInitialeValueEIntParserRuleCall_4_0 = (RuleCall)cInitialeValueAssignment_4.eContents().get(0);
		
		//leInteger returns leInteger:
		//    {leInteger}
		//    (isConst?='isConst')?
		//    'int'
		//    name=EString
		//        (initialeValue=EInt)?
		//        ;
		@Override public ParserRule getRule() { return rule; }
		
		//{leInteger}
		//(isConst?='isConst')?
		//'int'
		//name=EString
		//    (initialeValue=EInt)?
		public Group getGroup() { return cGroup; }
		
		//{leInteger}
		public Action getLeIntegerAction_0() { return cLeIntegerAction_0; }
		
		//(isConst?='isConst')?
		public Assignment getIsConstAssignment_1() { return cIsConstAssignment_1; }
		
		//'isConst'
		public Keyword getIsConstIsConstKeyword_1_0() { return cIsConstIsConstKeyword_1_0; }
		
		//'int'
		public Keyword getIntKeyword_2() { return cIntKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//(initialeValue=EInt)?
		public Assignment getInitialeValueAssignment_4() { return cInitialeValueAssignment_4; }
		
		//EInt
		public RuleCall getInitialeValueEIntParserRuleCall_4_0() { return cInitialeValueEIntParserRuleCall_4_0; }
	}
	public class LeStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.leString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLeStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cInitialeValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitialeValueEStringParserRuleCall_3_0 = (RuleCall)cInitialeValueAssignment_3.eContents().get(0);
		
		//leString returns leString:
		//    {leString}
		//    'string'
		//    name=EString
		//        ( initialeValue=EString)?
		//        ;
		@Override public ParserRule getRule() { return rule; }
		
		//{leString}
		//'string'
		//name=EString
		//    ( initialeValue=EString)?
		public Group getGroup() { return cGroup; }
		
		//{leString}
		public Action getLeStringAction_0() { return cLeStringAction_0; }
		
		//'string'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//( initialeValue=EString)?
		public Assignment getInitialeValueAssignment_3() { return cInitialeValueAssignment_3; }
		
		//EString
		public RuleCall getInitialeValueEStringParserRuleCall_3_0() { return cInitialeValueEStringParserRuleCall_3_0; }
	}
	public class LeBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.leBoolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLeBooleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBooleanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cInitialeValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitialeValueEBooleanParserRuleCall_3_0 = (RuleCall)cInitialeValueAssignment_3.eContents().get(0);
		
		//leBoolean returns leBoolean:
		//    {leBoolean}
		//    'boolean'
		//    name=EString
		//        ( initialeValue=EBoolean)?
		//        ;
		@Override public ParserRule getRule() { return rule; }
		
		//{leBoolean}
		//'boolean'
		//name=EString
		//    ( initialeValue=EBoolean)?
		public Group getGroup() { return cGroup; }
		
		//{leBoolean}
		public Action getLeBooleanAction_0() { return cLeBooleanAction_0; }
		
		//'boolean'
		public Keyword getBooleanKeyword_1() { return cBooleanKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//( initialeValue=EBoolean)?
		public Assignment getInitialeValueAssignment_3() { return cInitialeValueAssignment_3; }
		
		//EBoolean
		public RuleCall getInitialeValueEBooleanParserRuleCall_3_0() { return cInitialeValueEBooleanParserRuleCall_3_0; }
	}
	public class LeFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.leFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLeFloatAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFloatKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cInitialeValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitialeValueEFloatParserRuleCall_3_0 = (RuleCall)cInitialeValueAssignment_3.eContents().get(0);
		
		//leFloat returns leFloat:
		//    {leFloat}
		//    'float'
		//    name=EString
		//        ( initialeValue= EFloat )?
		//        ;
		@Override public ParserRule getRule() { return rule; }
		
		//{leFloat}
		//'float'
		//name=EString
		//    ( initialeValue= EFloat )?
		public Group getGroup() { return cGroup; }
		
		//{leFloat}
		public Action getLeFloatAction_0() { return cLeFloatAction_0; }
		
		//'float'
		public Keyword getFloatKeyword_1() { return cFloatKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//( initialeValue= EFloat )?
		public Assignment getInitialeValueAssignment_3() { return cInitialeValueAssignment_3; }
		
		//EFloat
		public RuleCall getInitialeValueEFloatParserRuleCall_3_0() { return cInitialeValueEFloatParserRuleCall_3_0; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameEStringParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		
		//Print returns Print:
		//    {Print}
		//    'print(' (statement+=Statement)? ')'
		//    name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Print}
		//'print(' (statement+=Statement)? ')'
		//name=EString
		public Group getGroup() { return cGroup; }
		
		//{Print}
		public Action getPrintAction_0() { return cPrintAction_0; }
		
		//'print('
		public Keyword getPrintKeyword_1() { return cPrintKeyword_1; }
		
		//(statement+=Statement)?
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_0() { return cStatementStatementParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//name=EString
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_4_0() { return cNameEStringParserRuleCall_4_0; }
	}
	public class Variable_ProxyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Variable_Proxy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariable_ProxyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cVariableKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVariableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cVariableVariableCrossReference_4_0 = (CrossReference)cVariableAssignment_4.eContents().get(0);
		private final RuleCall cVariableVariableEStringParserRuleCall_4_0_1 = (RuleCall)cVariableVariableCrossReference_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Variable_Proxy returns Variable_Proxy:
		//    'Variable_Proxy'
		//    name=EString
		//    '{'
		//        'Variable' Variable=[Variable|EString]
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Variable_Proxy'
		//name=EString
		//'{'
		//    'Variable' Variable=[Variable|EString]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Variable_Proxy'
		public Keyword getVariable_ProxyKeyword_0() { return cVariable_ProxyKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'Variable'
		public Keyword getVariableKeyword_3() { return cVariableKeyword_3; }
		
		//Variable=[Variable|EString]
		public Assignment getVariableAssignment_4() { return cVariableAssignment_4; }
		
		//[Variable|EString]
		public CrossReference getVariableVariableCrossReference_4_0() { return cVariableVariableCrossReference_4_0; }
		
		//EString
		public RuleCall getVariableVariableEStringParserRuleCall_4_0_1() { return cVariableVariableEStringParserRuleCall_4_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//EFloat returns ecore::EFloat:
		//    INT '.' INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	
	
	private final ProgramElements pProgram;
	private final StatementElements pStatement;
	private final ComparaisonElements pComparaison;
	private final ExpressionElements pExpression;
	private final VariableElements pVariable;
	private final WhileLoopElements pWhileLoop;
	private final ForLoopElements pForLoop;
	private final SubstarctionElements pSubstarction;
	private final GTElements pGT;
	private final LTElements pLT;
	private final EqualElements pEqual;
	private final AssignementElements pAssignement;
	private final LeIntegerElements pLeInteger;
	private final LeStringElements pLeString;
	private final LeBooleanElements pLeBoolean;
	private final LeFloatElements pLeFloat;
	private final PrintElements pPrint;
	private final Variable_ProxyElements pVariable_Proxy;
	private final EBooleanElements pEBoolean;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	private final EFloatElements pEFloat;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UduvGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pStatement = new StatementElements();
		this.pComparaison = new ComparaisonElements();
		this.pExpression = new ExpressionElements();
		this.pVariable = new VariableElements();
		this.pWhileLoop = new WhileLoopElements();
		this.pForLoop = new ForLoopElements();
		this.pSubstarction = new SubstarctionElements();
		this.pGT = new GTElements();
		this.pLT = new LTElements();
		this.pEqual = new EqualElements();
		this.pAssignement = new AssignementElements();
		this.pLeInteger = new LeIntegerElements();
		this.pLeString = new LeStringElements();
		this.pLeBoolean = new LeBooleanElements();
		this.pLeFloat = new LeFloatElements();
		this.pPrint = new PrintElements();
		this.pVariable_Proxy = new Variable_ProxyElements();
		this.pEBoolean = new EBooleanElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
		this.pEFloat = new EFloatElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.univcotedazur.l3ia.legolanguage.xtext.Uduv".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program returns Program:
	//    {Program}
	//    'Program'
	//    name=EString
	//    '{'
	//        ('statement' '{' statement+=Statement ( "," statement+=Statement)* '}' )?
	//    '}';
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Statement returns Statement:
	//    WhileLoop | Substarction | GT | Assignement | leInteger | leString | LT | ForLoop | Variable_Proxy | Print;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Comparaison returns Comparaison:
	//    GT | LT | Equal;
	public ComparaisonElements getComparaisonAccess() {
		return pComparaison;
	}
	
	public ParserRule getComparaisonRule() {
		return getComparaisonAccess().getRule();
	}
	
	//Expression returns Expression:
	//    Substarction | GT | Assignement | LT  | Variable_Proxy;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Variable returns Variable:
	//    leInteger | leString | leFloat | leBoolean;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//WhileLoop returns WhileLoop:
	//    'while'
	//    '(' loopCondition=Comparaison')'
	//    '{'
	//        (statement+=Statement)*
	//    '}';
	public WhileLoopElements getWhileLoopAccess() {
		return pWhileLoop;
	}
	
	public ParserRule getWhileLoopRule() {
		return getWhileLoopAccess().getRule();
	}
	
	//ForLoop returns ForLoop:
	//    'for'
	//    '(' loopCondition=Comparaison')'
	//    '{'
	//        (statement+=Statement)*
	//    '}';
	public ForLoopElements getForLoopAccess() {
		return pForLoop;
	}
	
	public ParserRule getForLoopRule() {
		return getForLoopAccess().getRule();
	}
	
	//Substarction returns Substarction:
	//    '('
	//        left=Expression
	//        '-'
	//        right=Expression
	//    ')';
	public SubstarctionElements getSubstarctionAccess() {
		return pSubstarction;
	}
	
	public ParserRule getSubstarctionRule() {
		return getSubstarctionAccess().getRule();
	}
	
	//GT returns GT:
	//    '('
	//        left=Expression
	//        '>'
	//        right=Expression
	//    ')';
	public GTElements getGTAccess() {
		return pGT;
	}
	
	public ParserRule getGTRule() {
		return getGTAccess().getRule();
	}
	
	//LT returns LT:
	//    '('
	//        left=Expression
	//        '<'
	//        right=Expression
	//    ')';
	public LTElements getLTAccess() {
		return pLT;
	}
	
	public ParserRule getLTRule() {
		return getLTAccess().getRule();
	}
	
	//Equal returns Equal:
	//    '('
	//        left=Expression
	//        '=='
	//        right=Expression
	//    ')';
	public EqualElements getEqualAccess() {
		return pEqual;
	}
	
	public ParserRule getEqualRule() {
		return getEqualAccess().getRule();
	}
	
	//Assignement returns Assignement:
	//        'left' left=Expression
	//        '='
	//        'right' right=Expression
	//    ;
	public AssignementElements getAssignementAccess() {
		return pAssignement;
	}
	
	public ParserRule getAssignementRule() {
		return getAssignementAccess().getRule();
	}
	
	//leInteger returns leInteger:
	//    {leInteger}
	//    (isConst?='isConst')?
	//    'int'
	//    name=EString
	//        (initialeValue=EInt)?
	//        ;
	public LeIntegerElements getLeIntegerAccess() {
		return pLeInteger;
	}
	
	public ParserRule getLeIntegerRule() {
		return getLeIntegerAccess().getRule();
	}
	
	//leString returns leString:
	//    {leString}
	//    'string'
	//    name=EString
	//        ( initialeValue=EString)?
	//        ;
	public LeStringElements getLeStringAccess() {
		return pLeString;
	}
	
	public ParserRule getLeStringRule() {
		return getLeStringAccess().getRule();
	}
	
	//leBoolean returns leBoolean:
	//    {leBoolean}
	//    'boolean'
	//    name=EString
	//        ( initialeValue=EBoolean)?
	//        ;
	public LeBooleanElements getLeBooleanAccess() {
		return pLeBoolean;
	}
	
	public ParserRule getLeBooleanRule() {
		return getLeBooleanAccess().getRule();
	}
	
	//leFloat returns leFloat:
	//    {leFloat}
	//    'float'
	//    name=EString
	//        ( initialeValue= EFloat )?
	//        ;
	public LeFloatElements getLeFloatAccess() {
		return pLeFloat;
	}
	
	public ParserRule getLeFloatRule() {
		return getLeFloatAccess().getRule();
	}
	
	//Print returns Print:
	//    {Print}
	//    'print(' (statement+=Statement)? ')'
	//    name=EString;
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	//Variable_Proxy returns Variable_Proxy:
	//    'Variable_Proxy'
	//    name=EString
	//    '{'
	//        'Variable' Variable=[Variable|EString]
	//    '}';
	public Variable_ProxyElements getVariable_ProxyAccess() {
		return pVariable_Proxy;
	}
	
	public ParserRule getVariable_ProxyRule() {
		return getVariable_ProxyAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EFloat returns ecore::EFloat:
	//    INT '.' INT
	//;
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
