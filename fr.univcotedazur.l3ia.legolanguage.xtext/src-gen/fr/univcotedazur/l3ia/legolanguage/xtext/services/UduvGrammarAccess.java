/*
 * generated by Xtext 2.25.0
 */
package fr.univcotedazur.l3ia.legolanguage.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UduvGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		
		//Program returns Program:
		//    {Program}
		//        (statement+=Statement)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Program}
		//    (statement+=Statement)*
		public Group getGroup() { return cGroup; }
		
		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }
		
		//(statement+=Statement)*
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLoopParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComparaisonParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCalculParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAssignementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cVariableProxyParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPrintParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cCommentaryParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Statement returns Statement:
		//    If | Loop  | Comparaison | Calcul | Assignement | VariableProxy | Print | Expression | Commentary;
		@Override public ParserRule getRule() { return rule; }
		
		//If | Loop  | Comparaison | Calcul | Assignement | VariableProxy | Print | Expression | Commentary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//If
		public RuleCall getIfParserRuleCall_0() { return cIfParserRuleCall_0; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_1() { return cLoopParserRuleCall_1; }
		
		//Comparaison
		public RuleCall getComparaisonParserRuleCall_2() { return cComparaisonParserRuleCall_2; }
		
		//Calcul
		public RuleCall getCalculParserRuleCall_3() { return cCalculParserRuleCall_3; }
		
		//Assignement
		public RuleCall getAssignementParserRuleCall_4() { return cAssignementParserRuleCall_4; }
		
		//VariableProxy
		public RuleCall getVariableProxyParserRuleCall_5() { return cVariableProxyParserRuleCall_5; }
		
		//Print
		public RuleCall getPrintParserRuleCall_6() { return cPrintParserRuleCall_6; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_7() { return cExpressionParserRuleCall_7; }
		
		//Commentary
		public RuleCall getCommentaryParserRuleCall_8() { return cCommentaryParserRuleCall_8; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableProxyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCalculParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cComparaisonParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Expression returns Expression:
		//     Assignement | VariableProxy | Variable | Calcul | Comparaison ;
		@Override public ParserRule getRule() { return rule; }
		
		//Assignement | VariableProxy | Variable | Calcul | Comparaison
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Assignement
		public RuleCall getAssignementParserRuleCall_0() { return cAssignementParserRuleCall_0; }
		
		//VariableProxy
		public RuleCall getVariableProxyParserRuleCall_1() { return cVariableProxyParserRuleCall_1; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_2() { return cVariableParserRuleCall_2; }
		
		//Calcul
		public RuleCall getCalculParserRuleCall_3() { return cCalculParserRuleCall_3; }
		
		//Comparaison
		public RuleCall getComparaisonParserRuleCall_4() { return cComparaisonParserRuleCall_4; }
	}
	public class CalculElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Calcul");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubstarctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDivisionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExponentialParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMultiplicationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Calcul returns Calcul :
		//    Substarction | Addition | Division | Exponential | Multiplication ;
		@Override public ParserRule getRule() { return rule; }
		
		//Substarction | Addition | Division | Exponential | Multiplication
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Substarction
		public RuleCall getSubstarctionParserRuleCall_0() { return cSubstarctionParserRuleCall_0; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_1() { return cAdditionParserRuleCall_1; }
		
		//Division
		public RuleCall getDivisionParserRuleCall_2() { return cDivisionParserRuleCall_2; }
		
		//Exponential
		public RuleCall getExponentialParserRuleCall_3() { return cExponentialParserRuleCall_3; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_4() { return cMultiplicationParserRuleCall_4; }
	}
	public class ComparaisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Comparaison");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGTParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEqualParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGTEqualParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLTEqualParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Comparaison returns Comparaison:
		//    GT | LT | Equal | GTEqual | LTEqual ;
		@Override public ParserRule getRule() { return rule; }
		
		//GT | LT | Equal | GTEqual | LTEqual
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GT
		public RuleCall getGTParserRuleCall_0() { return cGTParserRuleCall_0; }
		
		//LT
		public RuleCall getLTParserRuleCall_1() { return cLTParserRuleCall_1; }
		
		//Equal
		public RuleCall getEqualParserRuleCall_2() { return cEqualParserRuleCall_2; }
		
		//GTEqual
		public RuleCall getGTEqualParserRuleCall_3() { return cGTEqualParserRuleCall_3; }
		
		//LTEqual
		public RuleCall getLTEqualParserRuleCall_4() { return cLTEqualParserRuleCall_4; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLeIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLeStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLeFloatParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLeBooleanParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Variable returns Variable:
		//    LeInteger | LeString | LeFloat | LeBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//LeInteger | LeString | LeFloat | LeBoolean
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LeInteger
		public RuleCall getLeIntegerParserRuleCall_0() { return cLeIntegerParserRuleCall_0; }
		
		//LeString
		public RuleCall getLeStringParserRuleCall_1() { return cLeStringParserRuleCall_1; }
		
		//LeFloat
		public RuleCall getLeFloatParserRuleCall_2() { return cLeFloatParserRuleCall_2; }
		
		//LeBoolean
		public RuleCall getLeBooleanParserRuleCall_3() { return cLeBooleanParserRuleCall_3; }
	}
	public class CommentaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Commentary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommentaryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cApostropheApostropheApostropheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitialeValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitialeValueEStringParserRuleCall_2_0 = (RuleCall)cInitialeValueAssignment_2.eContents().get(0);
		private final Keyword cApostropheApostropheApostropheKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Commentary returns Commentary:
		//    {Commentary}
		//    '\'\'\''
		//        initialeValue=EString
		//    '\'\'\'';
		@Override public ParserRule getRule() { return rule; }
		
		//{Commentary}
		//'\'\'\''
		//    initialeValue=EString
		//'\'\'\''
		public Group getGroup() { return cGroup; }
		
		//{Commentary}
		public Action getCommentaryAction_0() { return cCommentaryAction_0; }
		
		//'\'\'\''
		public Keyword getApostropheApostropheApostropheKeyword_1() { return cApostropheApostropheApostropheKeyword_1; }
		
		//initialeValue=EString
		public Assignment getInitialeValueAssignment_2() { return cInitialeValueAssignment_2; }
		
		//EString
		public RuleCall getInitialeValueEStringParserRuleCall_2_0() { return cInitialeValueEStringParserRuleCall_2_0; }
		
		//'\'\'\''
		public Keyword getApostropheApostropheApostropheKeyword_3() { return cApostropheApostropheApostropheKeyword_3; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Loop");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWhileLoopParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForLoopParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Loop returns Loop :
		//    WhileLoop | ForLoop  ;
		@Override public ParserRule getRule() { return rule; }
		
		//WhileLoop | ForLoop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WhileLoop
		public RuleCall getWhileLoopParserRuleCall_0() { return cWhileLoopParserRuleCall_0; }
		
		//ForLoop
		public RuleCall getForLoopParserRuleCall_1() { return cForLoopParserRuleCall_1; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionComparaisonParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//If returns If :
		//    'if'
		//    condition=Comparaison
		//    '{'
		//        (statement+=Statement)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'if'
		//condition=Comparaison
		//'{'
		//    (statement+=Statement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=Comparaison
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Comparaison
		public RuleCall getConditionComparaisonParserRuleCall_1_0() { return cConditionComparaisonParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(statement+=Statement)*
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_0() { return cStatementStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class WhileLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.WhileLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLoopConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLoopConditionComparaisonParserRuleCall_1_0 = (RuleCall)cLoopConditionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WhileLoop returns WhileLoop:
		//    'while'
		//     loopCondition=Comparaison
		//    '{'
		//        (statement+=Statement)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'while'
		// loopCondition=Comparaison
		//'{'
		//    (statement+=Statement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//loopCondition=Comparaison
		public Assignment getLoopConditionAssignment_1() { return cLoopConditionAssignment_1; }
		
		//Comparaison
		public RuleCall getLoopConditionComparaisonParserRuleCall_1_0() { return cLoopConditionComparaisonParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(statement+=Statement)*
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_0() { return cStatementStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ForLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.ForLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLoopConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLoopConditionComparaisonParserRuleCall_1_0 = (RuleCall)cLoopConditionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ForLoop returns ForLoop:
		//    'for'
		//    loopCondition=Comparaison
		//    '{'
		//        (statement+=Statement)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'for'
		//loopCondition=Comparaison
		//'{'
		//    (statement+=Statement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//loopCondition=Comparaison
		public Assignment getLoopConditionAssignment_1() { return cLoopConditionAssignment_1; }
		
		//Comparaison
		public RuleCall getLoopConditionComparaisonParserRuleCall_1_0() { return cLoopConditionComparaisonParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(statement+=Statement)*
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_0() { return cStatementStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Addition returns Addition:
		//    '('
		//        left=Expression
		//        '+'
		//        right=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '+'
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class SubstarctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Substarction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Substarction returns Substarction:
		//    '('
		//        left=Expression
		//        '-'
		//        right=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '-'
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Division");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Division returns Division:
		//    '('
		//        left=Expression
		//        '/'
		//        right=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '/'
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ExponentialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Exponential");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Exponential returns Exponential:
		//    '('
		//        left=Expression
		//        '^'
		//        right=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '^'
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_2() { return cCircumflexAccentKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Multiplication returns Multiplication:
		//    '('
		//        left=Expression
		//        '*'
		//        right=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '*'
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class GTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.GT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GT returns GT:
		//    '('
		//        left=Expression
		//        '>'
		//        right=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '>'
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class GTEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.GTEqual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GTEqual returns GTEqual:
		//    '('
		//        left=Expression
		//        '>='
		//        right=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '>='
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.LT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LT returns LT:
		//    '('
		//        left=Expression
		//        '<'
		//        right=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '<'
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LTEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.LTEqual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LTEqual returns LTEqual:
		//    '('
		//        left=Expression
		//        '<='
		//        right=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '<='
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Equal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Equal returns Equal:
		//    '('
		//        left=Expression
		//        '=='
		//        right=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '=='
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AssignementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Assignement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Assignement returns Assignement:
		//    '('
		//        left=Expression
		//        '='
		//         right=Expression
		//    ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    left=Expression
		//    '='
		//     right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LeIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.LeInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLeIntegerAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIntKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cInitialeValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitialeValueEIntParserRuleCall_2_0 = (RuleCall)cInitialeValueAssignment_2.eContents().get(0);
		
		//LeInteger returns LeInteger:
		//    {LeInteger}
		//    ('int' name=EString '=')?
		//        initialeValue=EInt
		//        ;
		@Override public ParserRule getRule() { return rule; }
		
		//{LeInteger}
		//('int' name=EString '=')?
		//    initialeValue=EInt
		public Group getGroup() { return cGroup; }
		
		//{LeInteger}
		public Action getLeIntegerAction_0() { return cLeIntegerAction_0; }
		
		//('int' name=EString '=')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'int'
		public Keyword getIntKeyword_1_0() { return cIntKeyword_1_0; }
		
		//name=EString
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_1_0() { return cNameEStringParserRuleCall_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }
		
		//initialeValue=EInt
		public Assignment getInitialeValueAssignment_2() { return cInitialeValueAssignment_2; }
		
		//EInt
		public RuleCall getInitialeValueEIntParserRuleCall_2_0() { return cInitialeValueEIntParserRuleCall_2_0; }
	}
	public class LeStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.LeString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLeStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cStringKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cInitialeValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitialeValueEStringParserRuleCall_2_0 = (RuleCall)cInitialeValueAssignment_2.eContents().get(0);
		
		//LeString returns LeString:
		//    {LeString}
		//    ('string' name=EString '=')?
		//        initialeValue=EString
		//        ;
		@Override public ParserRule getRule() { return rule; }
		
		//{LeString}
		//('string' name=EString '=')?
		//    initialeValue=EString
		public Group getGroup() { return cGroup; }
		
		//{LeString}
		public Action getLeStringAction_0() { return cLeStringAction_0; }
		
		//('string' name=EString '=')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'string'
		public Keyword getStringKeyword_1_0() { return cStringKeyword_1_0; }
		
		//name=EString
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_1_0() { return cNameEStringParserRuleCall_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }
		
		//initialeValue=EString
		public Assignment getInitialeValueAssignment_2() { return cInitialeValueAssignment_2; }
		
		//EString
		public RuleCall getInitialeValueEStringParserRuleCall_2_0() { return cInitialeValueEStringParserRuleCall_2_0; }
	}
	public class LeBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.LeBoolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLeBooleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cBooleanKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cInitialeValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitialeValueEBooleanParserRuleCall_2_0 = (RuleCall)cInitialeValueAssignment_2.eContents().get(0);
		
		//LeBoolean returns LeBoolean:
		//    {LeBoolean}
		//    ('boolean' name=EString '=')?
		//         initialeValue=EBoolean
		//        ;
		@Override public ParserRule getRule() { return rule; }
		
		//{LeBoolean}
		//('boolean' name=EString '=')?
		//     initialeValue=EBoolean
		public Group getGroup() { return cGroup; }
		
		//{LeBoolean}
		public Action getLeBooleanAction_0() { return cLeBooleanAction_0; }
		
		//('boolean' name=EString '=')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'boolean'
		public Keyword getBooleanKeyword_1_0() { return cBooleanKeyword_1_0; }
		
		//name=EString
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_1_0() { return cNameEStringParserRuleCall_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }
		
		//initialeValue=EBoolean
		public Assignment getInitialeValueAssignment_2() { return cInitialeValueAssignment_2; }
		
		//EBoolean
		public RuleCall getInitialeValueEBooleanParserRuleCall_2_0() { return cInitialeValueEBooleanParserRuleCall_2_0; }
	}
	public class LeFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.LeFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLeFloatAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFloatKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cInitialeValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitialeValueEFloatParserRuleCall_2_0 = (RuleCall)cInitialeValueAssignment_2.eContents().get(0);
		
		//LeFloat returns LeFloat:
		//    {LeFloat}
		//    ('float' name=EString '=')?
		//         initialeValue= EFloat
		//        ;
		@Override public ParserRule getRule() { return rule; }
		
		//{LeFloat}
		//('float' name=EString '=')?
		//     initialeValue= EFloat
		public Group getGroup() { return cGroup; }
		
		//{LeFloat}
		public Action getLeFloatAction_0() { return cLeFloatAction_0; }
		
		//('float' name=EString '=')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'float'
		public Keyword getFloatKeyword_1_0() { return cFloatKeyword_1_0; }
		
		//name=EString
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_1_0() { return cNameEStringParserRuleCall_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }
		
		//initialeValue= EFloat
		public Assignment getInitialeValueAssignment_2() { return cInitialeValueAssignment_2; }
		
		//EFloat
		public RuleCall getInitialeValueEFloatParserRuleCall_2_0() { return cInitialeValueEFloatParserRuleCall_2_0; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Print returns Print:
		//    {Print}
		//    'print' '(' (statement+=Statement)? ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Print}
		//'print' '(' (statement+=Statement)? ')'
		public Group getGroup() { return cGroup; }
		
		//{Print}
		public Action getPrintAction_0() { return cPrintAction_0; }
		
		//'print'
		public Keyword getPrintKeyword_1() { return cPrintKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(statement+=Statement)?
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_0() { return cStatementStatementParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class VariableProxyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.VariableProxy");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_0 = (CrossReference)cVariableAssignment.eContents().get(0);
		private final RuleCall cVariableVariableEStringParserRuleCall_0_1 = (RuleCall)cVariableVariableCrossReference_0.eContents().get(1);
		
		//VariableProxy returns VariableProxy:
		//    variable=[Variable|EString]
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[Variable|EString]
		public Assignment getVariableAssignment() { return cVariableAssignment; }
		
		//[Variable|EString]
		public CrossReference getVariableVariableCrossReference_0() { return cVariableVariableCrossReference_0; }
		
		//EString
		public RuleCall getVariableVariableEStringParserRuleCall_0_1() { return cVariableVariableEStringParserRuleCall_0_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'True' | 'False';
		@Override public ParserRule getRule() { return rule; }
		
		//'True' | 'False'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'True'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'False'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//EFloat returns ecore::EFloat:
		//    INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	
	
	private final ProgramElements pProgram;
	private final StatementElements pStatement;
	private final ExpressionElements pExpression;
	private final CalculElements pCalcul;
	private final ComparaisonElements pComparaison;
	private final VariableElements pVariable;
	private final CommentaryElements pCommentary;
	private final LoopElements pLoop;
	private final IfElements pIf;
	private final WhileLoopElements pWhileLoop;
	private final ForLoopElements pForLoop;
	private final AdditionElements pAddition;
	private final SubstarctionElements pSubstarction;
	private final DivisionElements pDivision;
	private final ExponentialElements pExponential;
	private final MultiplicationElements pMultiplication;
	private final GTElements pGT;
	private final GTEqualElements pGTEqual;
	private final LTElements pLT;
	private final LTEqualElements pLTEqual;
	private final EqualElements pEqual;
	private final AssignementElements pAssignement;
	private final LeIntegerElements pLeInteger;
	private final LeStringElements pLeString;
	private final LeBooleanElements pLeBoolean;
	private final LeFloatElements pLeFloat;
	private final PrintElements pPrint;
	private final VariableProxyElements pVariableProxy;
	private final EBooleanElements pEBoolean;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	private final EFloatElements pEFloat;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UduvGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pStatement = new StatementElements();
		this.pExpression = new ExpressionElements();
		this.pCalcul = new CalculElements();
		this.pComparaison = new ComparaisonElements();
		this.pVariable = new VariableElements();
		this.pCommentary = new CommentaryElements();
		this.pLoop = new LoopElements();
		this.pIf = new IfElements();
		this.pWhileLoop = new WhileLoopElements();
		this.pForLoop = new ForLoopElements();
		this.pAddition = new AdditionElements();
		this.pSubstarction = new SubstarctionElements();
		this.pDivision = new DivisionElements();
		this.pExponential = new ExponentialElements();
		this.pMultiplication = new MultiplicationElements();
		this.pGT = new GTElements();
		this.pGTEqual = new GTEqualElements();
		this.pLT = new LTElements();
		this.pLTEqual = new LTEqualElements();
		this.pEqual = new EqualElements();
		this.pAssignement = new AssignementElements();
		this.pLeInteger = new LeIntegerElements();
		this.pLeString = new LeStringElements();
		this.pLeBoolean = new LeBooleanElements();
		this.pLeFloat = new LeFloatElements();
		this.pPrint = new PrintElements();
		this.pVariableProxy = new VariableProxyElements();
		this.pEBoolean = new EBooleanElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
		this.pEFloat = new EFloatElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.univcotedazur.l3ia.legolanguage.xtext.Uduv".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program returns Program:
	//    {Program}
	//        (statement+=Statement)*
	//;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Statement returns Statement:
	//    If | Loop  | Comparaison | Calcul | Assignement | VariableProxy | Print | Expression | Commentary;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Expression returns Expression:
	//     Assignement | VariableProxy | Variable | Calcul | Comparaison ;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Calcul returns Calcul :
	//    Substarction | Addition | Division | Exponential | Multiplication ;
	public CalculElements getCalculAccess() {
		return pCalcul;
	}
	
	public ParserRule getCalculRule() {
		return getCalculAccess().getRule();
	}
	
	//Comparaison returns Comparaison:
	//    GT | LT | Equal | GTEqual | LTEqual ;
	public ComparaisonElements getComparaisonAccess() {
		return pComparaison;
	}
	
	public ParserRule getComparaisonRule() {
		return getComparaisonAccess().getRule();
	}
	
	//Variable returns Variable:
	//    LeInteger | LeString | LeFloat | LeBoolean;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Commentary returns Commentary:
	//    {Commentary}
	//    '\'\'\''
	//        initialeValue=EString
	//    '\'\'\'';
	public CommentaryElements getCommentaryAccess() {
		return pCommentary;
	}
	
	public ParserRule getCommentaryRule() {
		return getCommentaryAccess().getRule();
	}
	
	//Loop returns Loop :
	//    WhileLoop | ForLoop  ;
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//If returns If :
	//    'if'
	//    condition=Comparaison
	//    '{'
	//        (statement+=Statement)*
	//    '}';
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//WhileLoop returns WhileLoop:
	//    'while'
	//     loopCondition=Comparaison
	//    '{'
	//        (statement+=Statement)*
	//    '}';
	public WhileLoopElements getWhileLoopAccess() {
		return pWhileLoop;
	}
	
	public ParserRule getWhileLoopRule() {
		return getWhileLoopAccess().getRule();
	}
	
	//ForLoop returns ForLoop:
	//    'for'
	//    loopCondition=Comparaison
	//    '{'
	//        (statement+=Statement)*
	//    '}';
	public ForLoopElements getForLoopAccess() {
		return pForLoop;
	}
	
	public ParserRule getForLoopRule() {
		return getForLoopAccess().getRule();
	}
	
	//Addition returns Addition:
	//    '('
	//        left=Expression
	//        '+'
	//        right=Expression
	//    ')';
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Substarction returns Substarction:
	//    '('
	//        left=Expression
	//        '-'
	//        right=Expression
	//    ')';
	public SubstarctionElements getSubstarctionAccess() {
		return pSubstarction;
	}
	
	public ParserRule getSubstarctionRule() {
		return getSubstarctionAccess().getRule();
	}
	
	//Division returns Division:
	//    '('
	//        left=Expression
	//        '/'
	//        right=Expression
	//    ')';
	public DivisionElements getDivisionAccess() {
		return pDivision;
	}
	
	public ParserRule getDivisionRule() {
		return getDivisionAccess().getRule();
	}
	
	//Exponential returns Exponential:
	//    '('
	//        left=Expression
	//        '^'
	//        right=Expression
	//    ')';
	public ExponentialElements getExponentialAccess() {
		return pExponential;
	}
	
	public ParserRule getExponentialRule() {
		return getExponentialAccess().getRule();
	}
	
	//Multiplication returns Multiplication:
	//    '('
	//        left=Expression
	//        '*'
	//        right=Expression
	//    ')';
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//GT returns GT:
	//    '('
	//        left=Expression
	//        '>'
	//        right=Expression
	//    ')';
	public GTElements getGTAccess() {
		return pGT;
	}
	
	public ParserRule getGTRule() {
		return getGTAccess().getRule();
	}
	
	//GTEqual returns GTEqual:
	//    '('
	//        left=Expression
	//        '>='
	//        right=Expression
	//    ')';
	public GTEqualElements getGTEqualAccess() {
		return pGTEqual;
	}
	
	public ParserRule getGTEqualRule() {
		return getGTEqualAccess().getRule();
	}
	
	//LT returns LT:
	//    '('
	//        left=Expression
	//        '<'
	//        right=Expression
	//    ')';
	public LTElements getLTAccess() {
		return pLT;
	}
	
	public ParserRule getLTRule() {
		return getLTAccess().getRule();
	}
	
	//LTEqual returns LTEqual:
	//    '('
	//        left=Expression
	//        '<='
	//        right=Expression
	//    ')';
	public LTEqualElements getLTEqualAccess() {
		return pLTEqual;
	}
	
	public ParserRule getLTEqualRule() {
		return getLTEqualAccess().getRule();
	}
	
	//Equal returns Equal:
	//    '('
	//        left=Expression
	//        '=='
	//        right=Expression
	//    ')';
	public EqualElements getEqualAccess() {
		return pEqual;
	}
	
	public ParserRule getEqualRule() {
		return getEqualAccess().getRule();
	}
	
	//Assignement returns Assignement:
	//    '('
	//        left=Expression
	//        '='
	//         right=Expression
	//    ')'
	//    ;
	public AssignementElements getAssignementAccess() {
		return pAssignement;
	}
	
	public ParserRule getAssignementRule() {
		return getAssignementAccess().getRule();
	}
	
	//LeInteger returns LeInteger:
	//    {LeInteger}
	//    ('int' name=EString '=')?
	//        initialeValue=EInt
	//        ;
	public LeIntegerElements getLeIntegerAccess() {
		return pLeInteger;
	}
	
	public ParserRule getLeIntegerRule() {
		return getLeIntegerAccess().getRule();
	}
	
	//LeString returns LeString:
	//    {LeString}
	//    ('string' name=EString '=')?
	//        initialeValue=EString
	//        ;
	public LeStringElements getLeStringAccess() {
		return pLeString;
	}
	
	public ParserRule getLeStringRule() {
		return getLeStringAccess().getRule();
	}
	
	//LeBoolean returns LeBoolean:
	//    {LeBoolean}
	//    ('boolean' name=EString '=')?
	//         initialeValue=EBoolean
	//        ;
	public LeBooleanElements getLeBooleanAccess() {
		return pLeBoolean;
	}
	
	public ParserRule getLeBooleanRule() {
		return getLeBooleanAccess().getRule();
	}
	
	//LeFloat returns LeFloat:
	//    {LeFloat}
	//    ('float' name=EString '=')?
	//         initialeValue= EFloat
	//        ;
	public LeFloatElements getLeFloatAccess() {
		return pLeFloat;
	}
	
	public ParserRule getLeFloatRule() {
		return getLeFloatAccess().getRule();
	}
	
	//Print returns Print:
	//    {Print}
	//    'print' '(' (statement+=Statement)? ')'
	//    ;
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	//VariableProxy returns VariableProxy:
	//    variable=[Variable|EString]
	//    ;
	public VariableProxyElements getVariableProxyAccess() {
		return pVariableProxy;
	}
	
	public ParserRule getVariableProxyRule() {
		return getVariableProxyAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'True' | 'False';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EFloat returns ecore::EFloat:
	//    INT '.' INT;
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
