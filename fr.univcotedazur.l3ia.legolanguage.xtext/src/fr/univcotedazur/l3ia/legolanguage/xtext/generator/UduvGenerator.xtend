/*
 * generated by Xtext 2.25.0
 */
package fr.univcotedazur.l3ia.legolanguage.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import fr.univcotedazur.l3ia.langagecompilation.Program
import fr.univcotedazur.l3ia.langagecompilation.Statement
import fr.univcotedazur.l3ia.langagecompilation.Addition
import fr.univcotedazur.l3ia.langagecompilation.Expression
import fr.univcotedazur.l3ia.langagecompilation.LeInteger
import fr.univcotedazur.l3ia.langagecompilation.Variable
import fr.univcotedazur.l3ia.langagecompilation.LeFloat
import fr.univcotedazur.l3ia.langagecompilation.LeString
import fr.univcotedazur.l3ia.langagecompilation.LeBoolean
import fr.univcotedazur.l3ia.langagecompilation.BinaryOperation
import fr.univcotedazur.l3ia.langagecompilation.Assignement
import fr.univcotedazur.l3ia.langagecompilation.Calcul
import fr.univcotedazur.l3ia.langagecompilation.Division
import fr.univcotedazur.l3ia.langagecompilation.Substarction
import fr.univcotedazur.l3ia.langagecompilation.Exponential
import fr.univcotedazur.l3ia.langagecompilation.Multiplication
import fr.univcotedazur.l3ia.langagecompilation.Comparaison
import fr.univcotedazur.l3ia.langagecompilation.GT
import fr.univcotedazur.l3ia.langagecompilation.LT
import fr.univcotedazur.l3ia.langagecompilation.Equal
import fr.univcotedazur.l3ia.langagecompilation.Loop
import fr.univcotedazur.l3ia.langagecompilation.ForLoop
import fr.univcotedazur.l3ia.langagecompilation.WhileLoop
import fr.univcotedazur.l3ia.langagecompilation.Print
import fr.univcotedazur.l3ia.langagecompilation.Commentary
import fr.univcotedazur.l3ia.langagecompilation.If
import fr.univcotedazur.l3ia.langagecompilation.GTEqual
import fr.univcotedazur.l3ia.langagecompilation.LTEqual
import fr.univcotedazur.l3ia.langagecompilation.VariableProxy
import fr.univcotedazur.l3ia.langagecompilation.Robot
import fr.univcotedazur.l3ia.langagecompilation.Motor
import fr.univcotedazur.l3ia.langagecompilation.Actuator
import fr.univcotedazur.l3ia.langagecompilation.Sensor
import fr.univcotedazur.l3ia.langagecompilation.Wheel
import fr.univcotedazur.l3ia.langagecompilation.RotativeMotor
import fr.univcotedazur.l3ia.langagecompilation.Led
import fr.univcotedazur.l3ia.langagecompilation.ShootLauncher
import fr.univcotedazur.l3ia.langagecompilation.Arm
import fr.univcotedazur.l3ia.langagecompilation.ColorSensor
import fr.univcotedazur.l3ia.langagecompilation.LaserSensor
import fr.univcotedazur.l3ia.langagecompilation.GyroSensor
import fr.univcotedazur.l3ia.langagecompilation.GPSSensor
import fr.univcotedazur.l3ia.langagecompilation.Go
import fr.univcotedazur.l3ia.langagecompilation.Turn
import fr.univcotedazur.l3ia.langagecompilation.ChangeAngle
import fr.univcotedazur.l3ia.langagecompilation.ChangeIntensity
import fr.univcotedazur.l3ia.langagecompilation.Shoot
import fr.univcotedazur.l3ia.langagecompilation.Direction
import fr.univcotedazur.l3ia.langagecompilation.GetDistance
import fr.univcotedazur.l3ia.langagecompilation.GetPosition
import fr.univcotedazur.l3ia.langagecompilation.GetGyro
import fr.univcotedazur.l3ia.langagecompilation.GetColor
import fr.univcotedazur.l3ia.langagecompilation.ActuatorStatement
import fr.univcotedazur.l3ia.langagecompilation.SensorExpression
import fr.univcotedazur.l3ia.langagecompilation.And
import fr.univcotedazur.l3ia.langagecompilation.Or

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class UduvGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

	var Program prog = resource.allContents.head as Program 
	var String fileContent = ''
	for (s : prog.statement) {
		fileContent += StatementToString(s)
	}
	
	fsa.generateFile(prog.name + '.py', '#!/usr/bin/env python3
# Import Libraries
import time
import math
from ev3dev2.motor import *
from ev3dev2.sound import Sound
from ev3dev2.button import Button
from ev3dev2.sensor import *
from ev3dev2.sensor.lego import *
from ev3dev2.sensor.virtual import *\n\n' + fileContent )
	}
	var indentation = 0
	
	def String StatementToString(Statement s ) {
		var res = ''
		for (i : 0 ..< indentation){
			res += '\t'
		} 
		
		if (s instanceof Variable) {
			res += VariableToString(s as Variable)
		}else
		if (s instanceof Expression) {
			res += ExpressionToString(s as Expression)
		}else
		if(s instanceof Loop){
			res += LoopToString(s as Loop)
		}else
		if(s instanceof If){
			res += IfToString(s as If)
		}else
		if(s instanceof Robot){
			res += RobotToString(s as Robot)
		}else
		if(s instanceof Actuator){
			res+= ActuatorToString(s as Actuator)
		}else
		if(s instanceof Sensor){
			res+= SensorToString(s as Sensor)
		}else
		if(s instanceof ActuatorStatement){
			res+= ActuatorStatementToString(s as ActuatorStatement) 
		}else
		if(s instanceof Print){
			res += 'print('
			for ( state : s.statement ) {
				res += StatementToString(state as Statement)
			}  
			res += ')'
		}else
		if(s instanceof Commentary){
			res += '\'\'\'' + s.initialeValue + '\'\'\''
		}
		
		
		
		res +=  '\n'
		return res
	}	
	
	def String VariableToString(Variable v) {
		var res = ''
		
		if (v instanceof LeInteger) {	
			res += v.name + ':int = '+ v.initialeValue
		}else
		if (v instanceof LeFloat) {
			res += v.name + ':float = '+ v.initialeValue
		}else
		if (v instanceof LeString) {
			res += v.name + ':str = '+ '\'' + v.initialeValue + '\'' 

		}else
		if (v instanceof LeBoolean) {
		
			if ( v.initialeValue.equals(true) ){
				res += v.name + ':bool = ' + "True"
			}else 
			{
				res += v.name + ':bool = ' + "False"
				
			}
		}
				
			
		return res
	}
	
	def String ExpressionToString(Expression e) {
		var res = ''
		if (e instanceof BinaryOperation) {
			res += BinaryOperationToString(e as BinaryOperation)
		}else 
		if (e instanceof VariableProxy){
			res += e.variable.name
		}else
		if (e instanceof Variable) {
			if (e instanceof LeInteger) {
				res += e.initialeValue
			}else
			if (e instanceof LeFloat) {
				res += e.initialeValue
			}else
			if (e instanceof LeString) {
				res += '\'' + e.initialeValue + '\'' 
	
			}else
			if (e instanceof LeBoolean) {
				if ( e.initialeValue.equals(true) ){
					res += "True"
				}else 
				{
					res += "False"
					
				}
			}
		}else
		if (e instanceof SensorExpression){
			res += SensorExpressionToString(e as SensorExpression)
		} 
		
		return res 
	}
	
	def String LoopToString(Loop l){
		var res = ''
		if(l instanceof ForLoop){
			res += 'for' + ' (' + ExpressionToString(l.loopCondition as Expression) + ') ' +':' + '\n'
			indentation += 1 
			for ( s : l.statement ) {
				res += StatementToString(s as Statement)
			} 
			indentation -= 1
		}
		if(l instanceof WhileLoop){
			
			res += 'while' + ' ('+ ExpressionToString(l.loopCondition as Expression) + ') ' +':' + '\n'
			indentation += 1 
			for ( s : l.statement ) {
				res +=  StatementToString(s as Statement)
			}
			indentation -= 1
		}
		return res 
	}
	
	def String IfToString(If i) {
		var res = ''
		res += 'if' + ' ('+ ExpressionToString(i.condition as Expression) + ') ' +':' + '\n'
		indentation += 1 
		for ( state : i.statement ) {
			res +=  StatementToString(state as Statement)
			}
	indentation -= 1 
	return res 
	
	}
	
	
	def String BinaryOperationToString(BinaryOperation b){
		var res = ''
		if (b instanceof Assignement) {
			res += ExpressionToString(b.left) + '=' + ExpressionToString(b.right)
		}else
		if (b instanceof Calcul) {
			res += CalculToString(b as Calcul)
		}else 
		if (b instanceof Comparaison){
			res += ComparaisonToString(b as Comparaison)
		}
		if (b instanceof And){
			res += ExpressionToString(b.left) + ' and ' + ExpressionToString(b.right)
		}else
		if (b instanceof Or){
			res += ExpressionToString(b.left) + ' or ' + ExpressionToString(b.right)
		}else
		return res
	} 
	
	
	def String CalculToString(Calcul c){
		var res = ''
		if (c instanceof Addition){
			res += ExpressionToString(c.left) + '+' + ExpressionToString(c.right)
		}else
		if (c instanceof Substarction){
			res += ExpressionToString(c.left) + '-' + ExpressionToString(c.right)
		}else
		if (c instanceof Exponential){
			res += ExpressionToString(c.left) + '^' + ExpressionToString(c.right)
		}else
		if (c instanceof Multiplication){
			res += ExpressionToString(c.left) + '*' + ExpressionToString(c.right)
		}else
		if (c instanceof Division){
			res += ExpressionToString(c.left) + '/' + ExpressionToString(c.right)
		}
		
		
		return res
	}
	
	def String ComparaisonToString(Comparaison c){

		var res = ''
		if (c instanceof GT){
			res += ExpressionToString(c.left) + '>' + ExpressionToString(c.right)
		}else
		if (c instanceof LT){
			res += ExpressionToString(c.left) + '<' + ExpressionToString(c.right)
		}else
		if (c instanceof Equal){
			res += ExpressionToString(c.left) + '==' + ExpressionToString(c.right)
		}else
		if (c instanceof GTEqual){
			res += ExpressionToString(c.left) + '>=' + ExpressionToString(c.right)
		}else
		if (c instanceof LTEqual){
			res += ExpressionToString(c.left) + '<=' + ExpressionToString(c.right)
		}
		
		return res
	} 
	
	def String RobotToString(Robot r){
		var res = ''
		for (r_a : r.actuator){
			res += StatementToString(r_a as Actuator)
		}
		for (r_s : r.sensor){
			res += StatementToString(r_s as Sensor)
		}
		
		res += "left" + RotativeMotorToString(r.leftWheel as Wheel) + '\n'
		res += "right" + RotativeMotorToString(r.rightWheel as Wheel) + '\n'
		
		return res
		
	}

		
	def String ActuatorToString(Actuator a){
		var res =''
		if (a instanceof Motor){
			res += MotorToString(a as Motor)
		}else 
		if (a instanceof Led){
			res += "ledMotor"+ a.portID + " = " + "LargeMotor"+"("+a.portID+")"
		}
		return res
	}
	
	def String SensorToString(Sensor s){
		var res =''
		if (s instanceof ColorSensor){
			res += "colorSensor"+ s.portID + " = " + "ColorSensor"+"("+s.portID+")"
		}else
		if ( s instanceof LaserSensor){
			res += "laserSensor"+ s.portID + " = " + "LaserRangeSensor"+"("+s.portID+")"
		}else
		if ( s instanceof GyroSensor){
			res += "gyroSensor"+ s.portID + " = " + "GyroSensor"+"("+s.portID+")"
		}else
		if ( s instanceof GPSSensor){
			res += "gpsSensor"+ s.portID + " = " + "GPSSensor"+"("+s.portID+")"
		}
		return res
	}
	
	def String MotorToString(Motor m){
		var res =''
		if (m instanceof RotativeMotor){
			res += RotativeMotorToString(m as RotativeMotor)
		}else
		if (m instanceof ShootLauncher){
			res += "shootMotor"+ m.portID + " = " + "LargeMotor"+"("+m.portID+")"
		}
		
		return res
	}
	
	def String RotativeMotorToString(RotativeMotor rm ){
		var res = ''
		if (rm instanceof Arm){
			res += "armMotor"+ rm.portID + " = " + "LargeMotor"+"("+rm.portID+")"
		}else
		if (rm instanceof Wheel){
			res += "wheelMotor"+ rm.portID + " = " + "LargeMotor"+"("+rm.portID+")"
			
		}
		return res
	}
	
	def String ActuatorStatementToString(ActuatorStatement rs){
		var res = ''
		if (rs instanceof Go){
			res += 'steering_drive = MoveSteering(' + rs.robot.leftWheel.portID + "," + rs.robot.rightWheel.portID+') ,'
			res += 'steering_drive.on_for_rotations(' +"0, "+ExpressionToString(rs.speed as Expression) + ', ' +ExpressionToString(rs.duration as Expression) + ')'
			}
			if (rs instanceof Turn){
				if (rs.direction.equals(Direction.LEFT) ){
					res += 'steering_drive = MoveSteering(' + rs.robot.leftWheel.portID + "," + rs.robot.rightWheel.portID+') ,'
					res += 'steering_drive.on_for_rotations(' + "-"+ExpressionToString(rs.angle as Expression) +', ' +ExpressionToString(rs.speed as Expression) + ', ' +ExpressionToString(rs.duration as Expression) + ')'
					}else
				if (rs.direction.equals(Direction.RIGHT) ){
					res += 'steering_drive = MoveSteering(' + rs.robot.leftWheel.portID + "," + rs.robot.rightWheel.portID+') ,'
					res += 'steering_drive.on_for_rotations(' + ""+ExpressionToString(rs.angle as Expression) +', ' +ExpressionToString(rs.speed as Expression) + ', ' +ExpressionToString(rs.duration as Expression) + ')'
				}
			}
		for (act : rs.robot.actuator){
			if (rs instanceof ChangeAngle){
				if (act instanceof Arm){
					res+= "armMotor"+ act.portID + ".on_for_degrees("+ ExpressionToString(rs.speed as Expression) +', '+ExpressionToString(rs.angle as Expression)+')'
				}
			}else
			if ( rs instanceof ChangeIntensity){
				if (act instanceof Led){
					res+= "ledMotor"+ act.portID + ".intensity("+ExpressionToString(rs.intensity as Expression)+')'
				}
			}else
			if( rs instanceof Shoot){
				if (act instanceof ShootLauncher ){
					res += "shootMotor"+ act.portID +  ".on_for_position(-"+ ExpressionToString(rs.force as Expression) +') , '
					res += "shootMotor"+ act.portID +  ".on_for_position("+ ExpressionToString(rs.force as Expression) +')'
				}
			}
			
		}
			return res 
	}
	
	
	def SensorExpressionToString (SensorExpression se){
		var res = ''
		
		if (se instanceof GetDistance){
				res += "laserSensor"+ se.sensor.portID 
		}else
		if (se instanceof GetPosition){ 
				res += "gpsSensor"+ se.sensor.portID 
		}else
		if (se instanceof GetGyro){
				res += "gyroSensor"+ se.sensor.portID 

		}else
		if (se instanceof GetColor ){
				res += "colorSensor"+ se.sensor.portID + ".color_name"

		}
		return res 	
	}
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
