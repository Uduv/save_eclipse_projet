// automatically generated by Xtext
grammar fr.univcotedazur.l3ia.legolanguage.xtext.Uduv with org.eclipse.xtext.common.Terminals

import "http://www.example.org/langageCompilation" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program returns Program:
	{Program}

		(statement+=Statement)*
;

Statement returns Statement:
	If | Loop  | Comparaison | Calcul | Assignement | VariableProxy | Print | Expression | Commentary;

Expression returns Expression:
	 Assignement | VariableProxy | Variable | Calcul | Comparaison ;
	
Calcul returns Calcul : 
	Substarction | Addition | Division | Exponential | Multiplication ;

Comparaison returns Comparaison:
	GT | LT | Equal;

Variable returns Variable:
	LeInteger | LeString | LeFloat | LeBoolean;
	
	
Commentary returns Commentary:
	{Commentary}
	'\'\'\''
		initialeValue=EString
		
	'\'\'\'';

Loop returns Loop : 
	WhileLoop | ForLoop  ;


If returns If :
	'if'
	condition=Comparaison
	'{'
		(statement+=Statement)*
		
	'}';
	

WhileLoop returns WhileLoop:
	'while'

	 loopCondition=Comparaison
	'{'
		(statement+=Statement)*
		
	'}';

ForLoop returns ForLoop:
	'for'
	loopCondition=Comparaison
	'{'
		(statement+=Statement)*
		
	'}';

Addition returns Addition:

	'('
		left=Expression
		'+'
		right=Expression
	')';
Substarction returns Substarction:

	'('
		left=Expression
		'-'
		right=Expression
	')';
	
Division returns Division:

	'('
		left=Expression
		'/'
		right=Expression
	')';

Exponential returns Exponential:

	'('
		left=Expression
		'^'
		right=Expression
	')';

Multiplication returns Multiplication:

	'('
		left=Expression
		'*'
		right=Expression
	')';

GT returns GT:
	'('
		left=Expression
		'>'
		right=Expression
	')';

LT returns LT:
	'('
		left=Expression
		'<'
		right=Expression
	')';

Equal returns Equal:
	'('
		left=Expression
		'=='
		right=Expression
	')';
	
	
Assignement returns Assignement:
	
	'('
		left=Expression
		'='
		 right=Expression
	')'
	;

LeInteger returns LeInteger:
	{LeInteger}
	(isConst?='isConst')?
	('int' name=EString '=')?
		initialeValue=EInt
		;

LeString returns LeString:
	{LeString}
	('string' name=EString '=')?
		initialeValue=EString
		;

LeBoolean returns LeBoolean:
	{LeBoolean}
	('boolean' name=EString '=')?
	
		 initialeValue=EBoolean
		;

LeFloat returns LeFloat:
	{LeFloat}
	('float' name=EString '=')?
		 initialeValue= EFloat 
		;


Print returns Print:
	{Print}
	'print' '(' (statement+=Statement)? ')'
	;

VariableProxy returns VariableProxy:
	Variable=[Variable|EString]
	;


EBoolean returns ecore::EBoolean:
	'True' | 'False';
	
EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;

EFloat returns ecore::EFloat: 
	INT '.' INT;
