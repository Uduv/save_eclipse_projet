// automatically generated by Xtext
grammar fr.univcotedazur.l3ia.legolanguage.xtext.Uduv with org.eclipse.xtext.common.Terminals

import "http://www.example.org/langageCompilation" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program returns Program:
	{Program}
		 
		(statement+=Statement)*
;

Statement returns Statement:
	If | Loop  | Variable | Print | Expression | Commentary | RobotDeclaration | Sensor | Actuator | RobotStatement ;

RobotDeclaration returns Robot:
	'Robot' name=ID 
		('{'  
		"left" leftWheel = Wheel
		"right" rightWheel= Wheel 
		((actuator+=Actuator) |(sensor+=Sensor))*
		'}')?
;




Expression returns Expression:
	 SensorProxy | ActuatorProxy | VariableProxy  | BinaryOperation;
	
Calcul returns Calcul : 
	Substarction | Addition | Division | Exponential | Multiplication ;
	
BinaryOperation returns BinaryOperation :
Comparaison |  Calcul |  Assignement /*| SensorOperation | ActuatorOperation*/ ;


Comparaison returns Comparaison:
	GT | LT | Equal | GTEqual | LTEqual ;

Variable returns Variable:
	LeInteger | LeString | LeFloat | LeBoolean;


Sensor returns Sensor : 
	ColorSensor | LaserSensor | GPSSensor | GyroSensor 
;



RobotStatement returns RobotStatement :
	Go | Turn | ChangeAngle | ChangeIntensity | Shoot
;

Actuator returns Actuator :
	Motor | Led
 
;	

Motor returns Motor :
	RotativeMotor | ShootLauncher
;

RotativeMotor returns RotativeMotor:
	Wheel | Arm
;

Commentary returns Commentary:
	{Commentary}
	'\'\'\''
		initialeValue=EString
		
	'\'\'\'';

Loop returns Loop : 
	WhileLoop | ForLoop  ; 

If returns If :
	'if'
	condition=Comparaison
	'{'
		(statement+=Statement)*
		
	'}';
	
WhileLoop returns WhileLoop:
	'while'

	 loopCondition=Comparaison
	'{'
		(statement+=Statement)*
		
	'}';

ForLoop returns ForLoop:
	'for'
	loopCondition=Comparaison
	'{'
		(statement+=Statement)*
		
	'}';

Addition returns Addition:
	'('
		left=Expression
		'+'
		right=Expression
	')';
	
Substarction returns Substarction:

	'('
		left=Expression
		'-'
		right=Expression
	')';
	
Division returns Division:

	'('
		left=Expression
		'/'
		right=Expression
	')';

Exponential returns Exponential:

	'('
		left=Expression
		'^'
		right=Expression
	')';

Multiplication returns Multiplication:

	'('
		left=Expression
		'*'
		right=Expression
	')';

GT returns GT:
	'('
		left=Expression
		'>'
		right=Expression
	')';
	
GTEqual returns GTEqual:
	'('
		left=Expression
		'>='
		right=Expression
	')';

LT returns LT:
	'('
		left=Expression
		'<'
		right=Expression
	')';

LTEqual returns LTEqual:
	'('
		left=Expression
		'<='
		right=Expression
	')';

Equal returns Equal:
	'('
		left=Expression
		'=='
		right=Expression
	')';
	
Assignement returns Assignement:
	
	'('
		left=Expression
		'='
		 right=Expression
	')'
	;

LeInteger returns LeInteger:
	{LeInteger}
	('int' name=EString '=')?
		initialeValue=EInt
		;

LeString returns LeString:
	{LeString}
	('string' name=EString '=')?
		initialeValue=EString
		;

LeBoolean returns LeBoolean:
	{LeBoolean}
	('boolean' name=EString '=')?
	
		 initialeValue=EBoolean
		;

LeFloat returns LeFloat:
	{LeFloat}
	('float' name=EString '=')?
		 initialeValue= EFloat 
		;

Print returns Print:
	{Print}
	'print' '(' (statement+=Statement)* ')'
	;

VariableProxy returns VariableProxy:
	variable=[Variable|EString]
	;

SensorProxy returns SensorProxy:
	sensor=[Sensor|EString]
	;

ActuatorProxy returns ActuatorProxy:
	actuator=[Actuator|EString]
	;
	
EBoolean returns ecore::EBoolean:
	'True' | 'False';
	
EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;

EFloat returns ecore::EFloat: 
	INT '.' INT
	;
	
Wheel returns Wheel : 
	{Wheel}
	'wheel' 
	'on'
	portID=EString
	("=" speed=EInt)?
;


Arm returns Arm : 
	{Arm}
	'arm'
	name=ID 
	'on'
	portID=EString
	("=" angle=EInt)?
; 


Led returns Led:
	{Led}
	'led'
	name=ID 
	'on'
	portID=EString
	("=" bright=EInt)?
;

 
ShootLauncher returns ShootLauncher : 
	{ShootLauncher}
	'shootLauncher'
	name=ID 
	'on'
	portID=EString
;


ColorSensor returns ColorSensor :
	{ColorSensor}
	'colorSensor'
	name=ID 
	'on'
	portID=EString
	
;	

LaserSensor returns LaserSensor :
	{LaserSensor}
	'laserSensor'
	name=ID 
	'on'
	portID=EString
	
;

GPSSensor returns GPSSensor :
	{GPSSensor}
	'laserSensor'
	name=ID 
	'on'
	portID=EString
;

GyroSensor returns GyroSensor :
	{GyroSensor}
	'laserSensor'
	name=ID 
	'on'
	portID=EString
;


Turn returns Turn : 
	robot=[Robot|ID]
	'turn' '('
	direction=Direction ","
	angle=Expression ","
	speed=Expression ","
	duration=Expression
	')'
;

Go returns Go :
	robot=[Robot|ID]
	'go' '('
	speed=Expression","
	(duration=Expression)?
	')'
;

ChangeAngle returns ChangeAngle :
	robot=[Robot|ID]
	'changeAngle' '('
	angle=Expression','
	(speed=Expression)?
	
	')'
;

ChangeIntensity returns ChangeIntensity :
	robot=[Robot|ID]
	'ChangeIntensity' '('
	intensity=Expression
	')'
;

Shoot returns Shoot :
	robot=[Robot|ID]
	'shoot' '('
	force=Expression ')'
;

enum Color:
	Rouge = "Rouge" | Bleu = "Bleu"
; 

enum Direction:
	Left= "Left" | Right = "Right"
;



