// automatically generated by Xtext
grammar fr.univcotedazur.l3ia.legolanguage.xtext.Uduv with org.eclipse.xtext.common.Terminals

import "http://www.example.org/langageCompilation" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program returns Program:
	{Program}
	'Program'
	name=EString
	'{'
		('statement' '{' statement+=Statement ( "," statement+=Statement)* '}' )?
	'}';

Statement returns Statement:
	WhileLoop | Substarction | GT | Assignement | leInteger | leString | LT | ForLoop | Print | Variable_Proxy;

Comparaison returns Comparaison:
	GT | LT;

Expression returns Expression:
	Substarction | GT | Assignement | LT | Print | Variable_Proxy;

Variable returns Variable:
	leInteger | leString;

EString returns ecore::EString:
	STRING | ID;

WhileLoop returns WhileLoop:
	'WhileLoop'
	name=EString
	'{'
		('statement' '{' statement+=Statement ( "," statement+=Statement)* '}' )?
		'loopCondition' loopCondition=Comparaison
	'}';

Substarction returns Substarction:
	'Substarction'
	name=EString
	'{'
		'left' left=Expression
		'right' right=Expression
	'}';

GT returns GT:
	'GT'
	name=EString
	'{'
		'left' left=Expression
		'right' right=Expression
	'}';

Assignement returns Assignement:
	'Assignement'
	name=EString
	'{'
		'left' left=Expression
		'right' right=Expression
	'}';

leInteger returns leInteger:
	{leInteger}
	(isConst?='isConst')?
	'leInteger'
	name=EString
	'{'
		('initialeValue' initialeValue=EInt)?
	'}';

leString returns leString:
	{leString}
	(isConst?='isConst')?
	'leString'
	name=EString
	'{'
		('initialeValue' initialeValue=EString)?
	'}';

LT returns LT:
	'LT'
	name=EString
	'{'
		'left' left=Expression
		'right' right=Expression
	'}';

ForLoop returns ForLoop:
	'ForLoop'
	name=EString
	'{'
		('statement' '{' statement+=Statement ( "," statement+=Statement)* '}' )?
		'loopCondition' loopCondition=Comparaison
	'}';

Print returns Print:
	{Print}
	'Print'
	name=EString;

Variable_Proxy returns Variable_Proxy:
	'Variable_Proxy'
	name=EString
	'{'
		'Variable' Variable=[Variable|EString]
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EInt returns ecore::EInt:
	'-'? INT;
