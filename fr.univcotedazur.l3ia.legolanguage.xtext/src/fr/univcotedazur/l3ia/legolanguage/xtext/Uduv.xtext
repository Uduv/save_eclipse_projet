// automatically generated by Xtext
grammar fr.univcotedazur.l3ia.legolanguage.xtext.Uduv with org.eclipse.xtext.common.Terminals

import "http://www.example.org/langageCompilation" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program returns Program:
	{Program}
		 
		(statement+=Statement)*
;

Statement returns Statement:
	If | Loop  | Variable | Print | Expression | Commentary | RobotDeclaration | Sensor | Actuator | ActuatorStatement ;

RobotDeclaration returns Robot:
	'Robot' name=ID 
		('{'  
		"left" leftWheel = Wheel
		"right" rightWheel= Wheel 
		((actuator+=Actuator) |(sensor+=Sensor))*
		'}')?
;


Expression returns Expression:
	 VariableProxy  | BinaryOperation | Variable | SensorExpression ;
	
Calcul returns Calcul : 
	Substarction | Addition | Division | Exponential | Multiplication ;
	
BinaryOperation returns BinaryOperation :
Comparaison |  Calcul |  Assignement   ;

Condition returns Condition :
	And | Or | Comparaison
;

Comparaison returns Comparaison:
	GT | LT | Equal | GTEqual | LTEqual ;

Variable returns Variable:
	LeInteger | LeString | LeFloat | LeBoolean;


Sensor returns Sensor : 
	ColorSensor | LaserSensor | GPSSensor | GyroSensor 
;



ActuatorStatement returns ActuatorStatement :
	Go | Turn | ChangeAngle | ChangeIntensity | Shoot 
;

SensorExpression returns SensorExpression :
	GetColor | GetDistance | GetPosition | GetGyro 
;

Actuator returns Actuator :
	Motor | Led
 
;	

Motor returns Motor :
	RotativeMotor | ShootLauncher
;

RotativeMotor returns RotativeMotor:
	Wheel | Arm
;

Commentary returns Commentary:
	{Commentary}
	'\'\'\''
		initialeValue=EString
		
	'\'\'\'';

Loop returns Loop : 
	WhileLoop   ; 

If returns If :
	'if'
	condition=Condition 
	'{'
		(statement+=Statement)*
		
	'}';
	
WhileLoop returns WhileLoop:
	'while'

	 loopCondition=Condition
	'{'
		(statement+=Statement)*
		
	'}';


Addition returns Addition:
	'('
		left=Expression
		'+'
		right=Expression
	')';
	
Substarction returns Substarction:

	'('
		left=Expression
		'-'
		right=Expression
	')';
	
Division returns Division:

	'('
		left=Expression
		'/'
		right=Expression
	')';

Exponential returns Exponential:

	'('
		left=Expression
		'^'
		right=Expression
	')';

Multiplication returns Multiplication:

	'('
		left=Expression
		'*'
		right=Expression
	')';

GT returns GT:
	'('
		left=Expression
		('>'
		right=Expression)?
	')';
	
GTEqual returns GTEqual:
	'('
		left=Expression
		('>='
		right=Expression)?
	')';

LT returns LT:
	'('
		left=Expression
		('<'
		right=Expression)?
	')';

LTEqual returns LTEqual:
	'('
		left=Expression  
		('<='
		right=Expression)?
	')';

Equal returns Equal:
	'('
		left=Expression
		('=='
		right=Expression)?
	')';
	
Assignement returns Assignement:
	
	'('
		left=Expression
		'='
		 right=Expression
	')'
	;

LeInteger returns LeInteger:
	{LeInteger}
	('int' name=EString '=')?
		initialeValue=EInt
		;

LeString returns LeString:
	{LeString}
	('string' name=EString '=')?
		initialeValue=EString
		;

LeBoolean returns LeBoolean:
	{LeBoolean}
	('boolean' name=EString '=')?
	
		 initialeValue=EBoolean
		;

LeFloat returns LeFloat: 
	{LeFloat}
	('float' name=EString '=')?
		 initialeValue= EFloat 
		;

Print returns Print:
	{Print}
	'print' '(' (statement+=Statement)* ')'
	;


VariableProxy returns VariableProxy:
	variable=[Variable|ID]
	;

EBoolean returns ecore::EBoolean:
	'True' | 'False';
	
EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;

EFloat returns ecore::EFloat: 
	INT '.' INT
	;
	
Wheel returns Wheel : 
	{Wheel}
	'wheel' 
	'on'
	portID=EString
;


Arm returns Arm : 
	{Arm}
	'arm'
	name=ID 
	'on'
	portID=EString
; 


Led returns Led:
	{Led}
	'led'
	name=ID 
	'on'
	portID=EString
;

 
ShootLauncher returns ShootLauncher : 
	{ShootLauncher}
	'shootLauncher'
	name=ID 
	'on'
	portID=EString
;


ColorSensor returns ColorSensor :
	{ColorSensor}
	'colorSensor'
	name=ID 
	'on'
	portID=EString
	
;	

LaserSensor returns LaserSensor :
	{LaserSensor}
	'laserSensor'
	name=ID 
	'on'
	portID=EString
	
;

GPSSensor returns GPSSensor :
	{GPSSensor}
	'gpsSensor'
	name=ID 
	'on'
	portID=EString
;

GyroSensor returns GyroSensor :
	{GyroSensor}
	'gyroSensor'
	name=ID 
	'on'
	portID=EString
;




Turn returns Turn : 
	robot=[Robot|ID]
	'turn' '('
	direction=Direction ","
	speed=Expression 
	')'
;

Go returns Go :
	robot=[Robot|ID]
	'go' '('
	speed=Expression 
	')'
;

ChangeAngle returns ChangeAngle :
	robot=[Robot|ID]
	'changeAngle' '('
	angle=Expression
	
	')'
;

ChangeIntensity returns ChangeIntensity :
	robot=[Robot|ID]
	'changeIntensity' '('
	intensity=Expression
	')'
;

Shoot returns Shoot :
	robot=[Robot|ID]
	'shoot' '('
	force=Expression ')'
;

GetColor returns GetColor :
	'getColor' '(' sensor = [ColorSensor|FQN]  ')'
;


GetDistance returns GetDistance :
		'getDistance' '(' 
		sensor = [LaserSensor|FQN]     
		')'
;


GetGyro returns GetGyro :
	'getGyro' '(' sensor = [GyroSensor|FQN]  ')'
;

GetPosition returns GetPosition :
	'getPosition' '(' sensor = [GPSSensor|FQN]  ')'
; 


And returns And :
	 {And}
    '('(left=Expression)
    ('and' right=Expression)
    ')'
;

Or returns Or :
	{Or} 
    '('(left=Expression)
    'or' right=Expression
    ')'

;


enum Direction:
	left= "left" | right = "right"
;

FQN :
    ID('.'ID)*
;


