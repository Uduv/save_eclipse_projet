/*
 * generated by Xtext 2.25.0
 */
grammar InternalUduv;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package fr.univcotedazur.l3ia.legolanguage.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.univcotedazur.l3ia.legolanguage.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.univcotedazur.l3ia.legolanguage.xtext.services.UduvGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private UduvGrammarAccess grammarAccess;

    public InternalUduvParser(TokenStream input, UduvGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected UduvGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getProgramAccess().getProgramAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getStatementStatementParserRuleCall_1_0());
				}
				lv_statement_1_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"statement",
						lv_statement_1_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIfParserRuleCall_0());
		}
		this_If_0=ruleIf
		{
			$current = $this_If_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getLoopParserRuleCall_1());
		}
		this_Loop_1=ruleLoop
		{
			$current = $this_Loop_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getComparaisonParserRuleCall_2());
		}
		this_Comparaison_2=ruleComparaison
		{
			$current = $this_Comparaison_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getCalculParserRuleCall_3());
		}
		this_Calcul_3=ruleCalcul
		{
			$current = $this_Calcul_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getAssignementParserRuleCall_4());
		}
		this_Assignement_4=ruleAssignement
		{
			$current = $this_Assignement_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getVariableProxyParserRuleCall_5());
		}
		this_VariableProxy_5=ruleVariableProxy
		{
			$current = $this_VariableProxy_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getPrintParserRuleCall_6());
		}
		this_Print_6=rulePrint
		{
			$current = $this_Print_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getExpressionParserRuleCall_7());
		}
		this_Expression_7=ruleExpression
		{
			$current = $this_Expression_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getCommentaryParserRuleCall_8());
		}
		this_Commentary_8=ruleCommentary
		{
			$current = $this_Commentary_8.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getAssignementParserRuleCall_0());
		}
		this_Assignement_0=ruleAssignement
		{
			$current = $this_Assignement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getVariableProxyParserRuleCall_1());
		}
		this_VariableProxy_1=ruleVariableProxy
		{
			$current = $this_VariableProxy_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getVariableParserRuleCall_2());
		}
		this_Variable_2=ruleVariable
		{
			$current = $this_Variable_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getCalculParserRuleCall_3());
		}
		this_Calcul_3=ruleCalcul
		{
			$current = $this_Calcul_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getComparaisonParserRuleCall_4());
		}
		this_Comparaison_4=ruleComparaison
		{
			$current = $this_Comparaison_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCalcul
entryRuleCalcul returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCalculRule()); }
	iv_ruleCalcul=ruleCalcul
	{ $current=$iv_ruleCalcul.current; }
	EOF;

// Rule Calcul
ruleCalcul returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getCalculAccess().getSubstarctionParserRuleCall_0());
		}
		this_Substarction_0=ruleSubstarction
		{
			$current = $this_Substarction_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getCalculAccess().getAdditionParserRuleCall_1());
		}
		this_Addition_1=ruleAddition
		{
			$current = $this_Addition_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getCalculAccess().getDivisionParserRuleCall_2());
		}
		this_Division_2=ruleDivision
		{
			$current = $this_Division_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getCalculAccess().getExponentialParserRuleCall_3());
		}
		this_Exponential_3=ruleExponential
		{
			$current = $this_Exponential_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getCalculAccess().getMultiplicationParserRuleCall_4());
		}
		this_Multiplication_4=ruleMultiplication
		{
			$current = $this_Multiplication_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleComparaison
entryRuleComparaison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparaisonRule()); }
	iv_ruleComparaison=ruleComparaison
	{ $current=$iv_ruleComparaison.current; }
	EOF;

// Rule Comparaison
ruleComparaison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getComparaisonAccess().getGTParserRuleCall_0());
		}
		this_GT_0=ruleGT
		{
			$current = $this_GT_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getComparaisonAccess().getLTParserRuleCall_1());
		}
		this_LT_1=ruleLT
		{
			$current = $this_LT_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getComparaisonAccess().getEqualParserRuleCall_2());
		}
		this_Equal_2=ruleEqual
		{
			$current = $this_Equal_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getComparaisonAccess().getGTEqualParserRuleCall_3());
		}
		this_GTEqual_3=ruleGTEqual
		{
			$current = $this_GTEqual_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getComparaisonAccess().getLTEqualParserRuleCall_4());
		}
		this_LTEqual_4=ruleLTEqual
		{
			$current = $this_LTEqual_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getVariableAccess().getLeIntegerParserRuleCall_0());
		}
		this_LeInteger_0=ruleLeInteger
		{
			$current = $this_LeInteger_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getVariableAccess().getLeStringParserRuleCall_1());
		}
		this_LeString_1=ruleLeString
		{
			$current = $this_LeString_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getVariableAccess().getLeFloatParserRuleCall_2());
		}
		this_LeFloat_2=ruleLeFloat
		{
			$current = $this_LeFloat_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getVariableAccess().getLeBooleanParserRuleCall_3());
		}
		this_LeBoolean_3=ruleLeBoolean
		{
			$current = $this_LeBoolean_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCommentary
entryRuleCommentary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommentaryRule()); }
	iv_ruleCommentary=ruleCommentary
	{ $current=$iv_ruleCommentary.current; }
	EOF;

// Rule Commentary
ruleCommentary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getCommentaryAccess().getCommentaryAction_0(),
					$current);
			}
		)
		otherlv_1='\'\'\''
		{
			newLeafNode(otherlv_1, grammarAccess.getCommentaryAccess().getApostropheApostropheApostropheKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCommentaryAccess().getInitialeValueEStringParserRuleCall_2_0());
				}
				lv_initialeValue_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommentaryRule());
					}
					set(
						$current,
						"initialeValue",
						lv_initialeValue_2_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='\'\'\''
		{
			newLeafNode(otherlv_3, grammarAccess.getCommentaryAccess().getApostropheApostropheApostropheKeyword_3());
		}
	)
;

// Entry rule entryRuleLoop
entryRuleLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoopRule()); }
	iv_ruleLoop=ruleLoop
	{ $current=$iv_ruleLoop.current; }
	EOF;

// Rule Loop
ruleLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getLoopAccess().getWhileLoopParserRuleCall_0());
		}
		this_WhileLoop_0=ruleWhileLoop
		{
			$current = $this_WhileLoop_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getLoopAccess().getForLoopParserRuleCall_1());
		}
		this_ForLoop_1=ruleForLoop
		{
			$current = $this_ForLoop_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	iv_ruleIf=ruleIf
	{ $current=$iv_ruleIf.current; }
	EOF;

// Rule If
ruleIf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getConditionComparaisonParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleComparaison
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Comparaison");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getIfAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getStatementStatementParserRuleCall_3_0());
				}
				lv_statement_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					add(
						$current,
						"statement",
						lv_statement_3_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getIfAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleWhileLoop
entryRuleWhileLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileLoopRule()); }
	iv_ruleWhileLoop=ruleWhileLoop
	{ $current=$iv_ruleWhileLoop.current; }
	EOF;

// Rule WhileLoop
ruleWhileLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileLoopAccess().getWhileKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileLoopAccess().getLoopConditionComparaisonParserRuleCall_1_0());
				}
				lv_loopCondition_1_0=ruleComparaison
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileLoopRule());
					}
					set(
						$current,
						"loopCondition",
						lv_loopCondition_1_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Comparaison");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getWhileLoopAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileLoopAccess().getStatementStatementParserRuleCall_3_0());
				}
				lv_statement_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileLoopRule());
					}
					add(
						$current,
						"statement",
						lv_statement_3_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getWhileLoopAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleForLoop
entryRuleForLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForLoopRule()); }
	iv_ruleForLoop=ruleForLoop
	{ $current=$iv_ruleForLoop.current; }
	EOF;

// Rule ForLoop
ruleForLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getForLoopAccess().getForKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForLoopAccess().getLoopConditionComparaisonParserRuleCall_1_0());
				}
				lv_loopCondition_1_0=ruleComparaison
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForLoopRule());
					}
					set(
						$current,
						"loopCondition",
						lv_loopCondition_1_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Comparaison");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getForLoopAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForLoopAccess().getStatementStatementParserRuleCall_3_0());
				}
				lv_statement_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForLoopRule());
					}
					add(
						$current,
						"statement",
						lv_statement_3_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getForLoopAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	iv_ruleAddition=ruleAddition
	{ $current=$iv_ruleAddition.current; }
	EOF;

// Rule Addition
ruleAddition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getAdditionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAdditionAccess().getLeftExpressionParserRuleCall_1_0());
				}
				lv_left_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAdditionRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='+'
		{
			newLeafNode(otherlv_2, grammarAccess.getAdditionAccess().getPlusSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAdditionAccess().getRightExpressionParserRuleCall_3_0());
				}
				lv_right_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAdditionRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getAdditionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleSubstarction
entryRuleSubstarction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubstarctionRule()); }
	iv_ruleSubstarction=ruleSubstarction
	{ $current=$iv_ruleSubstarction.current; }
	EOF;

// Rule Substarction
ruleSubstarction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getSubstarctionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubstarctionAccess().getLeftExpressionParserRuleCall_1_0());
				}
				lv_left_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubstarctionRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='-'
		{
			newLeafNode(otherlv_2, grammarAccess.getSubstarctionAccess().getHyphenMinusKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubstarctionAccess().getRightExpressionParserRuleCall_3_0());
				}
				lv_right_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubstarctionRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getSubstarctionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleDivision
entryRuleDivision returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDivisionRule()); }
	iv_ruleDivision=ruleDivision
	{ $current=$iv_ruleDivision.current; }
	EOF;

// Rule Division
ruleDivision returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getDivisionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDivisionAccess().getLeftExpressionParserRuleCall_1_0());
				}
				lv_left_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDivisionRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='/'
		{
			newLeafNode(otherlv_2, grammarAccess.getDivisionAccess().getSolidusKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDivisionAccess().getRightExpressionParserRuleCall_3_0());
				}
				lv_right_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDivisionRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getDivisionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleExponential
entryRuleExponential returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExponentialRule()); }
	iv_ruleExponential=ruleExponential
	{ $current=$iv_ruleExponential.current; }
	EOF;

// Rule Exponential
ruleExponential returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getExponentialAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExponentialAccess().getLeftExpressionParserRuleCall_1_0());
				}
				lv_left_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExponentialRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='^'
		{
			newLeafNode(otherlv_2, grammarAccess.getExponentialAccess().getCircumflexAccentKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExponentialAccess().getRightExpressionParserRuleCall_3_0());
				}
				lv_right_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExponentialRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getExponentialAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	iv_ruleMultiplication=ruleMultiplication
	{ $current=$iv_ruleMultiplication.current; }
	EOF;

// Rule Multiplication
ruleMultiplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getMultiplicationAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiplicationAccess().getLeftExpressionParserRuleCall_1_0());
				}
				lv_left_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='*'
		{
			newLeafNode(otherlv_2, grammarAccess.getMultiplicationAccess().getAsteriskKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiplicationAccess().getRightExpressionParserRuleCall_3_0());
				}
				lv_right_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getMultiplicationAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleGT
entryRuleGT returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGTRule()); }
	iv_ruleGT=ruleGT
	{ $current=$iv_ruleGT.current; }
	EOF;

// Rule GT
ruleGT returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getGTAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGTAccess().getLeftExpressionParserRuleCall_1_0());
				}
				lv_left_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGTRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='>'
		{
			newLeafNode(otherlv_2, grammarAccess.getGTAccess().getGreaterThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGTAccess().getRightExpressionParserRuleCall_3_0());
				}
				lv_right_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGTRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getGTAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleGTEqual
entryRuleGTEqual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGTEqualRule()); }
	iv_ruleGTEqual=ruleGTEqual
	{ $current=$iv_ruleGTEqual.current; }
	EOF;

// Rule GTEqual
ruleGTEqual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getGTEqualAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGTEqualAccess().getLeftExpressionParserRuleCall_1_0());
				}
				lv_left_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGTEqualRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='>='
		{
			newLeafNode(otherlv_2, grammarAccess.getGTEqualAccess().getGreaterThanSignEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGTEqualAccess().getRightExpressionParserRuleCall_3_0());
				}
				lv_right_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGTEqualRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getGTEqualAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleLT
entryRuleLT returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLTRule()); }
	iv_ruleLT=ruleLT
	{ $current=$iv_ruleLT.current; }
	EOF;

// Rule LT
ruleLT returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getLTAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLTAccess().getLeftExpressionParserRuleCall_1_0());
				}
				lv_left_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLTRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='<'
		{
			newLeafNode(otherlv_2, grammarAccess.getLTAccess().getLessThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLTAccess().getRightExpressionParserRuleCall_3_0());
				}
				lv_right_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLTRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getLTAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleLTEqual
entryRuleLTEqual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLTEqualRule()); }
	iv_ruleLTEqual=ruleLTEqual
	{ $current=$iv_ruleLTEqual.current; }
	EOF;

// Rule LTEqual
ruleLTEqual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getLTEqualAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLTEqualAccess().getLeftExpressionParserRuleCall_1_0());
				}
				lv_left_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLTEqualRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='<='
		{
			newLeafNode(otherlv_2, grammarAccess.getLTEqualAccess().getLessThanSignEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLTEqualAccess().getRightExpressionParserRuleCall_3_0());
				}
				lv_right_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLTEqualRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getLTEqualAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleEqual
entryRuleEqual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualRule()); }
	iv_ruleEqual=ruleEqual
	{ $current=$iv_ruleEqual.current; }
	EOF;

// Rule Equal
ruleEqual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getEqualAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEqualAccess().getLeftExpressionParserRuleCall_1_0());
				}
				lv_left_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEqualRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='=='
		{
			newLeafNode(otherlv_2, grammarAccess.getEqualAccess().getEqualsSignEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEqualAccess().getRightExpressionParserRuleCall_3_0());
				}
				lv_right_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEqualRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getEqualAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleAssignement
entryRuleAssignement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignementRule()); }
	iv_ruleAssignement=ruleAssignement
	{ $current=$iv_ruleAssignement.current; }
	EOF;

// Rule Assignement
ruleAssignement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getAssignementAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignementAccess().getLeftExpressionParserRuleCall_1_0());
				}
				lv_left_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignementRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getAssignementAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignementAccess().getRightExpressionParserRuleCall_3_0());
				}
				lv_right_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignementRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getAssignementAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleLeInteger
entryRuleLeInteger returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeIntegerRule()); }
	iv_ruleLeInteger=ruleLeInteger
	{ $current=$iv_ruleLeInteger.current; }
	EOF;

// Rule LeInteger
ruleLeInteger returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getLeIntegerAccess().getLeIntegerAction_0(),
					$current);
			}
		)
		(
			otherlv_1='int'
			{
				newLeafNode(otherlv_1, grammarAccess.getLeIntegerAccess().getIntKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLeIntegerAccess().getNameEStringParserRuleCall_1_1_0());
					}
					lv_name_2_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLeIntegerRule());
						}
						set(
							$current,
							"name",
							lv_name_2_0,
							"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getLeIntegerAccess().getEqualsSignKeyword_1_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getLeIntegerAccess().getInitialeValueEIntParserRuleCall_2_0());
				}
				lv_initialeValue_4_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLeIntegerRule());
					}
					set(
						$current,
						"initialeValue",
						lv_initialeValue_4_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLeString
entryRuleLeString returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeStringRule()); }
	iv_ruleLeString=ruleLeString
	{ $current=$iv_ruleLeString.current; }
	EOF;

// Rule LeString
ruleLeString returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getLeStringAccess().getLeStringAction_0(),
					$current);
			}
		)
		(
			otherlv_1='string'
			{
				newLeafNode(otherlv_1, grammarAccess.getLeStringAccess().getStringKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLeStringAccess().getNameEStringParserRuleCall_1_1_0());
					}
					lv_name_2_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLeStringRule());
						}
						set(
							$current,
							"name",
							lv_name_2_0,
							"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getLeStringAccess().getEqualsSignKeyword_1_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getLeStringAccess().getInitialeValueEStringParserRuleCall_2_0());
				}
				lv_initialeValue_4_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLeStringRule());
					}
					set(
						$current,
						"initialeValue",
						lv_initialeValue_4_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLeBoolean
entryRuleLeBoolean returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeBooleanRule()); }
	iv_ruleLeBoolean=ruleLeBoolean
	{ $current=$iv_ruleLeBoolean.current; }
	EOF;

// Rule LeBoolean
ruleLeBoolean returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getLeBooleanAccess().getLeBooleanAction_0(),
					$current);
			}
		)
		(
			otherlv_1='boolean'
			{
				newLeafNode(otherlv_1, grammarAccess.getLeBooleanAccess().getBooleanKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLeBooleanAccess().getNameEStringParserRuleCall_1_1_0());
					}
					lv_name_2_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLeBooleanRule());
						}
						set(
							$current,
							"name",
							lv_name_2_0,
							"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getLeBooleanAccess().getEqualsSignKeyword_1_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getLeBooleanAccess().getInitialeValueEBooleanParserRuleCall_2_0());
				}
				lv_initialeValue_4_0=ruleEBoolean
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLeBooleanRule());
					}
					set(
						$current,
						"initialeValue",
						lv_initialeValue_4_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.EBoolean");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLeFloat
entryRuleLeFloat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeFloatRule()); }
	iv_ruleLeFloat=ruleLeFloat
	{ $current=$iv_ruleLeFloat.current; }
	EOF;

// Rule LeFloat
ruleLeFloat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getLeFloatAccess().getLeFloatAction_0(),
					$current);
			}
		)
		(
			otherlv_1='float'
			{
				newLeafNode(otherlv_1, grammarAccess.getLeFloatAccess().getFloatKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLeFloatAccess().getNameEStringParserRuleCall_1_1_0());
					}
					lv_name_2_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLeFloatRule());
						}
						set(
							$current,
							"name",
							lv_name_2_0,
							"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getLeFloatAccess().getEqualsSignKeyword_1_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getLeFloatAccess().getInitialeValueEFloatParserRuleCall_2_0());
				}
				lv_initialeValue_4_0=ruleEFloat
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLeFloatRule());
					}
					set(
						$current,
						"initialeValue",
						lv_initialeValue_4_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.EFloat");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePrint
entryRulePrint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintRule()); }
	iv_rulePrint=rulePrint
	{ $current=$iv_rulePrint.current; }
	EOF;

// Rule Print
rulePrint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getPrintAccess().getPrintAction_0(),
					$current);
			}
		)
		otherlv_1='print'
		{
			newLeafNode(otherlv_1, grammarAccess.getPrintAccess().getPrintKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getPrintAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPrintAccess().getStatementStatementParserRuleCall_3_0());
				}
				lv_statement_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrintRule());
					}
					add(
						$current,
						"statement",
						lv_statement_3_0,
						"fr.univcotedazur.l3ia.legolanguage.xtext.Uduv.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getPrintAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleVariableProxy
entryRuleVariableProxy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableProxyRule()); }
	iv_ruleVariableProxy=ruleVariableProxy
	{ $current=$iv_ruleVariableProxy.current; }
	EOF;

// Rule VariableProxy
ruleVariableProxy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableProxyRule());
				}
			}
			{
				newCompositeNode(grammarAccess.getVariableProxyAccess().getVariableVariableCrossReference_0());
			}
			ruleEString
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleEBoolean
entryRuleEBoolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEBooleanRule()); }
	iv_ruleEBoolean=ruleEBoolean
	{ $current=$iv_ruleEBoolean.current.getText(); }
	EOF;

// Rule EBoolean
ruleEBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='True'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getTrueKeyword_0());
		}
		    |
		kw='False'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEFloat
entryRuleEFloat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEFloatRule()); }
	iv_ruleEFloat=ruleEFloat
	{ $current=$iv_ruleEFloat.current.getText(); }
	EOF;

// Rule EFloat
ruleEFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEFloatAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_2());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
