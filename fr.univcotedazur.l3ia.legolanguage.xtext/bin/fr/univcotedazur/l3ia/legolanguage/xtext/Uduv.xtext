// automatically generated by Xtext
grammar fr.univcotedazur.l3ia.legolanguage.xtext.Uduv with org.eclipse.xtext.common.Terminals

import "http://www.example.org/langageCompilation" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program returns Program:
	{Program}

		(statement+=Statement)*
;

Statement returns Statement:
	WhileLoop | Substarction | GT | Assignement | LeInteger | LeString | LT | ForLoop | Variable_Proxy | Print;

Comparaison returns Comparaison:
	GT | LT | Equal;

Expression returns Expression:
	Substarction | GT | Assignement | LT  | Variable_Proxy;

Variable returns Variable:
	LeInteger | LeString | LeFloat | LeBoolean;


WhileLoop returns WhileLoop:
	'while'

	'(' loopCondition=Comparaison')'
	'{'
		(statement+=Statement)*
		
	'}';

ForLoop returns ForLoop:
	'for'
	'(' loopCondition=Comparaison')'
	'{'
		(statement+=Statement)*
		
	'}';


Substarction returns Substarction:

	'('
		left=Expression
		'-'
		right=Expression
	')';

GT returns GT:
	'('
		left=Expression
		'>'
		right=Expression
	')';

LT returns LT:
	'('
		left=Expression
		'<'
		right=Expression
	')';

Equal returns Equal:
	'('
		left=Expression
		'=='
		right=Expression
	')';
	
	
Assignement returns Assignement:
	
	'('
		left=Expression
		'='
		 right=Expression
	')'
	;

LeInteger returns LeInteger:
	{LeInteger}
	(isConst?='isConst')?
	'int'
	name=EString
	'='
		(initialeValue=EInt)?
		;

LeString returns LeString:
	{LeString}
	'string'
	name=EString
	'='
		( initialeValue=EString)?
		;

LeBoolean returns LeBoolean:
	{LeBoolean}
	'boolean'
	name=EString
	'='
		( initialeValue=EBoolean)?
		;

LeFloat returns LeFloat:
	{LeFloat}
	'float'
	name=EString
	'='
		( initialeValue= EFloat )?
		;


Print returns Print:
	{Print}
	'print(' (statement+=Statement)? ')'
	name=EString;

Variable_Proxy returns Variable_Proxy:
	'Variable_Proxy'
	name=EString
	'{'
		'Variable' Variable=[Variable|EString]
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';
	
EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;

EFloat returns ecore::EFloat: 
	INT '.' INT;
