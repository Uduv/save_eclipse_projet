/**
 */
package fr.univcotedazur.l3ia.legolanguagenew.provider;

import fr.univcotedazur.l3ia.legolanguagenew.util.LegolanguagenewAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class LegolanguagenewItemProviderAdapterFactory extends LegolanguagenewAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LegolanguagenewItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link EObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableRefItemProvider variableRefItemProvider;

	/**
	 * This creates an adapter for a {@link EObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableRefAdapter() {
		if (variableRefItemProvider == null) {
			variableRefItemProvider = new VariableRefItemProvider(this);
		}

		return variableRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link EObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhileLoopItemProvider whileLoopItemProvider;

	/**
	 * This creates an adapter for a {@link EObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhileLoopAdapter() {
		if (whileLoopItemProvider == null) {
			whileLoopItemProvider = new WhileLoopItemProvider(this);
		}

		return whileLoopItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.legolanguagenew.Variable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableItemProvider variableItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.legolanguagenew.Variable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableAdapter() {
		if (variableItemProvider == null) {
			variableItemProvider = new VariableItemProvider(this);
		}

		return variableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.legolanguagenew.Statement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatementItemProvider statementItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.legolanguagenew.Statement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatementAdapter() {
		if (statementItemProvider == null) {
			statementItemProvider = new StatementItemProvider(this);
		}

		return statementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.legolanguagenew.Program} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProgramItemProvider programItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.legolanguagenew.Program}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProgramAdapter() {
		if (programItemProvider == null) {
			programItemProvider = new ProgramItemProvider(this);
		}

		return programItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.legolanguagenew.Substraction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubstractionItemProvider substractionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.legolanguagenew.Substraction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubstractionAdapter() {
		if (substractionItemProvider == null) {
			substractionItemProvider = new SubstractionItemProvider(this);
		}

		return substractionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.legolanguagenew.Comparaison} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComparaisonItemProvider comparaisonItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.legolanguagenew.Comparaison}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComparaisonAdapter() {
		if (comparaisonItemProvider == null) {
			comparaisonItemProvider = new ComparaisonItemProvider(this);
		}

		return comparaisonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.legolanguagenew.Assignement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssignementItemProvider assignementItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.legolanguagenew.Assignement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssignementAdapter() {
		if (assignementItemProvider == null) {
			assignementItemProvider = new AssignementItemProvider(this);
		}

		return assignementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.legolanguagenew.inside_things} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected inside_thingsItemProvider inside_thingsItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.legolanguagenew.inside_things}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createinside_thingsAdapter() {
		if (inside_thingsItemProvider == null) {
			inside_thingsItemProvider = new inside_thingsItemProvider(this);
		}

		return inside_thingsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.legolanguagenew.Variable_Proxy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Variable_ProxyItemProvider variable_ProxyItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.legolanguagenew.Variable_Proxy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariable_ProxyAdapter() {
		if (variable_ProxyItemProvider == null) {
			variable_ProxyItemProvider = new Variable_ProxyItemProvider(this);
		}

		return variable_ProxyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.lang.Object} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerVarItemProvider integerVarItemProvider;

	/**
	 * This creates an adapter for a {@link java.lang.Object}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerVarAdapter() {
		if (integerVarItemProvider == null) {
			integerVarItemProvider = new IntegerVarItemProvider(this);
		}

		return integerVarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.legolanguagenew.StringVar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringVarItemProvider stringVarItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.legolanguagenew.StringVar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringVarAdapter() {
		if (stringVarItemProvider == null) {
			stringVarItemProvider = new StringVarItemProvider(this);
		}

		return stringVarItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (variableRefItemProvider != null)
			variableRefItemProvider.dispose();
		if (whileLoopItemProvider != null)
			whileLoopItemProvider.dispose();
		if (variableItemProvider != null)
			variableItemProvider.dispose();
		if (statementItemProvider != null)
			statementItemProvider.dispose();
		if (programItemProvider != null)
			programItemProvider.dispose();
		if (substractionItemProvider != null)
			substractionItemProvider.dispose();
		if (comparaisonItemProvider != null)
			comparaisonItemProvider.dispose();
		if (assignementItemProvider != null)
			assignementItemProvider.dispose();
		if (inside_thingsItemProvider != null)
			inside_thingsItemProvider.dispose();
		if (variable_ProxyItemProvider != null)
			variable_ProxyItemProvider.dispose();
		if (integerVarItemProvider != null)
			integerVarItemProvider.dispose();
		if (stringVarItemProvider != null)
			stringVarItemProvider.dispose();
	}

}
